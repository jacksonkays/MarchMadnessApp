{"version":3,"file":"TableClient.js","sourceRoot":"","sources":["../../src/TableClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport \"@azure/core-paging\";\nimport {\n  CreateTableEntityResponse,\n  DeleteTableEntityOptions,\n  GetAccessPolicyResponse,\n  GetTableEntityOptions,\n  GetTableEntityResponse,\n  ListTableEntitiesOptions,\n  SignedIdentifier,\n  TableServiceClientOptions as TableClientOptions,\n  TableEntity,\n  TableEntityQueryOptions,\n  TableEntityResult,\n  TableEntityResultPage,\n  TableTransactionResponse,\n  TransactionAction,\n  UpdateMode,\n  UpdateTableEntityOptions,\n} from \"./models\";\nimport {\n  DeleteTableEntityResponse,\n  SetAccessPolicyResponse,\n  UpdateEntityResponse,\n  UpsertEntityResponse,\n} from \"./generatedModels\";\nimport {\n  FullOperationResponse,\n  InternalClientPipelineOptions,\n  OperationOptions,\n} from \"@azure/core-client\";\nimport { GeneratedClient, TableDeleteEntityOptionalParams } from \"./generated\";\nimport {\n  NamedKeyCredential,\n  SASCredential,\n  TokenCredential,\n  isNamedKeyCredential,\n  isSASCredential,\n  isTokenCredential,\n} from \"@azure/core-auth\";\nimport { STORAGE_SCOPE, TablesLoggingAllowedHeaderNames } from \"./utils/constants\";\nimport { decodeContinuationToken, encodeContinuationToken } from \"./utils/continuationToken\";\nimport {\n  deserialize,\n  deserializeObjectsArray,\n  deserializeSignedIdentifier,\n  serialize,\n  serializeQueryOptions,\n  serializeSignedIdentifiers,\n} from \"./serialization\";\nimport { parseXML, stringifyXML } from \"@azure/core-xml\";\nimport { InternalTableTransaction } from \"./TableTransaction\";\nimport { ListEntitiesResponse } from \"./utils/internalModels\";\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { Pipeline } from \"@azure/core-rest-pipeline\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { Table } from \"./generated/operationsInterfaces\";\nimport { TableQueryEntitiesOptionalParams } from \"./generated/models\";\nimport { Uuid } from \"./utils/uuid\";\nimport { cosmosPatchPolicy } from \"./cosmosPathPolicy\";\nimport { createSpan } from \"./utils/tracing\";\nimport { escapeQuotes } from \"./odata\";\nimport { getClientParamsFromConnectionString } from \"./utils/connectionString\";\nimport { handleTableAlreadyExists } from \"./utils/errorHelpers\";\nimport { isCosmosEndpoint } from \"./utils/isCosmosEndpoint\";\nimport { isCredential } from \"./utils/isCredential\";\nimport { logger } from \"./logger\";\nimport { tablesNamedKeyCredentialPolicy } from \"./tablesNamedCredentialPolicy\";\nimport { tablesSASTokenPolicy } from \"./tablesSASTokenPolicy\";\n\n/**\n * A TableClient represents a Client to the Azure Tables service allowing you\n * to perform operations on a single table.\n */\nexport class TableClient {\n  /**\n   * Table Account URL\n   */\n  public url: string;\n  /**\n   * Represents a pipeline for making a HTTP request to a URL.\n   * Pipelines can have multiple policies to manage manipulating each request before and after it is made to the server.\n   */\n  public pipeline: Pipeline;\n  private table: Table;\n  private credential?: NamedKeyCredential | SASCredential | TokenCredential;\n  private transactionClient?: InternalTableTransaction;\n  private clientOptions: TableClientOptions;\n  private readonly allowInsecureConnection: boolean;\n\n  /**\n   * Name of the table to perform operations on.\n   */\n  public readonly tableName: string;\n\n  /**\n   * Creates a new instance of the TableClient class.\n   *\n   * @param url - The URL of the service account that is the target of the desired operation, such as \"https://myaccount.table.core.windows.net\".\n   * @param tableName - the name of the table\n   * @param credential - NamedKeyCredential used to authenticate requests. Only Supported for Node\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   *\n   *\n   * ### Example using an account name/key:\n   *\n   * ```js\n   * const { AzureNamedKeyCredential, TableClient } = require(\"@azure/data-tables\");\n   * const account = \"<storage account name>\";\n   * const accountKey = \"<account key>\"\n   * const tableName = \"<table name>\";\n   * const sharedKeyCredential = new AzureNamedKeyCredential(account, accountKey);\n   *\n   * const client = new TableClient(\n   *   `https://${account}.table.core.windows.net`,\n   *   tableName,\n   *   sharedKeyCredential\n   * );\n   * ```\n   */\n  constructor(\n    url: string,\n    tableName: string,\n    credential: NamedKeyCredential,\n    options?: TableClientOptions\n  );\n  /**\n   * Creates a new instance of the TableClient class.\n   *\n   * @param url - The URL of the service account that is the target of the desired operation, such as \"https://myaccount.table.core.windows.net\".\n   * @param tableName - the name of the table\n   * @param credential - SASCredential used to authenticate requests\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   *\n   *\n   * ### Example using a SAS Token:\n   *\n   * ```js\n   * const { AzureSASCredential, TableClient } = require(\"@azure/data-tables\");\n   * const account = \"<storage account name>\";\n   * const sasToken = \"<sas-token>\";\n   * const tableName = \"<table name>\";\n   * const sasCredential = new AzureSASCredential(sasToken);\n   *\n   * const client = new TableClient(\n   *   `https://${account}.table.core.windows.net`,\n   *   tableName,\n   *   sasCredential\n   * );\n   * ```\n   */\n  constructor(\n    url: string,\n    tableName: string,\n    credential: SASCredential,\n    options?: TableClientOptions\n  );\n  /**\n   * Creates a new instance of the TableClient class.\n   *\n   * @param url - The URL of the service account that is the target of the desired operation, such as \"https://myaccount.table.core.windows.net\".\n   * @param tableName - the name of the table\n   * @param credential - Azure Active Directory credential used to authenticate requests\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   *\n   *\n   * ### Example using an Azure Active Directory credential:\n   *\n   * ```js\n   * cons { DefaultAzureCredential } = require(\"@azure/identity\");\n   * const { AzureSASCredential, TableClient } = require(\"@azure/data-tables\");\n   * const account = \"<storage account name>\";\n   * const sasToken = \"<sas-token>\";\n   * const tableName = \"<table name>\";\n   * const credential = new DefaultAzureCredential();\n   *\n   * const client = new TableClient(\n   *   `https://${account}.table.core.windows.net`,\n   *   tableName,\n   *   credential\n   * );\n   * ```\n   */\n  constructor(\n    url: string,\n    tableName: string,\n    credential: TokenCredential,\n    options?: TableClientOptions\n  );\n  /**\n   * Creates an instance of TableClient.\n   *\n   * @param url - A Client string pointing to Azure Storage table service, such as\n   *              \"https://myaccount.table.core.windows.net\". You can append a SAS,\n   *              such as \"https://myaccount.table.core.windows.net?sasString\".\n   * @param tableName - the name of the table\n   * @param options - Options to configure the HTTP pipeline.\n   *\n   * ### Example appending a SAS token:\n   *\n   * ```js\n   * const { TableClient } = require(\"@azure/data-tables\");\n   * const account = \"<storage account name>\";\n   * const sasToken = \"<SAS token>\";\n   * const tableName = \"<table name>\";\n   *\n   * const client = new TableClient(\n   *   `https://${account}.table.core.windows.net?${sasToken}`,\n   *   `${tableName}`\n   * );\n   * ```\n   */\n  constructor(url: string, tableName: string, options?: TableClientOptions);\n  constructor(\n    url: string,\n    tableName: string,\n    credentialOrOptions?: NamedKeyCredential | SASCredential | TableClientOptions | TokenCredential,\n    options: TableClientOptions = {}\n  ) {\n    this.url = url;\n    this.tableName = tableName;\n\n    const credential = isCredential(credentialOrOptions) ? credentialOrOptions : undefined;\n    this.credential = credential;\n\n    this.clientOptions = (!isCredential(credentialOrOptions) ? credentialOrOptions : options) || {};\n\n    this.allowInsecureConnection = this.clientOptions.allowInsecureConnection ?? false;\n    this.clientOptions.endpoint = this.clientOptions.endpoint || this.url;\n\n    const internalPipelineOptions: InternalClientPipelineOptions = {\n      ...this.clientOptions,\n      loggingOptions: {\n        logger: logger.info,\n        additionalAllowedHeaderNames: [...TablesLoggingAllowedHeaderNames],\n      },\n      deserializationOptions: {\n        parseXML,\n      },\n      serializationOptions: {\n        stringifyXML,\n      },\n      ...(isTokenCredential(this.credential) && {\n        credential: this.credential,\n        credentialScopes: STORAGE_SCOPE,\n      }),\n    };\n\n    const generatedClient = new GeneratedClient(this.url, internalPipelineOptions);\n    if (isNamedKeyCredential(credential)) {\n      generatedClient.pipeline.addPolicy(tablesNamedKeyCredentialPolicy(credential));\n    } else if (isSASCredential(credential)) {\n      generatedClient.pipeline.addPolicy(tablesSASTokenPolicy(credential));\n    }\n\n    if (isCosmosEndpoint(this.url)) {\n      generatedClient.pipeline.addPolicy(cosmosPatchPolicy());\n    }\n\n    this.table = generatedClient.table;\n    this.pipeline = generatedClient.pipeline;\n  }\n\n  /**\n   * Permanently deletes the current table with all of its entities.\n   * @param options - The options parameters.\n   *\n   * ### Example deleting a table\n   * ```js\n   * const { AzureNamedKeyCredential, TableClient } = require(\"@azure/data-tables\")\n   * const account = \"<storage account name>\";\n   * const accountKey = \"<account key>\"\n   * const tableName = \"<table name>\";\n   * const sharedKeyCredential = new AzureNamedKeyCredential(account, accountKey);\n   *\n   * const client = new TableClient(\n   *   `https://${account}.table.core.windows.net`,\n   *   `${tableName}`,\n   *   sharedKeyCredential\n   * );\n   *\n   * // calling deleteTable will delete the table used\n   * // to instantiate the TableClient.\n   * // Note: If the table doesn't exist this function doesn't fail.\n   * await client.deleteTable();\n   * ```\n   */\n  // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n  public async deleteTable(options: OperationOptions = {}): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"TableClient-deleteTable\", options);\n    try {\n      await this.table.delete(this.tableName, updatedOptions);\n    } catch (e) {\n      if (e.statusCode === 404) {\n        logger.info(\"TableClient-deleteTable: Table doesn't exist\");\n      } else {\n        span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n        throw e;\n      }\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   *  Creates a table with the tableName passed to the client constructor\n   * @param options - The options parameters.\n   *\n   * ### Example creating a table\n   * ```js\n   * const { AzureNamedKeyCredential, TableClient } = require(\"@azure/data-tables\")\n   * const account = \"<storage account name>\";\n   * const accountKey = \"<account key>\"\n   * const tableName = \"<table name>\";\n   * const sharedKeyCredential = new AzureNamedKeyCredential(account, accountKey);\n   *\n   * const client = new TableClient(\n   *   `https://${account}.table.core.windows.net`,\n   *   `${tableName}`,\n   *   sharedKeyCredential\n   * );\n   *\n   * // calling create table will create the table used\n   * // to instantiate the TableClient.\n   * // Note: If the table already\n   * // exists this function doesn't throw.\n   * await client.createTable();\n   * ```\n   */\n  // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n  public async createTable(options: OperationOptions = {}): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"TableClient-createTable\", options);\n    try {\n      await this.table.create({ name: this.tableName }, updatedOptions);\n    } catch (e) {\n      handleTableAlreadyExists(e, { ...updatedOptions, span, logger, tableName: this.tableName });\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns a single entity in the table.\n   * @param partitionKey - The partition key of the entity.\n   * @param rowKey - The row key of the entity.\n   * @param options - The options parameters.\n   *\n   * ### Example getting an entity\n   * ```js\n   * const { AzureNamedKeyCredential, TableClient } = require(\"@azure/data-tables\")\n   * const account = \"<storage account name>\";\n   * const accountKey = \"<account key>\"\n   * const tableName = \"<table name>\";\n   * const sharedKeyCredential = new AzureNamedKeyCredential(account, accountKey);\n   *\n   * const client = new TableClient(\n   *   `https://${account}.table.core.windows.net`,\n   *   `${tableName}`,\n   *   sharedKeyCredential\n   * );\n   *\n   * // getEntity will get a single entity stored in the service that\n   * // matches exactly the partitionKey and rowKey used as parameters\n   * // to the method.\n   * const entity = await client.getEntity(\"<partitionKey>\", \"<rowKey>\");\n   * console.log(entity);\n   * ```\n   */\n  public async getEntity<T extends object = Record<string, unknown>>(\n    partitionKey: string,\n    rowKey: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options: GetTableEntityOptions = {}\n  ): Promise<GetTableEntityResponse<TableEntityResult<T>>> {\n    const { span, updatedOptions } = createSpan(\"TableClient-getEntity\", options);\n\n    let parsedBody: any;\n    function onResponse(rawResponse: FullOperationResponse, flatResponse: unknown): void {\n      parsedBody = rawResponse.parsedBody;\n      if (updatedOptions.onResponse) {\n        updatedOptions.onResponse(rawResponse, flatResponse);\n      }\n    }\n\n    try {\n      const { disableTypeConversion, queryOptions, ...getEntityOptions } = updatedOptions || {};\n      await this.table.queryEntitiesWithPartitionAndRowKey(\n        this.tableName,\n        escapeQuotes(partitionKey),\n        escapeQuotes(rowKey),\n        {\n          ...getEntityOptions,\n          queryOptions: serializeQueryOptions(queryOptions || {}),\n          onResponse,\n        }\n      );\n      const tableEntity = deserialize<TableEntityResult<T>>(\n        parsedBody,\n        disableTypeConversion ?? false\n      );\n\n      return tableEntity;\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Queries entities in a table.\n   * @param options - The options parameters.\n   *\n   * Example listing entities\n   * ```js\n   * const { AzureNamedKeyCredential, TableClient } = require(\"@azure/data-tables\")\n   * const account = \"<storage account name>\";\n   * const accountKey = \"<account key>\"\n   * const tableName = \"<table name>\";\n   * const sharedKeyCredential = new AzureNamedKeyCredential(account, accountKey);\n   *\n   * const client = new TableClient(\n   *   `https://${account}.table.core.windows.net`,\n   *   `${tableName}`,\n   *   sharedKeyCredential\n   * );\n   *\n   * // list entities returns a AsyncIterableIterator\n   * // this helps consuming paginated responses by\n   * // automatically handling getting the next pages\n   * const entities = client.listEntities();\n   *\n   * // this loop will get all the entities from all the pages\n   * // returned by the service\n   * for await (const entity of entities) {\n   *    console.log(entity);\n   * }\n   * ```\n   */\n  public listEntities<T extends object = Record<string, unknown>>(\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options: ListTableEntitiesOptions = {}\n  ): PagedAsyncIterableIterator<TableEntityResult<T>, TableEntityResultPage<T>> {\n    const tableName = this.tableName;\n    const iter = this.listEntitiesAll<T>(tableName, options);\n\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings) => {\n        const pageOptions: InternalListTableEntitiesOptions = {\n          ...options,\n          queryOptions: { ...options.queryOptions, top: settings?.maxPageSize },\n        };\n\n        if (settings?.continuationToken) {\n          pageOptions.continuationToken = settings.continuationToken;\n        }\n\n        return this.listEntitiesPage(tableName, pageOptions);\n      },\n    };\n  }\n\n  private async *listEntitiesAll<T extends object>(\n    tableName: string,\n    options?: InternalListTableEntitiesOptions\n  ): AsyncIterableIterator<TableEntityResult<T>> {\n    const firstPage = await this._listEntities<T>(tableName, options);\n    yield* firstPage;\n    if (firstPage.continuationToken) {\n      const optionsWithContinuation: InternalListTableEntitiesOptions = {\n        ...options,\n        continuationToken: firstPage.continuationToken,\n      };\n      for await (const page of this.listEntitiesPage<T>(tableName, optionsWithContinuation)) {\n        yield* page;\n      }\n    }\n  }\n\n  private async *listEntitiesPage<T extends object>(\n    tableName: string,\n    options: InternalListTableEntitiesOptions = {}\n  ): AsyncIterableIterator<ListEntitiesResponse<TableEntityResult<T>>> {\n    const { span, updatedOptions } = createSpan(\"TableClient-listEntitiesPage\", options);\n\n    try {\n      let result = await this._listEntities<T>(tableName, updatedOptions);\n\n      yield result;\n\n      while (result.continuationToken) {\n        const optionsWithContinuation: InternalListTableEntitiesOptions = {\n          ...updatedOptions,\n          continuationToken: result.continuationToken,\n        };\n\n        result = await this._listEntities(tableName, optionsWithContinuation);\n\n        yield result;\n      }\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async _listEntities<T extends object>(\n    tableName: string,\n    options: InternalListTableEntitiesOptions = {}\n  ): Promise<TableEntityResultPage<T>> {\n    const { disableTypeConversion = false } = options;\n    const queryOptions = serializeQueryOptions(options.queryOptions || {});\n    const listEntitiesOptions: TableQueryEntitiesOptionalParams = {\n      ...options,\n      queryOptions,\n    };\n\n    // If a continuation token is used, decode it and set the next row and partition key\n    if (options.continuationToken) {\n      const continuationToken = decodeContinuationToken(options.continuationToken);\n      listEntitiesOptions.nextRowKey = continuationToken.nextRowKey;\n      listEntitiesOptions.nextPartitionKey = continuationToken.nextPartitionKey;\n    }\n\n    const {\n      xMsContinuationNextPartitionKey: nextPartitionKey,\n      xMsContinuationNextRowKey: nextRowKey,\n      value,\n    } = await this.table.queryEntities(tableName, listEntitiesOptions);\n\n    const tableEntities = deserializeObjectsArray<TableEntityResult<T>>(\n      value ?? [],\n      disableTypeConversion\n    );\n\n    // Encode nextPartitionKey and nextRowKey as a single continuation token and add it as a\n    // property to the page.\n    const continuationToken = encodeContinuationToken(nextPartitionKey, nextRowKey);\n    const page: TableEntityResultPage<T> = Object.assign([...tableEntities], {\n      continuationToken,\n    });\n\n    return page;\n  }\n\n  /**\n   * Insert entity in the table.\n   * @param entity - The properties for the table entity.\n   * @param options - The options parameters.\n   *\n   * ### Example creating an entity\n   * ```js\n   * const { AzureNamedKeyCredential, TableClient } = require(\"@azure/data-tables\")\n   * const account = \"<storage account name>\";\n   * const accountKey = \"<account key>\"\n   * const tableName = \"<table name>\";\n   * const sharedKeyCredential = new AzureNamedKeyCredential(account, accountKey);\n   *\n   * const client = new TableClient(\n   *   `https://${account}.table.core.windows.net`,\n   *   `${tableName}`,\n   *   sharedKeyCredential\n   * );\n   *\n   * // partitionKey and rowKey are required properties of the entity to create\n   * // and accepts any other properties\n   * await client.createEntity({partitionKey: \"p1\", rowKey: \"r1\", foo: \"Hello!\"});\n   * ```\n   */\n  public async createEntity<T extends object>(\n    entity: TableEntity<T>,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options: OperationOptions = {}\n  ): Promise<CreateTableEntityResponse> {\n    const { span, updatedOptions } = createSpan(\"TableClient-createEntity\", options);\n\n    try {\n      const { ...createTableEntity } = updatedOptions || {};\n      return await this.table.insertEntity(this.tableName, {\n        ...createTableEntity,\n        tableEntityProperties: serialize(entity),\n        responsePreference: \"return-no-content\",\n      });\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes the specified entity in the table.\n   * @param partitionKey - The partition key of the entity.\n   * @param rowKey - The row key of the entity.\n   * @param options - The options parameters.\n   *\n   * ### Example deleting an entity\n   * ```js\n   * const { AzureNamedKeyCredential, TableClient } = require(\"@azure/data-tables\")\n   * const account = \"<storage account name>\";\n   * const accountKey = \"<account key>\"\n   * const tableName = \"<table name>\";\n   * const sharedKeyCredential = new AzureNamedKeyCredential(account, accountKey);\n   *\n   * const client = new TableClient(\n   *   `https://${account}.table.core.windows.net`,\n   *   `${tableName}`,\n   *   sharedKeyCredential\n   * );\n   *\n   * // deleteEntity deletes the entity that matches\n   * // exactly the partitionKey and rowKey passed as parameters\n   * await client.deleteEntity(\"<partitionKey>\", \"<rowKey>\")\n   * ```\n   */\n  public async deleteEntity(\n    partitionKey: string,\n    rowKey: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options: DeleteTableEntityOptions = {}\n  ): Promise<DeleteTableEntityResponse> {\n    const { span, updatedOptions } = createSpan(\"TableClient-deleteEntity\", options);\n\n    try {\n      const { etag = \"*\", ...rest } = updatedOptions || {};\n      const deleteOptions: TableDeleteEntityOptionalParams = {\n        ...rest,\n      };\n      return await this.table.deleteEntity(\n        this.tableName,\n        escapeQuotes(partitionKey),\n        escapeQuotes(rowKey),\n        etag,\n        deleteOptions\n      );\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Update an entity in the table.\n   * @param entity - The properties of the entity to be updated.\n   * @param mode - The different modes for updating the entity:\n   *               - Merge: Updates an entity by updating the entity's properties without replacing the existing entity.\n   *               - Replace: Updates an existing entity by replacing the entire entity.\n   * @param options - The options parameters.\n   *\n   * ### Example updating an entity\n   * ```js\n   * const { AzureNamedKeyCredential, TableClient } = require(\"@azure/data-tables\")\n   * const account = \"<storage account name>\";\n   * const accountKey = \"<account key>\"\n   * const tableName = \"<table name>\";\n   * const sharedKeyCredential = new AzureNamedKeyCredential(account, accountKey);\n   *\n   * const client = new TableClient(\n   *   `https://${account}.table.core.windows.net`,\n   *   `${tableName}`,\n   *   sharedKeyCredential\n   * );\n   *\n   * const entity = {partitionKey: \"p1\", rowKey: \"r1\", bar: \"updatedBar\"};\n   *\n   * // Update uses update mode \"Merge\" as default\n   * // merge means that update will match a stored entity\n   * // that has the same partitionKey and rowKey as the entity\n   * // passed to the method and then will only update the properties present in it.\n   * // Any other properties that are not defined in the entity passed to updateEntity\n   * // will remain as they are in the service\n   * await client.updateEntity(entity)\n   *\n   * // We can also set the update mode to Replace, which will match the entity passed\n   * // to updateEntity with one stored in the service and replace with the new one.\n   * // If there are any missing properties in the entity passed to updateEntity, they\n   * // will be removed from the entity stored in the service\n   * await client.updateEntity(entity, \"Replace\")\n   * ```\n   */\n  public async updateEntity<T extends object>(\n    entity: TableEntity<T>,\n    mode: UpdateMode = \"Merge\",\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options: UpdateTableEntityOptions = {}\n  ): Promise<UpdateEntityResponse> {\n    const { span, updatedOptions } = createSpan(`TableClient-updateEntity-${mode}`, options);\n\n    try {\n      const partitionKey = escapeQuotes(entity.partitionKey);\n      const rowKey = escapeQuotes(entity.rowKey);\n\n      const { etag = \"*\", ...updateEntityOptions } = updatedOptions || {};\n      if (mode === \"Merge\") {\n        return await this.table.mergeEntity(this.tableName, partitionKey, rowKey, {\n          tableEntityProperties: serialize(entity),\n          ifMatch: etag,\n          ...updateEntityOptions,\n        });\n      }\n      if (mode === \"Replace\") {\n        return await this.table.updateEntity(this.tableName, partitionKey, rowKey, {\n          tableEntityProperties: serialize(entity),\n          ifMatch: etag,\n          ...updateEntityOptions,\n        });\n      }\n\n      throw new Error(`Unexpected value for update mode: ${mode}`);\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Upsert an entity in the table.\n   * @param entity - The properties for the table entity.\n   * @param mode - The different modes for updating the entity:\n   *               - Merge: Updates an entity by updating the entity's properties without replacing the existing entity.\n   *               - Replace: Updates an existing entity by replacing the entire entity.\n   * @param options - The options parameters.\n   *\n   * ### Example upserting an entity\n   * ```js\n   * const { AzureNamedKeyCredential, TableClient } = require(\"@azure/data-tables\")\n   * const account = \"<storage account name>\";\n   * const accountKey = \"<account key>\"\n   * const tableName = \"<table name>\";\n   * const sharedKeyCredential = new AzureNamedKeyCredential(account, accountKey);\n   *\n   * const client = new TableClient(\n   *   `https://${account}.table.core.windows.net`,\n   *   `${tableName}`,\n   *   sharedKeyCredential\n   * );\n   *\n   * const entity = {partitionKey: \"p1\", rowKey: \"r1\", bar: \"updatedBar\"};\n   *\n   * // Upsert uses update mode \"Merge\" as default.\n   * // This behaves similarly to update but creates the entity\n   * // if it doesn't exist in the service\n   * await client.upsertEntity(entity)\n   *\n   * // We can also set the update mode to Replace.\n   * // This behaves similarly to update but creates the entity\n   * // if it doesn't exist in the service\n   * await client.upsertEntity(entity, \"Replace\")\n   * ```\n   */\n  public async upsertEntity<T extends object>(\n    entity: TableEntity<T>,\n    mode: UpdateMode = \"Merge\",\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options: OperationOptions = {}\n  ): Promise<UpsertEntityResponse> {\n    const { span, updatedOptions } = createSpan(`TableClient-upsertEntity-${mode}`, options);\n\n    try {\n      const partitionKey = escapeQuotes(entity.partitionKey);\n      const rowKey = escapeQuotes(entity.rowKey);\n\n      if (mode === \"Merge\") {\n        return await this.table.mergeEntity(this.tableName, partitionKey, rowKey, {\n          tableEntityProperties: serialize(entity),\n          ...updatedOptions,\n        });\n      }\n\n      if (mode === \"Replace\") {\n        return await this.table.updateEntity(this.tableName, partitionKey, rowKey, {\n          tableEntityProperties: serialize(entity),\n          ...updatedOptions,\n        });\n      }\n      throw new Error(`Unexpected value for update mode: ${mode}`);\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves details about any stored access policies specified on the table that may be used with\n   * Shared Access Signatures.\n   * @param options - The options parameters.\n   */\n  public async getAccessPolicy(options: OperationOptions = {}): Promise<GetAccessPolicyResponse> {\n    const { span, updatedOptions } = createSpan(\"TableClient-getAccessPolicy\", options);\n    try {\n      const signedIdentifiers = await this.table.getAccessPolicy(this.tableName, updatedOptions);\n      return deserializeSignedIdentifier(signedIdentifiers);\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets stored access policies for the table that may be used with Shared Access Signatures.\n   * @param tableAcl - The Access Control List for the table.\n   * @param options - The options parameters.\n   */\n  public async setAccessPolicy(\n    tableAcl: SignedIdentifier[],\n    options: OperationOptions = {}\n  ): Promise<SetAccessPolicyResponse> {\n    const { span, updatedOptions } = createSpan(\"TableClient-setAccessPolicy\", options);\n    try {\n      const serlializedAcl = serializeSignedIdentifiers(tableAcl);\n      return await this.table.setAccessPolicy(this.tableName, {\n        ...updatedOptions,\n        tableAcl: serlializedAcl,\n      });\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Submits a Transaction which is composed of a set of actions. You can provide the actions as a list\n   * or you can use {@link TableTransaction} to help building the transaction.\n   *\n   * Example usage:\n   * ```typescript\n   * const { TableClient } = require(\"@azure/data-tables\");\n   * const connectionString = \"<connection-string>\"\n   * const tableName = \"<tableName>\"\n   * const client = TableClient.fromConnectionString(connectionString, tableName);\n   * const actions = [\n   *    [\"create\", {partitionKey: \"p1\", rowKey: \"1\", data: \"test1\"}],\n   *    [\"delete\", {partitionKey: \"p1\", rowKey: \"2\"}],\n   *    [\"update\", {partitionKey: \"p1\", rowKey: \"3\", data: \"newTest\"}, \"Merge\"]\n   * ]\n   * const result = await client.submitTransaction(actions);\n   * ```\n   *\n   * Example usage with TableTransaction:\n   * ```js\n   * const { TableClient } = require(\"@azure/data-tables\");\n   * const connectionString = \"<connection-string>\"\n   * const tableName = \"<tableName>\"\n   * const client = TableClient.fromConnectionString(connectionString, tableName);\n   * const transaction = new TableTransaction();\n   * // Call the available action in the TableTransaction object\n   * transaction.create({partitionKey: \"p1\", rowKey: \"1\", data: \"test1\"});\n   * transaction.delete(\"p1\", \"2\");\n   * transaction.update({partitionKey: \"p1\", rowKey: \"3\", data: \"newTest\"}, \"Merge\")\n   * // submitTransaction with the actions list on the transaction.\n   * const result = await client.submitTransaction(transaction.actions);\n   * ```\n   *\n   * @param actions - tuple that contains the action to perform, and the entity to perform the action with\n   */\n  public async submitTransaction(actions: TransactionAction[]): Promise<TableTransactionResponse> {\n    const partitionKey = actions[0][1].partitionKey;\n    const transactionId = Uuid.generateUuid();\n    const changesetId = Uuid.generateUuid();\n\n    if (!this.transactionClient) {\n      // Add pipeline\n      this.transactionClient = new InternalTableTransaction(\n        this.url,\n        partitionKey,\n        transactionId,\n        changesetId,\n        this.clientOptions,\n        new TableClient(this.url, this.tableName),\n        this.credential,\n        this.allowInsecureConnection\n      );\n    } else {\n      this.transactionClient.reset(transactionId, changesetId, partitionKey);\n    }\n\n    for (const item of actions) {\n      const [action, entity, updateMode = \"Merge\"] = item;\n      switch (action) {\n        case \"create\":\n          this.transactionClient.createEntity(entity);\n          break;\n        case \"delete\":\n          this.transactionClient.deleteEntity(entity.partitionKey, entity.rowKey);\n          break;\n        case \"update\":\n          this.transactionClient.updateEntity(entity, updateMode);\n          break;\n        case \"upsert\":\n          this.transactionClient.upsertEntity(entity, updateMode);\n      }\n    }\n\n    return this.transactionClient.submitTransaction();\n  }\n\n  /**\n   *\n   * Creates an instance of TableClient from connection string.\n   *\n   * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.\n   *                           [ Note - Account connection string can only be used in NODE.JS runtime. ]\n   *                           Account connection string example -\n   *                           `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`\n   *                           SAS connection string example -\n   *                           `BlobEndpoint=https://myaccount.table.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`\n   * @param options - Options to configure the HTTP pipeline.\n   * @returns A new TableClient from the given connection string.\n   */\n  public static fromConnectionString(\n    connectionString: string,\n    tableName: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: TableClientOptions\n  ): TableClient {\n    const {\n      url,\n      options: clientOptions,\n      credential,\n    } = getClientParamsFromConnectionString(connectionString, options);\n    if (credential) {\n      return new TableClient(url, tableName, credential, clientOptions);\n    } else {\n      return new TableClient(url, tableName, clientOptions);\n    }\n  }\n}\n\ntype InternalQueryOptions = TableEntityQueryOptions & { top?: number };\ninterface InternalListTableEntitiesOptions extends ListTableEntitiesOptions {\n  queryOptions?: InternalQueryOptions;\n  /**\n   * An entity query continuation token from a previous call.\n   */\n  continuationToken?: string;\n  /**\n   * If true, automatic type conversion will be disabled and entity properties will\n   * be represented by full metadata types. For example, an Int32 value will be \\{value: \"123\", type: \"Int32\"\\} instead of 123.\n   * This option applies for all the properties\n   */\n  disableTypeConversion?: boolean;\n}\n"]}