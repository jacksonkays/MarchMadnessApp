{"version":3,"file":"TableServiceClient.js","sourceRoot":"","sources":["../../src/TableServiceClient.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAElC,OAAO,oBAAoB,CAAC;AAe5B,OAAO,EAIL,oBAAoB,EACpB,eAAe,EACf,iBAAiB,GAClB,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EAAE,aAAa,EAAE,+BAA+B,EAAE,MAAM,mBAAmB,CAAC;AAEnF,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AACzD,OAAO,EAAE,eAAe,EAAE,MAAM,6BAA6B,CAAC;AAG9D,OAAO,EAAE,cAAc,EAAE,MAAM,qBAAqB,CAAC;AAErD,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAC7C,OAAO,EAAE,mCAAmC,EAAE,MAAM,0BAA0B,CAAC;AAC/E,OAAO,EAAE,wBAAwB,EAAE,MAAM,sBAAsB,CAAC;AAChE,OAAO,EAAE,YAAY,EAAE,MAAM,sBAAsB,CAAC;AACpD,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAClC,OAAO,EAAE,8BAA8B,EAAE,MAAM,+BAA+B,CAAC;AAC/E,OAAO,EAAE,oBAAoB,EAAE,MAAM,wBAAwB,CAAC;AAE9D;;;GAGG;AACH,MAAM,OAAO,kBAAkB;IAgG7B,YACE,GAAW,EACX,mBAI6B,EAC7B,OAAmC;QAEnC,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,MAAM,UAAU,GAAG,YAAY,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,SAAS,CAAC;QACvF,MAAM,aAAa,GACjB,CAAC,CAAC,YAAY,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;QAE7E,aAAa,CAAC,QAAQ,GAAG,aAAa,CAAC,QAAQ,IAAI,IAAI,CAAC,GAAG,CAAC;QAE5D,MAAM,uBAAuB,iDACxB,aAAa,GACb;YACD,cAAc,EAAE;gBACd,MAAM,EAAE,MAAM,CAAC,IAAI;gBACnB,4BAA4B,EAAE,CAAC,GAAG,+BAA+B,CAAC;aACnE;YACD,sBAAsB,EAAE;gBACtB,QAAQ;aACT;YACD,oBAAoB,EAAE;gBACpB,YAAY;aACb;SACF,GACE,CAAC,iBAAiB,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,EAAE,gBAAgB,EAAE,aAAa,EAAE,CAAC,CACtF,CAAC;QACF,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,GAAG,EAAE,uBAAuB,CAAC,CAAC;QACtE,IAAI,oBAAoB,CAAC,UAAU,CAAC,EAAE;YACpC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,8BAA8B,CAAC,UAAU,CAAC,CAAC,CAAC;SACvE;aAAM,IAAI,eAAe,CAAC,UAAU,CAAC,EAAE;YACtC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC,CAAC;SAC7D;QAED,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;QAChC,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;QAC1B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;IAChC,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,aAAa,CAAC,UAA4B,EAAE;QACvD,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,UAAU,CAAC,kCAAkC,EAAE,OAAO,CAAC,CAAC;QACzF,IAAI;YACF,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;SACzD;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,cAAc,CAAC,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;YACnE,MAAM,CAAC,CAAC;SACT;gBAAS;YACR,IAAI,CAAC,GAAG,EAAE,CAAC;SACZ;IACH,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,aAAa,CAAC,UAA4B,EAAE;QACvD,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,UAAU,CAAC,kCAAkC,EAAE,OAAO,CAAC,CAAC;QACzF,IAAI;YACF,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;SACzD;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,cAAc,CAAC,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;YACnE,MAAM,CAAC,CAAC;SACT;gBAAS;YACR,IAAI,CAAC,GAAG,EAAE,CAAC;SACZ;IACH,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAC,aAAa,CACxB,UAA6B,EAC7B,UAAgC,EAAE;QAElC,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,UAAU,CAAC,kCAAkC,EAAE,OAAO,CAAC,CAAC;QACzF,IAAI;YACF,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;SACrE;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,cAAc,CAAC,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;YACnE,MAAM,CAAC,CAAC;SACT;gBAAS;YACR,IAAI,CAAC,GAAG,EAAE,CAAC;SACZ;IACH,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,WAAW,CAAC,IAAY,EAAE,UAA4B,EAAE;QACnE,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,UAAU,CAAC,gCAAgC,EAAE,OAAO,CAAC,CAAC;QACvF,IAAI;YACF,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,oBAAO,cAAc,EAAG,CAAC;SAC1D;QAAC,OAAO,CAAC,EAAE;YACV,wBAAwB,CAAC,CAAC,kCAAO,cAAc,KAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,IAAG,CAAC;SACnF;gBAAS;YACR,IAAI,CAAC,GAAG,EAAE,CAAC;SACZ;IACH,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,WAAW,CAAC,IAAY,EAAE,UAA4B,EAAE;QACnE,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,UAAU,CAAC,gCAAgC,EAAE,OAAO,CAAC,CAAC;QACvF,IAAI;YACF,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;SAC/C;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,CAAC,CAAC,UAAU,KAAK,GAAG,EAAE;gBACxB,MAAM,CAAC,IAAI,CAAC,qDAAqD,CAAC,CAAC;aACpE;iBAAM;gBACL,IAAI,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,cAAc,CAAC,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;gBACnE,MAAM,CAAC,CAAC;aACT;SACF;gBAAS;YACR,IAAI,CAAC,GAAG,EAAE,CAAC;SACZ;IACH,CAAC;IAED;;;OAGG;IACI,UAAU;IACf,8DAA8D;IAC9D,OAA+B;QAE/B,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAEzC,OAAO;YACL,IAAI;gBACF,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;YACrB,CAAC;YACD,CAAC,MAAM,CAAC,aAAa,CAAC;gBACpB,OAAO,IAAI,CAAC;YACd,CAAC;YACD,MAAM,EAAE,CAAC,QAAQ,EAAE,EAAE;gBACnB,MAAM,WAAW,mCACZ,OAAO,KACV,YAAY,EAAE,EAAE,GAAG,EAAE,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,WAAW,EAAE,GAC7C,CAAC;gBAEF,IAAI,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,iBAAiB,EAAE;oBAC/B,WAAW,CAAC,iBAAiB,GAAG,QAAQ,CAAC,iBAAiB,CAAC;iBAC5D;gBAED,OAAO,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;YAC1C,CAAC;SACF,CAAC;IACJ,CAAC;IAEc,aAAa,CAC1B,OAAmC;;;YAEnC,MAAM,SAAS,GAAG,cAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAA,CAAC;YAClD,MAAM,EAAE,iBAAiB,EAAE,GAAG,SAAS,CAAC;YACxC,cAAA,KAAK,CAAC,CAAC,iBAAA,cAAA,SAAS,CAAA,CAAA,CAAA,CAAC;YACjB,IAAI,iBAAiB,EAAE;gBACrB,MAAM,uBAAuB,mCACxB,OAAO,KACV,iBAAiB,GAClB,CAAC;;oBACF,KAAyB,IAAA,KAAA,cAAA,IAAI,CAAC,cAAc,CAAC,uBAAuB,CAAC,CAAA,IAAA;wBAA1D,MAAM,IAAI,WAAA,CAAA;wBACnB,cAAA,KAAK,CAAC,CAAC,iBAAA,cAAA,IAAI,CAAA,CAAA,CAAA,CAAC;qBACb;;;;;;;;;aACF;QACH,CAAC;KAAA;IAEc,cAAc,CAC3B,UAAqC,EAAE;;YAEvC,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,UAAU,CAAC,mCAAmC,EAAE,OAAO,CAAC,CAAC;YAE1F,IAAI;gBACF,IAAI,MAAM,GAAG,cAAM,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,CAAA,CAAC;gBAEpD,oBAAM,MAAM,CAAA,CAAC;gBAEb,OAAO,MAAM,CAAC,iBAAiB,EAAE;oBAC/B,MAAM,uBAAuB,mCACxB,cAAc,KACjB,iBAAiB,EAAE,MAAM,CAAC,iBAAiB,GAC5C,CAAC;oBACF,MAAM,GAAG,cAAM,IAAI,CAAC,WAAW,CAAC,uBAAuB,CAAC,CAAA,CAAC;oBACzD,oBAAM,MAAM,CAAA,CAAC;iBACd;aACF;YAAC,OAAO,CAAC,EAAE;gBACV,IAAI,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,cAAc,CAAC,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;gBACnE,MAAM,CAAC,CAAC;aACT;oBAAS;gBACR,IAAI,CAAC,GAAG,EAAE,CAAC;aACZ;QACH,CAAC;KAAA;IAEO,KAAK,CAAC,WAAW,CAAC,UAAqC,EAAE;QAC/D,MAAM,EAAE,iBAAiB,EAAE,aAAa,KAAqB,OAAO,EAAvB,WAAW,UAAK,OAAO,EAA9D,qBAAoD,CAAU,CAAC;QACrE,MAAM,EAAE,4BAA4B,EAAE,iBAAiB,EAAE,KAAK,GAAG,EAAE,EAAE,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,iCACzF,WAAW,KACd,aAAa,IACb,CAAC;QACH,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,KAAK,CAAC,EAAE,EAAE,iBAAiB,EAAE,CAAC,CAAC;IAC1D,CAAC;IAED;;;;;;;;;;;;OAYG;IACI,MAAM,CAAC,oBAAoB,CAChC,gBAAwB;IACxB,8DAA8D;IAC9D,OAAmC;QAEnC,MAAM,EACJ,GAAG,EACH,OAAO,EAAE,aAAa,EACtB,UAAU,GACX,GAAG,mCAAmC,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;QAEnE,IAAI,UAAU,EAAE;YACd,OAAO,IAAI,kBAAkB,CAAC,GAAG,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC;SAC/D;aAAM;YACL,OAAO,IAAI,kBAAkB,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;SACnD;IACH,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport \"@azure/core-paging\";\nimport {\n  GetPropertiesResponse,\n  GetStatisticsResponse,\n  ServiceProperties,\n  SetPropertiesOptions,\n  SetPropertiesResponse,\n} from \"./generatedModels\";\nimport { InternalClientPipelineOptions, OperationOptions } from \"@azure/core-client\";\nimport {\n  ListTableItemsOptions,\n  TableItem,\n  TableQueryOptions,\n  TableServiceClientOptions,\n} from \"./models\";\nimport {\n  NamedKeyCredential,\n  SASCredential,\n  TokenCredential,\n  isNamedKeyCredential,\n  isSASCredential,\n  isTokenCredential,\n} from \"@azure/core-auth\";\nimport { STORAGE_SCOPE, TablesLoggingAllowedHeaderNames } from \"./utils/constants\";\nimport { Service, Table } from \"./generated\";\nimport { parseXML, stringifyXML } from \"@azure/core-xml\";\nimport { GeneratedClient } from \"./generated/generatedClient\";\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { Pipeline } from \"@azure/core-rest-pipeline\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { TableItemResultPage } from \"./models\";\nimport { createSpan } from \"./utils/tracing\";\nimport { getClientParamsFromConnectionString } from \"./utils/connectionString\";\nimport { handleTableAlreadyExists } from \"./utils/errorHelpers\";\nimport { isCredential } from \"./utils/isCredential\";\nimport { logger } from \"./logger\";\nimport { tablesNamedKeyCredentialPolicy } from \"./tablesNamedCredentialPolicy\";\nimport { tablesSASTokenPolicy } from \"./tablesSASTokenPolicy\";\n\n/**\n * A TableServiceClient represents a Client to the Azure Tables service allowing you\n * to perform operations on the tables and the entities.\n */\nexport class TableServiceClient {\n  /**\n   * Table Account URL\n   */\n  public url: string;\n  /**\n   * Represents a pipeline for making a HTTP request to a URL.\n   * Pipelines can have multiple policies to manage manipulating each request before and after it is made to the server.\n   */\n  public pipeline: Pipeline;\n  private table: Table;\n  private service: Service;\n\n  /**\n   * Creates a new instance of the TableServiceClient class.\n   *\n   * @param url - The URL of the service account that is the target of the desired operation., such as \"https://myaccount.table.core.windows.net\".\n   * @param credential - NamedKeyCredential | SASCredential used to authenticate requests. Only Supported for Node\n   * @param options - Options to configure the HTTP pipeline.\n   *\n   * ### Example using an account name/key:\n   *\n   * ```js\n   * const { AzureNamedKeyCredential, TableServiceClient } = require(\"@azure/data-tables\")\n   * const account = \"<storage account name>\"\n   * const sharedKeyCredential = new AzureNamedKeyCredential(account, \"<account key>\");\n   *\n   * const tableServiceClient = new TableServiceClient(\n   *   `https://${account}.table.core.windows.net`,\n   *   sharedKeyCredential\n   * );\n   * ```\n   */\n  constructor(url: string, credential: NamedKeyCredential, options?: TableServiceClientOptions);\n  /**\n   * Creates a new instance of the TableServiceClient class.\n   *\n   * @param url - The URL of the service account that is the target of the desired operation., such as \"https://myaccount.table.core.windows.net\".\n   * @param credential - SASCredential used to authenticate requests\n   * @param options - Options to configure the HTTP pipeline.\n   *\n   * ### Example using a SAS Token.\n   *\n   * ```js\n   * const { AzureSASCredential, TableServiceClient } = require(\"@azure/data-tables\")\n   * const account = \"<storage account name>\"\n   * const sasCredential = new AzureSASCredential(account, \"<account key>\");\n   *\n   * const tableServiceClient = new TableServiceClient(\n   *   `https://${account}.table.core.windows.net`,\n   *   sasCredential\n   * );\n   * ```\n   */\n  constructor(url: string, credential: SASCredential, options?: TableServiceClientOptions);\n  /**\n   * Creates a new instance of the TableServiceClient class.\n   *\n   * @param url - The URL of the service account that is the target of the desired operation., such as \"https://myaccount.table.core.windows.net\".\n   * @param credential - Azure Active Directory credential used to authenticate requests\n   * @param options - Options to configure the HTTP pipeline.\n   *\n   * ### Example using an Azure Active Directory credential:\n   *\n   * ```js\n   * cons { DefaultAzureCredential } = require(\"@azure/identity\");\n   * const { TableServiceClient } = require(\"@azure/data-tables\")\n   * const account = \"<storage account name>\"\n   * const credential = new DefaultAzureCredential();\n   *\n   * const tableServiceClient = new TableServiceClient(\n   *   `https://${account}.table.core.windows.net`,\n   *   credential\n   * );\n   * ```\n   */\n  constructor(url: string, credential: TokenCredential, options?: TableServiceClientOptions);\n  /**\n   * Creates a new instance of the TableServiceClient class.\n   *\n   * @param url - The URL of the service account that is the target of the desired operation., such as\n   *              \"https://myaccount.table.core.windows.net\". You can append a SAS,\n   *              such as \"https://myaccount.table.core.windows.net?sasString\".\n   * @param options - Options to configure the HTTP pipeline.\n   * Example appending a SAS token:\n   *\n   * ```js\n   * const account = \"<storage account name>\";\n   * const sasToken = \"<SAS token>\";\n   *\n   * const tableServiceClient = new TableServiceClient(\n   *   `https://${account}.table.core.windows.net?${sasToken}`,\n   * );\n   * ```\n   */\n  constructor(url: string, options?: TableServiceClientOptions);\n  constructor(\n    url: string,\n    credentialOrOptions?:\n      | NamedKeyCredential\n      | SASCredential\n      | TokenCredential\n      | TableServiceClientOptions,\n    options?: TableServiceClientOptions\n  ) {\n    this.url = url;\n    const credential = isCredential(credentialOrOptions) ? credentialOrOptions : undefined;\n    const clientOptions =\n      (!isCredential(credentialOrOptions) ? credentialOrOptions : options) || {};\n\n    clientOptions.endpoint = clientOptions.endpoint || this.url;\n\n    const internalPipelineOptions: InternalClientPipelineOptions = {\n      ...clientOptions,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n          additionalAllowedHeaderNames: [...TablesLoggingAllowedHeaderNames],\n        },\n        deserializationOptions: {\n          parseXML,\n        },\n        serializationOptions: {\n          stringifyXML,\n        },\n      },\n      ...(isTokenCredential(credential) && { credential, credentialScopes: STORAGE_SCOPE }),\n    };\n    const client = new GeneratedClient(this.url, internalPipelineOptions);\n    if (isNamedKeyCredential(credential)) {\n      client.pipeline.addPolicy(tablesNamedKeyCredentialPolicy(credential));\n    } else if (isSASCredential(credential)) {\n      client.pipeline.addPolicy(tablesSASTokenPolicy(credential));\n    }\n\n    this.pipeline = client.pipeline;\n    this.table = client.table;\n    this.service = client.service;\n  }\n\n  /**\n   * Retrieves statistics related to replication for the Table service. It is only available on the\n   * secondary location endpoint when read-access geo-redundant replication is enabled for the account.\n   * @param options - The options parameters.\n   */\n  public async getStatistics(options: OperationOptions = {}): Promise<GetStatisticsResponse> {\n    const { span, updatedOptions } = createSpan(\"TableServiceClient-getStatistics\", options);\n    try {\n      return await this.service.getStatistics(updatedOptions);\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Gets the properties of an account's Table service, including properties for Analytics and CORS\n   * (Cross-Origin Resource Sharing) rules.\n   * @param options - The options parameters.\n   */\n  public async getProperties(options: OperationOptions = {}): Promise<GetPropertiesResponse> {\n    const { span, updatedOptions } = createSpan(\"TableServiceClient-getProperties\", options);\n    try {\n      return await this.service.getProperties(updatedOptions);\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets properties for an account's Table service endpoint, including properties for Analytics and CORS\n   * (Cross-Origin Resource Sharing) rules.\n   * @param properties - The Table Service properties.\n   * @param options - The options parameters.\n   */\n  public async setProperties(\n    properties: ServiceProperties,\n    options: SetPropertiesOptions = {}\n  ): Promise<SetPropertiesResponse> {\n    const { span, updatedOptions } = createSpan(\"TableServiceClient-setProperties\", options);\n    try {\n      return await this.service.setProperties(properties, updatedOptions);\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new table under the given account.\n   * @param name - The name of the table.\n   * @param options - The options parameters.\n   */\n  public async createTable(name: string, options: OperationOptions = {}): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"TableServiceClient-createTable\", options);\n    try {\n      await this.table.create({ name }, { ...updatedOptions });\n    } catch (e) {\n      handleTableAlreadyExists(e, { ...updatedOptions, span, logger, tableName: name });\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Operation permanently deletes the specified table.\n   * @param name - The name of the table.\n   * @param options - The options parameters.\n   */\n  public async deleteTable(name: string, options: OperationOptions = {}): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"TableServiceClient-deleteTable\", options);\n    try {\n      await this.table.delete(name, updatedOptions);\n    } catch (e) {\n      if (e.statusCode === 404) {\n        logger.info(\"TableServiceClient-deleteTable: Table doesn't exist\");\n      } else {\n        span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n        throw e;\n      }\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Queries tables under the given account.\n   * @param options - The options parameters.\n   */\n  public listTables(\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: ListTableItemsOptions\n  ): PagedAsyncIterableIterator<TableItem, TableItemResultPage> {\n    const iter = this.listTablesAll(options);\n\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings) => {\n        const pageOptions: InternalListTablesOptions = {\n          ...options,\n          queryOptions: { top: settings?.maxPageSize },\n        };\n\n        if (settings?.continuationToken) {\n          pageOptions.continuationToken = settings.continuationToken;\n        }\n\n        return this.listTablesPage(pageOptions);\n      },\n    };\n  }\n\n  private async *listTablesAll(\n    options?: InternalListTablesOptions\n  ): AsyncIterableIterator<TableItem> {\n    const firstPage = await this._listTables(options);\n    const { continuationToken } = firstPage;\n    yield* firstPage;\n    if (continuationToken) {\n      const optionsWithContinuation: InternalListTablesOptions = {\n        ...options,\n        continuationToken,\n      };\n      for await (const page of this.listTablesPage(optionsWithContinuation)) {\n        yield* page;\n      }\n    }\n  }\n\n  private async *listTablesPage(\n    options: InternalListTablesOptions = {}\n  ): AsyncIterableIterator<TableItemResultPage> {\n    const { span, updatedOptions } = createSpan(\"TableServiceClient-listTablesPage\", options);\n\n    try {\n      let result = await this._listTables(updatedOptions);\n\n      yield result;\n\n      while (result.continuationToken) {\n        const optionsWithContinuation: InternalListTablesOptions = {\n          ...updatedOptions,\n          continuationToken: result.continuationToken,\n        };\n        result = await this._listTables(optionsWithContinuation);\n        yield result;\n      }\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async _listTables(options: InternalListTablesOptions = {}): Promise<TableItemResultPage> {\n    const { continuationToken: nextTableName, ...listOptions } = options;\n    const { xMsContinuationNextTableName: continuationToken, value = [] } = await this.table.query({\n      ...listOptions,\n      nextTableName,\n    });\n    return Object.assign([...value], { continuationToken });\n  }\n\n  /**\n   *\n   * Creates an instance of TableServiceClient from connection string.\n   *\n   * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.\n   *                           [ Note - Account connection string can only be used in NODE.JS runtime. ]\n   *                           Account connection string example -\n   *                           `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`\n   *                           SAS connection string example -\n   *                           `BlobEndpoint=https://myaccount.table.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`\n   * @param options - Options to configure the HTTP pipeline.\n   * @returns A new TableServiceClient from the given connection string.\n   */\n  public static fromConnectionString(\n    connectionString: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: TableServiceClientOptions\n  ): TableServiceClient {\n    const {\n      url,\n      options: clientOptions,\n      credential,\n    } = getClientParamsFromConnectionString(connectionString, options);\n\n    if (credential) {\n      return new TableServiceClient(url, credential, clientOptions);\n    } else {\n      return new TableServiceClient(url, clientOptions);\n    }\n  }\n}\n\ntype InternalListTablesOptions = ListTableItemsOptions & {\n  queryOptions?: TableQueryOptions & { top?: number };\n  /**\n   * A table query continuation token from a previous call.\n   */\n  continuationToken?: string;\n};\n"]}