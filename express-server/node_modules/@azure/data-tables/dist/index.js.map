{"version":3,"file":"index.js","sources":["../src/generated/models/index.ts","../src/sas/accountSasPermissions.ts","../src/sas/accountSasServices.ts","../src/sas/sasIPRange.ts","../src/utils/truncateISO8061Date.ts","../src/sas/sasQueryParameters.ts","../src/sas/accountSasResourceTypes.ts","../src/utils/constants.ts","../src/utils/computeHMACSHA256.ts","../src/sas/accountSasSignatureValues.ts","../src/sas/generateAccountSas.ts","../src/sas/tableSasPermisions.ts","../src/sas/tableSasSignatureValues.ts","../src/sas/generateTableSas.ts","../src/generated/models/mappers.ts","../src/generated/models/parameters.ts","../src/generated/operations/table.ts","../src/generated/operations/service.ts","../src/generated/generatedClientContext.ts","../src/generated/generatedClient.ts","../src/utils/tracing.ts","../src/utils/accountConnectionString.ts","../src/utils/connectionString.ts","../src/utils/errorHelpers.ts","../src/utils/isCredential.ts","../src/logger.ts","../src/tablesNamedCredentialPolicy.ts","../src/tablesSASTokenPolicy.ts","../src/TableServiceClient.ts","../src/utils/transactionHelpers.ts","../src/TablePolicies.ts","../src/cosmosPathPolicy.ts","../src/utils/baseTransactionHeaders.ts","../src/utils/transactionHeaders.ts","../src/utils/isCosmosEndpoint.ts","../src/TableTransaction.ts","../src/utils/bufferSerializer.ts","../src/utils/continuationToken.ts","../src/serialization.ts","../src/utils/uuid.ts","../src/odata.ts","../src/TableClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\n\n/** The properties for the table query response. */\nexport interface TableQueryResponse {\n  /** The metadata response of the table. */\n  odataMetadata?: string;\n  /** List of tables. */\n  value?: TableResponseProperties[];\n}\n\n/** The properties for the table response. */\nexport interface TableResponseProperties {\n  /** The name of the table. */\n  name?: string;\n  /** The odata type of the table. */\n  odataType?: string;\n  /** The id of the table. */\n  odataId?: string;\n  /** The edit link of the table. */\n  odataEditLink?: string;\n}\n\n/** Table Service error. */\nexport interface TableServiceError {\n  /** The odata error. */\n  odataError?: TableServiceErrorOdataError;\n}\n\n/** The odata error. */\nexport interface TableServiceErrorOdataError {\n  /** The service error code. The error codes possible are listed in: https://docs.microsoft.com/rest/api/storageservices/table-service-error-codes */\n  code?: string;\n  /** The service error message. */\n  message?: TableServiceErrorOdataErrorMessage;\n}\n\n/** The service error message. */\nexport interface TableServiceErrorOdataErrorMessage {\n  /** Language code of the error message. */\n  lang?: string;\n  /** The error message. */\n  value?: string;\n}\n\n/** The properties for creating a table. */\nexport interface TableProperties {\n  /** The name of the table to create. */\n  name?: string;\n}\n\n/** The properties for the table entity query response. */\nexport interface TableEntityQueryResponse {\n  /** The metadata response of the table. */\n  odataMetadata?: string;\n  /** List of table entities. */\n  value?: { [propertyName: string]: any }[];\n}\n\n/** A signed identifier. */\nexport interface SignedIdentifier {\n  /** A unique id. */\n  id: string;\n  /** The access policy. */\n  accessPolicy?: AccessPolicy;\n}\n\n/** An Access policy. */\nexport interface AccessPolicy {\n  /** The start datetime from which the policy is active. */\n  start?: string;\n  /** The datetime that the policy expires. */\n  expiry?: string;\n  /** The permissions for the acl policy. */\n  permission?: string;\n}\n\n/** Table Service Properties. */\nexport interface TableServiceProperties {\n  /** Azure Analytics Logging settings. */\n  logging?: Logging;\n  /** A summary of request statistics grouped by API in hourly aggregates for tables. */\n  hourMetrics?: Metrics;\n  /** A summary of request statistics grouped by API in minute aggregates for tables. */\n  minuteMetrics?: Metrics;\n  /** The set of CORS rules. */\n  cors?: CorsRule[];\n}\n\n/** Azure Analytics Logging settings. */\nexport interface Logging {\n  /** The version of Analytics to configure. */\n  version: string;\n  /** Indicates whether all delete requests should be logged. */\n  delete: boolean;\n  /** Indicates whether all read requests should be logged. */\n  read: boolean;\n  /** Indicates whether all write requests should be logged. */\n  write: boolean;\n  /** The retention policy. */\n  retentionPolicy: RetentionPolicy;\n}\n\n/** The retention policy. */\nexport interface RetentionPolicy {\n  /** Indicates whether a retention policy is enabled for the service. */\n  enabled: boolean;\n  /** Indicates the number of days that metrics or logging or soft-deleted data should be retained. All data older than this value will be deleted. */\n  days?: number;\n}\n\n/** A summary of request statistics grouped by API */\nexport interface Metrics {\n  /** The version of Analytics to configure. */\n  version?: string;\n  /** Indicates whether metrics are enabled for the Table service. */\n  enabled: boolean;\n  /** Indicates whether metrics should generate summary statistics for called API operations. */\n  includeAPIs?: boolean;\n  /** The retention policy. */\n  retentionPolicy?: RetentionPolicy;\n}\n\n/** CORS is an HTTP feature that enables a web application running under one domain to access resources in another domain. Web browsers implement a security restriction known as same-origin policy that prevents a web page from calling APIs in a different domain; CORS provides a secure way to allow one domain (the origin domain) to call APIs in another domain. */\nexport interface CorsRule {\n  /** The origin domains that are permitted to make a request against the service via CORS. The origin domain is the domain from which the request originates. Note that the origin must be an exact case-sensitive match with the origin that the user age sends to the service. You can also use the wildcard character '*' to allow all origin domains to make requests via CORS. */\n  allowedOrigins: string;\n  /** The methods (HTTP request verbs) that the origin domain may use for a CORS request. (comma separated) */\n  allowedMethods: string;\n  /** The request headers that the origin domain may specify on the CORS request. */\n  allowedHeaders: string;\n  /** The response headers that may be sent in the response to the CORS request and exposed by the browser to the request issuer. */\n  exposedHeaders: string;\n  /** The maximum amount time that a browser should cache the preflight OPTIONS request. */\n  maxAgeInSeconds: number;\n}\n\n/** Stats for the service. */\nexport interface TableServiceStats {\n  /** Geo-Replication information for the Secondary Storage Service. */\n  geoReplication?: GeoReplication;\n}\n\n/** Geo-Replication information for the Secondary Storage Service */\nexport interface GeoReplication {\n  /** The status of the secondary location. */\n  status: GeoReplicationStatusType;\n  /** A GMT date/time value, to the second. All primary writes preceding this value are guaranteed to be available for read operations at the secondary. Primary writes after this point in time may or may not be available for reads. */\n  lastSyncTime: Date;\n}\n\n/** The response for a single table. */\nexport type TableResponse = TableResponseProperties & {\n  /** The metadata response of the table. */\n  odataMetadata?: string;\n};\n\n/** Defines headers for Table_query operation. */\nexport interface TableQueryHeaders {\n  /** If a client request id header is sent in the request, this header will be present in the response with the same value. */\n  clientRequestId?: string;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the Table service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. */\n  version?: string;\n  /** UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** This header contains the continuation token value. */\n  xMsContinuationNextTableName?: string;\n}\n\n/** Defines headers for Table_query operation. */\nexport interface TableQueryExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Table_create operation. */\nexport interface TableCreateHeaders {\n  /** If a client request id header is sent in the request, this header will be present in the response with the same value. */\n  clientRequestId?: string;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the Table service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. */\n  version?: string;\n  /** UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** Indicates whether the Prefer request header was honored. If the response does not include this header, then the Prefer header was not honored. If this header is returned, its value will either be return-content or return-no-content. */\n  preferenceApplied?: string;\n}\n\n/** Defines headers for Table_create operation. */\nexport interface TableCreateExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Table_delete operation. */\nexport interface TableDeleteHeaders {\n  /** If a client request id header is sent in the request, this header will be present in the response with the same value. */\n  clientRequestId?: string;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the Table service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. */\n  version?: string;\n  /** UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n}\n\n/** Defines headers for Table_delete operation. */\nexport interface TableDeleteExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Table_queryEntities operation. */\nexport interface TableQueryEntitiesHeaders {\n  /** If a client request id header is sent in the request, this header will be present in the response with the same value. */\n  clientRequestId?: string;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the Table service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. */\n  version?: string;\n  /** UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** This header contains the continuation token value for partition key. */\n  xMsContinuationNextPartitionKey?: string;\n  /** This header contains the continuation token value for row key. */\n  xMsContinuationNextRowKey?: string;\n}\n\n/** Defines headers for Table_queryEntities operation. */\nexport interface TableQueryEntitiesExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Table_queryEntitiesWithPartitionAndRowKey operation. */\nexport interface TableQueryEntitiesWithPartitionAndRowKeyHeaders {\n  /** If a client request id header is sent in the request, this header will be present in the response with the same value. */\n  clientRequestId?: string;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the Table service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. */\n  version?: string;\n  /** UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** UTC date/time value generated by the service that indicates the time at which the response was initiated */\n  etag?: string;\n  /** This header contains the continuation token value for partition key. */\n  xMsContinuationNextPartitionKey?: string;\n  /** This header contains the continuation token value for row key. */\n  xMsContinuationNextRowKey?: string;\n}\n\n/** Defines headers for Table_queryEntitiesWithPartitionAndRowKey operation. */\nexport interface TableQueryEntitiesWithPartitionAndRowKeyExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Table_updateEntity operation. */\nexport interface TableUpdateEntityHeaders {\n  /** If a client request id header is sent in the request, this header will be present in the response with the same value. */\n  clientRequestId?: string;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the Table service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. */\n  version?: string;\n  /** UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** UTC date/time value generated by the service that indicates the time at which the entity was last updated. */\n  etag?: string;\n}\n\n/** Defines headers for Table_updateEntity operation. */\nexport interface TableUpdateEntityExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Table_mergeEntity operation. */\nexport interface TableMergeEntityHeaders {\n  /** If a client request id header is sent in the request, this header will be present in the response with the same value. */\n  clientRequestId?: string;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the Table service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. */\n  version?: string;\n  /** UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** UTC date/time value generated by the service that indicates the time at which the entity was last updated. */\n  etag?: string;\n}\n\n/** Defines headers for Table_mergeEntity operation. */\nexport interface TableMergeEntityExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Table_deleteEntity operation. */\nexport interface TableDeleteEntityHeaders {\n  /** If a client request id header is sent in the request, this header will be present in the response with the same value. */\n  clientRequestId?: string;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the Table service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. */\n  version?: string;\n  /** UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n}\n\n/** Defines headers for Table_deleteEntity operation. */\nexport interface TableDeleteEntityExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Table_insertEntity operation. */\nexport interface TableInsertEntityHeaders {\n  /** If a client request id header is sent in the request, this header will be present in the response with the same value. */\n  clientRequestId?: string;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the Table service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. */\n  version?: string;\n  /** UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** UTC date/time value generated by the service that indicates the time at which the entity was last updated. */\n  etag?: string;\n  /** Indicates whether the Prefer request header was honored. If the response does not include this header, then the Prefer header was not honored. If this header is returned, its value will either be return-content or return-no-content. */\n  preferenceApplied?: string;\n  /** Indicates the content type of the payload. The value depends on the value specified for the Accept request header. */\n  contentType?: string;\n}\n\n/** Defines headers for Table_insertEntity operation. */\nexport interface TableInsertEntityExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Table_getAccessPolicy operation. */\nexport interface TableGetAccessPolicyHeaders {\n  /** If a client request id header is sent in the request, this header will be present in the response with the same value. */\n  clientRequestId?: string;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the Table service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. */\n  version?: string;\n  /** UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n}\n\n/** Defines headers for Table_getAccessPolicy operation. */\nexport interface TableGetAccessPolicyExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Table_setAccessPolicy operation. */\nexport interface TableSetAccessPolicyHeaders {\n  /** If a client request id header is sent in the request, this header will be present in the response with the same value. */\n  clientRequestId?: string;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the Table service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. */\n  version?: string;\n  /** UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n}\n\n/** Defines headers for Table_setAccessPolicy operation. */\nexport interface TableSetAccessPolicyExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Service_setProperties operation. */\nexport interface ServiceSetPropertiesHeaders {\n  /** If a client request id header is sent in the request, this header will be present in the response with the same value. */\n  clientRequestId?: string;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the Table service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. */\n  version?: string;\n}\n\n/** Defines headers for Service_setProperties operation. */\nexport interface ServiceSetPropertiesExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Service_getProperties operation. */\nexport interface ServiceGetPropertiesHeaders {\n  /** If a client request id header is sent in the request, this header will be present in the response with the same value. */\n  clientRequestId?: string;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the Table service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. */\n  version?: string;\n}\n\n/** Defines headers for Service_getProperties operation. */\nexport interface ServiceGetPropertiesExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Service_getStatistics operation. */\nexport interface ServiceGetStatisticsHeaders {\n  /** If a client request id header is sent in the request, this header will be present in the response with the same value. */\n  clientRequestId?: string;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the Table service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. */\n  version?: string;\n  /** UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n}\n\n/** Defines headers for Service_getStatistics operation. */\nexport interface ServiceGetStatisticsExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Parameter group */\nexport interface QueryOptions {\n  /** Specifies the media type for the response. */\n  format?: OdataMetadataFormat;\n  /** Maximum number of records to return. */\n  top?: number;\n  /** Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\". */\n  select?: string;\n  /** OData filter expression. */\n  filter?: string;\n}\n\n/** Known values of {@link OdataMetadataFormat} that the service accepts. */\nexport enum KnownOdataMetadataFormat {\n  ApplicationJsonOdataNometadata = \"application/json;odata=nometadata\",\n  ApplicationJsonOdataMinimalmetadata = \"application/json;odata=minimalmetadata\",\n  ApplicationJsonOdataFullmetadata = \"application/json;odata=fullmetadata\"\n}\n\n/**\n * Defines values for OdataMetadataFormat. \\\n * {@link KnownOdataMetadataFormat} can be used interchangeably with OdataMetadataFormat,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **application\\/json;odata=nometadata** \\\n * **application\\/json;odata=minimalmetadata** \\\n * **application\\/json;odata=fullmetadata**\n */\nexport type OdataMetadataFormat = string;\n\n/** Known values of {@link ResponseFormat} that the service accepts. */\nexport enum KnownResponseFormat {\n  ReturnNoContent = \"return-no-content\",\n  ReturnContent = \"return-content\"\n}\n\n/**\n * Defines values for ResponseFormat. \\\n * {@link KnownResponseFormat} can be used interchangeably with ResponseFormat,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **return-no-content** \\\n * **return-content**\n */\nexport type ResponseFormat = string;\n\n/** Known values of {@link GeoReplicationStatusType} that the service accepts. */\nexport enum KnownGeoReplicationStatusType {\n  Live = \"live\",\n  Bootstrap = \"bootstrap\",\n  Unavailable = \"unavailable\"\n}\n\n/**\n * Defines values for GeoReplicationStatusType. \\\n * {@link KnownGeoReplicationStatusType} can be used interchangeably with GeoReplicationStatusType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **live** \\\n * **bootstrap** \\\n * **unavailable**\n */\nexport type GeoReplicationStatusType = string;\n\n/** Optional parameters. */\nexport interface TableQueryOptionalParams extends coreClient.OperationOptions {\n  /** Parameter group */\n  queryOptions?: QueryOptions;\n  /** Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled. */\n  requestId?: string;\n  /** A table query continuation token from a previous call. */\n  nextTableName?: string;\n}\n\n/** Contains response data for the query operation. */\nexport type TableQueryOperationResponse = TableQueryHeaders &\n  TableQueryResponse;\n\n/** Optional parameters. */\nexport interface TableCreateOptionalParams extends coreClient.OperationOptions {\n  /** Parameter group */\n  queryOptions?: QueryOptions;\n  /** Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled. */\n  requestId?: string;\n  /** Specifies whether the response should include the inserted entity in the payload. Possible values are return-no-content and return-content. */\n  responsePreference?: ResponseFormat;\n}\n\n/** Contains response data for the create operation. */\nexport type TableCreateResponse = TableCreateHeaders & TableResponse;\n\n/** Optional parameters. */\nexport interface TableDeleteOptionalParams extends coreClient.OperationOptions {\n  /** Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled. */\n  requestId?: string;\n}\n\n/** Contains response data for the delete operation. */\nexport type TableDeleteResponse = TableDeleteHeaders;\n\n/** Optional parameters. */\nexport interface TableQueryEntitiesOptionalParams\n  extends coreClient.OperationOptions {\n  /** Parameter group */\n  queryOptions?: QueryOptions;\n  /** Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled. */\n  requestId?: string;\n  /** The timeout parameter is expressed in seconds. */\n  timeout?: number;\n  /** An entity query continuation token from a previous call. */\n  nextPartitionKey?: string;\n  /** An entity query continuation token from a previous call. */\n  nextRowKey?: string;\n}\n\n/** Contains response data for the queryEntities operation. */\nexport type TableQueryEntitiesResponse = TableQueryEntitiesHeaders &\n  TableEntityQueryResponse;\n\n/** Optional parameters. */\nexport interface TableQueryEntitiesWithPartitionAndRowKeyOptionalParams\n  extends coreClient.OperationOptions {\n  /** Parameter group */\n  queryOptions?: QueryOptions;\n  /** Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled. */\n  requestId?: string;\n  /** The timeout parameter is expressed in seconds. */\n  timeout?: number;\n}\n\n/** Contains response data for the queryEntitiesWithPartitionAndRowKey operation. */\nexport type TableQueryEntitiesWithPartitionAndRowKeyResponse = TableQueryEntitiesWithPartitionAndRowKeyHeaders & {\n  [propertyName: string]: any;\n};\n\n/** Optional parameters. */\nexport interface TableUpdateEntityOptionalParams\n  extends coreClient.OperationOptions {\n  /** Parameter group */\n  queryOptions?: QueryOptions;\n  /** Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled. */\n  requestId?: string;\n  /** The timeout parameter is expressed in seconds. */\n  timeout?: number;\n  /** The properties for the table entity. */\n  tableEntityProperties?: { [propertyName: string]: any };\n  /** Match condition for an entity to be updated. If specified and a matching entity is not found, an error will be raised. To force an unconditional update, set to the wildcard character (*). If not specified, an insert will be performed when no existing entity is found to update and a replace will be performed if an existing entity is found. */\n  ifMatch?: string;\n}\n\n/** Contains response data for the updateEntity operation. */\nexport type TableUpdateEntityResponse = TableUpdateEntityHeaders;\n\n/** Optional parameters. */\nexport interface TableMergeEntityOptionalParams\n  extends coreClient.OperationOptions {\n  /** Parameter group */\n  queryOptions?: QueryOptions;\n  /** Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled. */\n  requestId?: string;\n  /** The timeout parameter is expressed in seconds. */\n  timeout?: number;\n  /** The properties for the table entity. */\n  tableEntityProperties?: { [propertyName: string]: any };\n  /** Match condition for an entity to be updated. If specified and a matching entity is not found, an error will be raised. To force an unconditional update, set to the wildcard character (*). If not specified, an insert will be performed when no existing entity is found to update and a merge will be performed if an existing entity is found. */\n  ifMatch?: string;\n}\n\n/** Contains response data for the mergeEntity operation. */\nexport type TableMergeEntityResponse = TableMergeEntityHeaders;\n\n/** Optional parameters. */\nexport interface TableDeleteEntityOptionalParams\n  extends coreClient.OperationOptions {\n  /** Parameter group */\n  queryOptions?: QueryOptions;\n  /** Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled. */\n  requestId?: string;\n  /** The timeout parameter is expressed in seconds. */\n  timeout?: number;\n}\n\n/** Contains response data for the deleteEntity operation. */\nexport type TableDeleteEntityResponse = TableDeleteEntityHeaders;\n\n/** Optional parameters. */\nexport interface TableInsertEntityOptionalParams\n  extends coreClient.OperationOptions {\n  /** Parameter group */\n  queryOptions?: QueryOptions;\n  /** Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled. */\n  requestId?: string;\n  /** Specifies whether the response should include the inserted entity in the payload. Possible values are return-no-content and return-content. */\n  responsePreference?: ResponseFormat;\n  /** The timeout parameter is expressed in seconds. */\n  timeout?: number;\n  /** The properties for the table entity. */\n  tableEntityProperties?: { [propertyName: string]: any };\n}\n\n/** Contains response data for the insertEntity operation. */\nexport type TableInsertEntityResponse = TableInsertEntityHeaders & {\n  [propertyName: string]: any;\n};\n\n/** Optional parameters. */\nexport interface TableGetAccessPolicyOptionalParams\n  extends coreClient.OperationOptions {\n  /** Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled. */\n  requestId?: string;\n  /** The timeout parameter is expressed in seconds. */\n  timeout?: number;\n}\n\n/** Contains response data for the getAccessPolicy operation. */\nexport type TableGetAccessPolicyResponse = TableGetAccessPolicyHeaders &\n  SignedIdentifier[];\n\n/** Optional parameters. */\nexport interface TableSetAccessPolicyOptionalParams\n  extends coreClient.OperationOptions {\n  /** Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled. */\n  requestId?: string;\n  /** The timeout parameter is expressed in seconds. */\n  timeout?: number;\n  /** The acls for the table. */\n  tableAcl?: SignedIdentifier[];\n}\n\n/** Contains response data for the setAccessPolicy operation. */\nexport type TableSetAccessPolicyResponse = TableSetAccessPolicyHeaders;\n\n/** Optional parameters. */\nexport interface ServiceSetPropertiesOptionalParams\n  extends coreClient.OperationOptions {\n  /** Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled. */\n  requestId?: string;\n  /** The timeout parameter is expressed in seconds. */\n  timeout?: number;\n}\n\n/** Contains response data for the setProperties operation. */\nexport type ServiceSetPropertiesResponse = ServiceSetPropertiesHeaders;\n\n/** Optional parameters. */\nexport interface ServiceGetPropertiesOptionalParams\n  extends coreClient.OperationOptions {\n  /** Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled. */\n  requestId?: string;\n  /** The timeout parameter is expressed in seconds. */\n  timeout?: number;\n}\n\n/** Contains response data for the getProperties operation. */\nexport type ServiceGetPropertiesResponse = ServiceGetPropertiesHeaders &\n  TableServiceProperties;\n\n/** Optional parameters. */\nexport interface ServiceGetStatisticsOptionalParams\n  extends coreClient.OperationOptions {\n  /** Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled. */\n  requestId?: string;\n  /** The timeout parameter is expressed in seconds. */\n  timeout?: number;\n}\n\n/** Contains response data for the getStatistics operation. */\nexport type ServiceGetStatisticsResponse = ServiceGetStatisticsHeaders &\n  TableServiceStats;\n\n/** Optional parameters. */\nexport interface GeneratedClientOptionalParams\n  extends coreClient.ServiceClientOptions {\n  /** Specifies the version of the operation to use for this request. */\n  version?: string;\n  /** Overrides client endpoint. */\n  endpoint?: string;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Parse initializes the AccountSASPermissions fields from a string.\n *\n * @param permissions -\n */\nexport function accountSasPermissionsFromString(permissions: string): AccountSasPermissions {\n  const accountSasPermissions: AccountSasPermissions = {};\n\n  for (const c of permissions) {\n    switch (c) {\n      case \"r\":\n        accountSasPermissions.query = true;\n        break;\n      case \"w\":\n        accountSasPermissions.write = true;\n        break;\n      case \"d\":\n        accountSasPermissions.delete = true;\n        break;\n      case \"l\":\n        accountSasPermissions.list = true;\n        break;\n      case \"a\":\n        accountSasPermissions.add = true;\n        break;\n      case \"u\":\n        accountSasPermissions.update = true;\n        break;\n\n      default:\n        throw new RangeError(`Invalid permission character: ${c}`);\n    }\n  }\n\n  return accountSasPermissions;\n}\n\n/**\n * Produces the SAS permissions string for an Azure Storage account.\n * Call this method to set AccountSASSignatureValues Permissions field.\n *\n * Using this method will guarantee the resource types are in\n * an order accepted by the service.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n *\n */\nexport function accountSasPermissionsToString(permissions: AccountSasPermissions): string {\n  // The order of the characters should be as specified here to ensure correctness:\n  // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n  // Use a string array instead of string concatenating += operator for performance\n  const permissionString: string[] = [];\n  if (permissions.query) {\n    permissionString.push(\"r\");\n  }\n  if (permissions.write) {\n    permissionString.push(\"w\");\n  }\n  if (permissions.delete) {\n    permissionString.push(\"d\");\n  }\n  if (permissions.list) {\n    permissionString.push(\"l\");\n  }\n  if (permissions.add) {\n    permissionString.push(\"a\");\n  }\n  if (permissions.update) {\n    permissionString.push(\"u\");\n  }\n\n  return permissionString.join(\"\");\n}\n\n/**\n * A type that looks like an account SAS permission.\n * Used in {@link AccountSasPermissions} to parse SAS permissions from raw objects.\n */\nexport interface AccountSasPermissions {\n  /**\n   * Grants permission to list entities.\n   */\n  query?: boolean;\n\n  /**\n   * Grants permission to create tables\n   */\n  write?: boolean;\n\n  /**\n   * Grants permission to delete tables and entities\n   */\n  delete?: boolean;\n\n  /**\n   * Grants permission to list tables\n   */\n  list?: boolean;\n\n  /**\n   * Grants permission to create entities\n   */\n  add?: boolean;\n\n  /**\n   * Permissions to update messages and table entities granted.\n   */\n  update?: boolean;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Creates an {@link AccountSasServices} from the specified services string. This method will throw an\n * Error if it encounters a character that does not correspond to a valid service.\n *\n * @param services -\n */\nexport function accountSasServicesFromString(services: string): AccountSasServices {\n  const accountSasServices: AccountSasServices = {};\n\n  for (const c of services) {\n    switch (c) {\n      case \"b\":\n        accountSasServices.blob = true;\n        break;\n      case \"f\":\n        accountSasServices.file = true;\n        break;\n      case \"q\":\n        accountSasServices.queue = true;\n        break;\n      case \"t\":\n        accountSasServices.table = true;\n        break;\n      default:\n        throw new RangeError(`Invalid service character: ${c}`);\n    }\n  }\n\n  return accountSasServices;\n}\n\n/**\n * Converts the given services to a string.\n *\n */\nexport function accountSasServicesToString(services: AccountSasServices = { table: true }): string {\n  const servicesString: string[] = [];\n  if (services.blob) {\n    servicesString.push(\"b\");\n  }\n  if (services.table) {\n    servicesString.push(\"t\");\n  }\n  if (services.queue) {\n    servicesString.push(\"q\");\n  }\n  if (services.file) {\n    servicesString.push(\"f\");\n  }\n  return servicesString.join(\"\");\n}\n/**\n * Services that the SAS token can access\n */\nexport interface AccountSasServices {\n  /**\n   * Permission to access blob resources granted.\n   */\n  blob?: boolean;\n\n  /**\n   * Permission to access file resources granted.\n   */\n  file?: boolean;\n\n  /**\n   * Permission to access queue resources granted.\n   */\n\n  queue?: boolean;\n  /**\n   * Permission to access table resources granted.\n   */\n  table?: boolean;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Allowed IP range for a SAS.\n */\nexport interface SasIPRange {\n  /**\n   * Starting IP address in the IP range.\n   * If end IP doesn't provide, start IP will the only IP allowed.\n   */\n  start: string;\n  /**\n   * Optional. IP address that ends the IP range.\n   * If not provided, start IP will the only IP allowed.\n   */\n  end?: string;\n}\n\n/**\n * Generate SasIPRange format string. For example:\n *\n * \"8.8.8.8\" or \"1.1.1.1-255.255.255.255\"\n *\n * @param ipRange -\n */\nexport function ipRangeToString(ipRange?: SasIPRange): string {\n  if (!ipRange) {\n    return \"\";\n  }\n\n  return ipRange.end ? `${ipRange.start}-${ipRange.end}` : ipRange.start;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Rounds a date off to seconds.\n *\n * @param date -\n * @param withMilliseconds - If true, YYYY-MM-DDThh:mm:ss.fffffffZ will be returned;\n *                                          If false, YYYY-MM-DDThh:mm:ssZ will be returned.\n * @returns Date string in ISO8061 format, with or without 7 milliseconds component\n */\nexport function truncatedISO8061Date(date: Date, withMilliseconds: boolean = true): string {\n  // Date.toISOString() will return like \"2018-10-29T06:34:36.139Z\"\n  const dateString = date.toISOString();\n\n  return withMilliseconds\n    ? dateString.substring(0, dateString.length - 1) + \"0000\" + \"Z\"\n    : dateString.substring(0, dateString.length - 5) + \"Z\";\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { SasIPRange, ipRangeToString } from \"./sasIPRange\";\nimport { UserDelegationKey } from \"./models\";\nimport { truncatedISO8061Date } from \"../utils/truncateISO8061Date\";\n\n/**\n * Protocols for generated SAS.\n */\nexport type SasProtocol = \"https\" | \"https,http\";\n\n/**\n * Represents the components that make up an Azure SAS' query parameters. This type is not constructed directly\n * by the user; it is only generated by the {@link AccountSasSignatureValues} and {@link TableSasSignatureValues}\n * types. Once generated, it can be encoded into a `string` and appended to a URL directly (though caution should\n * be taken here in case there are existing query parameters, which might affect the appropriate means of appending\n * these query parameters).\n *\n * NOTE: Instances of this class are immutable.\n */\nexport class SasQueryParameters {\n  /**\n   * The Tables API version.\n   */\n  public readonly version: string;\n\n  /**\n   * Optional. Table name to generate the SAS for\n   */\n  public readonly tableName?: string;\n\n  /**\n   * Optional. The allowed HTTP protocol(s).\n   */\n  public readonly protocol?: SasProtocol;\n\n  /**\n   * Optional. The start time for this SAS token.\n   */\n  public readonly startsOn?: Date;\n\n  /**\n   * Optional only when identifier is provided. The expiry time for this SAS token.\n   */\n  public readonly expiresOn?: Date;\n\n  /**\n   * Optional only when identifier is provided.\n   * Please refer to {@link AccountSasPermissions}, or {@link TableSasPermissions} for\n   * more details.\n   */\n  public readonly permissions?: string;\n\n  /**\n   * Optional. The table services being accessed (only for Account SAS). Please refer to {@link AccountSasServices}\n   * for more details.\n   */\n  public readonly services?: string;\n\n  /**\n   * Optional. The table resource types being accessed (only for Account SAS). Please refer to\n   * {@link AccountSasResourceTypes} for more details.\n   */\n  public readonly resourceTypes?: string;\n\n  /**\n   * Optional. The signed identifier (only for {@link TableSasSignatureValues}).\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/establishing-a-stored-access-policy\n   */\n  public readonly identifier?: string;\n\n  /**\n   * The signature for the SAS token.\n   */\n  public readonly signature: string;\n\n  /**\n   * Inner value of getter ipRange.\n   */\n  private readonly ipRangeInner?: SasIPRange;\n\n  /**\n   * The Azure Active Directory object ID in GUID format.\n   * Property of user delegation key.\n   */\n  private readonly signedOid?: string;\n\n  /**\n   * The Azure Active Directory tenant ID in GUID format.\n   * Property of user delegation key.\n   */\n  private readonly signedTenantId?: string;\n\n  /**\n   * The date-time the key is active.\n   * Property of user delegation key.\n   */\n  private readonly signedStartsOn?: Date;\n\n  /**\n   * The date-time the key expires.\n   * Property of user delegation key.\n   */\n  private readonly signedExpiresOn?: Date;\n\n  /**\n   * Abbreviation of the Azure Table service that accepts the user delegation key.\n   * Property of user delegation key.\n   */\n  private readonly signedService?: string;\n\n  /**\n   * The service version that created the user delegation key.\n   * Property of user delegation key.\n   */\n  private readonly signedVersion?: string;\n\n  /**\n   * Authorized AAD Object ID in GUID format. The AAD Object ID of a user authorized by the owner of the User Delegation Key\n   * to perform the action granted by the SAS. The Azure Table service will ensure that the owner of the user delegation key\n   * has the required permissions before granting access but no additional permission check for the user specified in\n   * this value will be performed. This is only used for User Delegation SAS.\n   */\n  public readonly preauthorizedAgentObjectId?: string;\n\n  /**\n   * A GUID value that will be logged in the table diagnostic logs and can be used to correlate SAS generation with table resource access.\n   * This is only used for User Delegation SAS.\n   */\n  public readonly correlationId?: string;\n\n  /**\n   * Optional. IP range allowed for this SAS.\n   *\n   * @readonly\n   */\n  public get ipRange(): SasIPRange | undefined {\n    if (this.ipRangeInner) {\n      return {\n        end: this.ipRangeInner.end,\n        start: this.ipRangeInner.start,\n      };\n    }\n    return undefined;\n  }\n\n  /**\n   * Creates an instance of SASQueryParameters.\n   *\n   * @param version - Representing the table service version\n   * @param signature - Representing the signature for the SAS token\n   * @param options - Optional. Options to construct the SASQueryParameters.\n   */\n  constructor(version: string, signature: string, options: SasQueryParametersOptions = {}) {\n    this.version = version;\n    this.signature = signature;\n\n    this.permissions = options.permissions;\n    this.services = options.services;\n    this.resourceTypes = options.resourceTypes;\n    this.protocol = options.protocol;\n    this.startsOn = options.startsOn;\n    this.expiresOn = options.expiresOn;\n    this.ipRangeInner = options.ipRange;\n    this.identifier = options.identifier;\n    this.tableName = options.tableName;\n\n    if (options.userDelegationKey) {\n      this.signedOid = options.userDelegationKey.signedObjectId;\n      this.signedTenantId = options.userDelegationKey.signedTenantId;\n      this.signedStartsOn = options.userDelegationKey.signedStartsOn;\n      this.signedExpiresOn = options.userDelegationKey.signedExpiresOn;\n      this.signedService = options.userDelegationKey.signedService;\n      this.signedVersion = options.userDelegationKey.signedVersion;\n\n      this.preauthorizedAgentObjectId = options.preauthorizedAgentObjectId;\n      this.correlationId = options.correlationId;\n    }\n  }\n\n  /**\n   * Encodes all SAS query parameters into a string that can be appended to a URL.\n   *\n   */\n  public toString(): string {\n    const params: string[] = [\n      \"sv\",\n      \"ss\",\n      \"srt\",\n      \"spr\",\n      \"st\",\n      \"se\",\n      \"sip\",\n      \"si\",\n      \"skoid\", // Signed object ID\n      \"sktid\", // Signed tenant ID\n      \"skt\", // Signed key start time\n      \"ske\", // Signed key expiry time\n      \"sks\", // Signed key service\n      \"skv\", // Signed key version\n      \"sr\",\n      \"sp\",\n      \"sig\",\n      \"rscc\",\n      \"rscd\",\n      \"rsce\",\n      \"rscl\",\n      \"rsct\",\n      \"saoid\",\n      \"scid\",\n      \"tn\", // TableName\n    ];\n    const queries: string[] = [];\n\n    for (const param of params) {\n      switch (param) {\n        case \"sv\":\n          this.tryAppendQueryParameter(queries, param, this.version);\n          break;\n        case \"ss\":\n          this.tryAppendQueryParameter(queries, param, this.services);\n          break;\n        case \"srt\":\n          this.tryAppendQueryParameter(queries, param, this.resourceTypes);\n          break;\n        case \"spr\":\n          this.tryAppendQueryParameter(queries, param, this.protocol);\n          break;\n        case \"st\":\n          this.tryAppendQueryParameter(\n            queries,\n            param,\n            this.startsOn ? truncatedISO8061Date(this.startsOn, false) : undefined\n          );\n          break;\n        case \"se\":\n          this.tryAppendQueryParameter(\n            queries,\n            param,\n            this.expiresOn ? truncatedISO8061Date(this.expiresOn, false) : undefined\n          );\n          break;\n        case \"sip\":\n          this.tryAppendQueryParameter(\n            queries,\n            param,\n            this.ipRange ? ipRangeToString(this.ipRange) : undefined\n          );\n          break;\n        case \"si\":\n          this.tryAppendQueryParameter(queries, param, this.identifier);\n          break;\n        case \"skoid\": // Signed object ID\n          this.tryAppendQueryParameter(queries, param, this.signedOid);\n          break;\n        case \"sktid\": // Signed tenant ID\n          this.tryAppendQueryParameter(queries, param, this.signedTenantId);\n          break;\n        case \"skt\": // Signed key start time\n          this.tryAppendQueryParameter(\n            queries,\n            param,\n            this.signedStartsOn ? truncatedISO8061Date(this.signedStartsOn, false) : undefined\n          );\n          break;\n        case \"ske\": // Signed key expiry time\n          this.tryAppendQueryParameter(\n            queries,\n            param,\n            this.signedExpiresOn ? truncatedISO8061Date(this.signedExpiresOn, false) : undefined\n          );\n          break;\n        case \"sks\": // Signed key service\n          this.tryAppendQueryParameter(queries, param, this.signedService);\n          break;\n        case \"skv\": // Signed key version\n          this.tryAppendQueryParameter(queries, param, this.signedVersion);\n          break;\n        case \"sp\":\n          this.tryAppendQueryParameter(queries, param, this.permissions);\n          break;\n        case \"sig\":\n          this.tryAppendQueryParameter(queries, param, this.signature);\n          break;\n        case \"saoid\":\n          this.tryAppendQueryParameter(queries, param, this.preauthorizedAgentObjectId);\n          break;\n        case \"scid\":\n          this.tryAppendQueryParameter(queries, param, this.correlationId);\n          break;\n        case \"tn\":\n          this.tryAppendQueryParameter(queries, param, this.tableName);\n          break;\n      }\n    }\n    return queries.join(\"&\");\n  }\n\n  /**\n   * A private helper method used to filter and append query key/value pairs into an array.\n   *\n   * @param queries -\n   * @param key -\n   * @param value -\n   */\n  private tryAppendQueryParameter(queries: string[], key: string, value?: string): void {\n    if (!value) {\n      return;\n    }\n\n    key = encodeURIComponent(key);\n    value = encodeURIComponent(value);\n    if (key.length > 0 && value.length > 0) {\n      queries.push(`${key}=${value}`);\n    }\n  }\n}\n\n/**\n * Options to construct {@link SasQueryParameters}.\n */\nexport interface SasQueryParametersOptions {\n  /**\n   * Optional only when identifier is provided.\n   * Please refer to {@link AccountSasPermissions}, or {@link TableSasPermissions} for\n   * more details.\n   */\n  permissions?: string;\n  /**\n   * Optional. Table name to generate the SAS for\n   */\n  tableName?: string;\n  /**\n   * Optional. The storage services being accessed (only for Account SAS). Please refer to {@link AccountSasServices}\n   * for more details.\n   */\n  services?: string;\n  /**\n   * Optional. The storage resource types being accessed (only for Account SAS). Please refer to\n   * {@link AccountSasResourceTypes} for more details.\n   */\n  resourceTypes?: string;\n  /**\n   * Optional. The allowed HTTP protocol(s).\n   */\n  protocol?: SasProtocol;\n  /**\n   * Optional. The start time for this SAS token.\n   */\n  startsOn?: Date;\n  /**\n   * Optional only when identifier is provided. The expiry time for this SAS token.\n   */\n  expiresOn?: Date;\n  /**\n   * Optional. IP ranges allowed in this SAS.\n   */\n  ipRange?: SasIPRange;\n  /**\n   * Optional. The signed identifier for access policy\n   *\n   * @see https://docs.microsoft.com/rest/api/storageservices/establishing-a-stored-access-policy\n   */\n  identifier?: string;\n  /**\n   * Optional. Specifies which resources are accessible via the SAS (only for {@link AccountSasSignatureValues}).\n   * @see https://docs.microsoft.com/rest/api/storageservices/create-service-sas#specifying-the-signed-resource-blob-service-only\n   */\n  resource?: string;\n  /**\n   * User delegation key properties.\n   */\n  userDelegationKey?: UserDelegationKey;\n  /**\n   * Authorized AAD Object ID in GUID format. The AAD Object ID of a user authorized by the owner of the User Delegation Key\n   * to perform the action granted by the SAS. The Azure Table service will ensure that the owner of the user delegation key\n   * has the required permissions before granting access but no additional permission check for the user specified in\n   * this value will be performed. This cannot be used in conjuction with {@link signedUnauthorizedUserObjectId}.\n   * This is only used for User Delegation SAS.\n   */\n  preauthorizedAgentObjectId?: string;\n  /**\n   * A GUID value that will be logged in the storage diagnostic logs and can be used to correlate SAS generation with storage resource access.\n   * This is only used for User Delegation SAS.\n   */\n  correlationId?: string;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Creates an {@link accountSasResourceTypesFromString} from the specified resource types string. This method will throw an\n * Error if it encounters a character that does not correspond to a valid resource type.\n *\n * @param resourceTypes -\n */\nexport function accountSasResourceTypesFromString(resourceTypes: string): AccountSasResourceTypes {\n  const accountSasResourceTypes: AccountSasResourceTypes = {};\n\n  for (const c of resourceTypes) {\n    switch (c) {\n      case \"s\":\n        accountSasResourceTypes.service = true;\n        break;\n      case \"c\":\n        accountSasResourceTypes.container = true;\n        break;\n      case \"o\":\n        accountSasResourceTypes.object = true;\n        break;\n      default:\n        throw new RangeError(`Invalid resource type: ${c}`);\n    }\n  }\n\n  return accountSasResourceTypes;\n}\n\n/**\n * Converts the given resource types to a string.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n *\n */\nexport function accountSasResourceTypesToString(resourceTypes: AccountSasResourceTypes): string {\n  const resourceTypesString: string[] = [];\n  if (resourceTypes.service) {\n    resourceTypesString.push(\"s\");\n  }\n  if (resourceTypes.container) {\n    resourceTypesString.push(\"c\");\n  }\n  if (resourceTypes.object) {\n    resourceTypesString.push(\"o\");\n  }\n  return resourceTypesString.join(\"\");\n}\n\n/**\n * Represents the Resources that are accessible by the SAS token\n */\nexport interface AccountSasResourceTypes {\n  /**\n   * Permission to access service level APIs granted.\n   */\n  service?: boolean;\n\n  /**\n   * Permission to access container level APIs (Blob Containers, Tables, Queues, File Shares) granted.\n   */\n  container?: boolean;\n\n  /**\n   * Permission to access object level APIs (Blobs, Table Entities, Queue Messages, Files) granted.\n   */\n  object?: boolean;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport const SERVICE_VERSION = \"2019-02-02\";\nexport const TRANSACTION_HTTP_VERSION_1_1 = \"HTTP/1.1\";\nexport const TRANSACTION_HTTP_LINE_ENDING = \"\\r\\n\";\n\nexport const STORAGE_SCOPE = \"https://storage.azure.com/.default\";\n\nexport const HeaderConstants = {\n  AUTHORIZATION: \"authorization\",\n  CONTENT_LENGTH: \"content-length\",\n  CONTENT_MD5: \"content-md5\",\n  CONTENT_TYPE: \"content-type\",\n  CONTENT_TRANSFER_ENCODING: \"content-transfer-encoding\",\n  DATE: \"date\",\n  X_MS_DATE: \"x-ms-date\",\n  X_MS_VERSION: \"x-ms-version\",\n};\n\nexport const TablesLoggingAllowedHeaderNames = [\n  \"Access-Control-Allow-Origin\",\n  \"Cache-Control\",\n  \"Content-Length\",\n  \"Content-Type\",\n  \"Date\",\n  \"Prefer\",\n  \"Preference-Applied\",\n  \"Request-Id\",\n  \"traceparent\",\n  \"Transfer-Encoding\",\n  \"User-Agent\",\n  \"x-ms-client-request-id\",\n  \"x-ms-user-agent\",\n  \"x-ms-date\",\n  \"x-ms-error-code\",\n  \"x-ms-request-id\",\n  \"x-ms-return-client-request-id\",\n  \"x-ms-version\",\n  \"Accept-Ranges\",\n  \"Accept\",\n  \"Content-Disposition\",\n  \"Content-Encoding\",\n  \"Content-Language\",\n  \"Content-MD5\",\n  \"Content-Range\",\n  \"ETag\",\n  \"Last-Modified\",\n  \"Server\",\n  \"Vary\",\n  \"x-ms-content-crc64\",\n  \"x-ms-copy-action\",\n  \"x-ms-copy-completion-time\",\n  \"x-ms-copy-id\",\n  \"x-ms-copy-progress\",\n  \"x-ms-copy-status\",\n  \"x-ms-continuation-NextTableName\",\n  \"x-ms-continuation-NextPartitionKey\",\n  \"x-ms-continuation-NextRowKey\",\n  \"x-ms-has-immutability-policy\",\n  \"x-ms-has-legal-hold\",\n  \"x-ms-lease-state\",\n  \"x-ms-lease-status\",\n  \"x-ms-range\",\n  \"x-ms-request-server-encrypted\",\n  \"x-ms-server-encrypted\",\n  \"x-ms-snapshot\",\n  \"x-ms-source-range\",\n  \"If-Match\",\n  \"If-Modified-Since\",\n  \"If-None-Match\",\n  \"If-Unmodified-Since\",\n  \"x-ms-access-tier\",\n  \"x-ms-access-tier-change-time\",\n  \"x-ms-access-tier-inferred\",\n  \"x-ms-account-kind\",\n  \"x-ms-archive-status\",\n  \"x-ms-copy-destination-snapshot\",\n  \"x-ms-creation-time\",\n  \"x-ms-default-encryption-scope\",\n  \"x-ms-delete-type-permanent\",\n  \"x-ms-deny-encryption-scope-override\",\n  \"x-ms-encryption-algorithm\",\n  \"x-ms-incremental-copy\",\n  \"x-ms-lease-action\",\n  \"x-ms-lease-break-period\",\n  \"x-ms-lease-duration\",\n  \"x-ms-lease-id\",\n  \"x-ms-lease-time\",\n  \"x-ms-page-write\",\n  \"x-ms-proposed-lease-id\",\n  \"x-ms-range-get-content-md5\",\n  \"x-ms-rehydrate-priority\",\n  \"x-ms-sequence-number-action\",\n  \"x-ms-sku-name\",\n  \"x-ms-source-content-md5\",\n  \"x-ms-source-if-match\",\n  \"x-ms-source-if-modified-since\",\n  \"x-ms-source-if-none-match\",\n  \"x-ms-source-if-unmodified-since\",\n  \"x-ms-tag-count\",\n  \"x-ms-encryption-key-sha256\",\n];\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createHmac } from \"crypto\";\n\nexport function computeHMACSHA256(stringToSign: string, accountKey: string): string {\n  const key = Buffer.from(accountKey, \"base64\");\n  return createHmac(\"sha256\", key).update(stringToSign, \"utf8\").digest(\"base64\");\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccountSasPermissions, accountSasPermissionsToString } from \"./accountSasPermissions\";\nimport { SasIPRange, ipRangeToString } from \"./sasIPRange\";\nimport { SasProtocol, SasQueryParameters } from \"./sasQueryParameters\";\nimport {\n  accountSasResourceTypesFromString,\n  accountSasResourceTypesToString,\n} from \"./accountSasResourceTypes\";\nimport { accountSasServicesFromString, accountSasServicesToString } from \"./accountSasServices\";\nimport { NamedKeyCredential } from \"@azure/core-auth\";\nimport { SERVICE_VERSION } from \"../utils/constants\";\nimport { computeHMACSHA256 } from \"../utils/computeHMACSHA256\";\nimport { truncatedISO8061Date } from \"../utils/truncateISO8061Date\";\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * AccountSASSignatureValues is used to generate a Shared Access Signature (SAS) for an Azure Storage account. Once\n * all the values here are set appropriately, call {@link generateAccountSasQueryParameters} to obtain a representation\n * of the SAS which can actually be applied to table urls. Note: that both this class and {@link SasQueryParameters}\n * exist because the former is mutable and a logical representation while the latter is immutable and used to generate\n * actual REST requests.\n *\n * @see https://docs.microsoft.com/azure/storage/common/storage-dotnet-shared-access-signature-part-1\n * for more conceptual information on SAS\n *\n * @see https://docs.microsoft.com/rest/api/storageservices/constructing-an-account-sas\n * for descriptions of the parameters, including which are required\n */\nexport interface AccountSasSignatureValues {\n  /**\n   * If not provided, this defaults to the service version targeted by this version of the library.\n   */\n  version?: string;\n\n  /**\n   * Optional. SAS protocols allowed.\n   */\n  protocol?: SasProtocol;\n\n  /**\n   * Optional. When the SAS will take effect.\n   */\n  startsOn?: Date;\n\n  /**\n   * The time after which the SAS will no longer work.\n   */\n  expiresOn: Date;\n\n  /**\n   * Specifies which operations the SAS user may perform. Please refer to {@link AccountSasPermissions} for help\n   * constructing the permissions string.\n   */\n  permissions: AccountSasPermissions;\n\n  /**\n   * Optional. IP range allowed.\n   */\n  ipRange?: SasIPRange;\n\n  /**\n   * The values that indicate the services accessible with this SAS. Please refer to {@link AccountSasServices} to\n   * construct this value.\n   */\n  services: string;\n\n  /**\n   * The values that indicate the resource types accessible with this SAS. Please refer\n   * to {@link AccountSasResourceTypes} to construct this value.\n   */\n  resourceTypes: string;\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Generates a {@link SasQueryParameters} object which contains all SAS query parameters needed to make an actual\n * REST request.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n *\n * @param accountSasSignatureValues -\n * @param sharedKeyCredential -\n */\nexport function generateAccountSasQueryParameters(\n  accountSasSignatureValues: AccountSasSignatureValues,\n  credential: NamedKeyCredential\n): SasQueryParameters {\n  const version = accountSasSignatureValues.version\n    ? accountSasSignatureValues.version\n    : SERVICE_VERSION;\n\n  const parsedPermissions = accountSasPermissionsToString(accountSasSignatureValues.permissions);\n  const parsedServices = accountSasServicesToString(\n    accountSasServicesFromString(accountSasSignatureValues.services)\n  );\n  // to and from string to guarantee the correct order of resoruce types is generated\n  const parsedResourceTypes = accountSasResourceTypesToString(\n    accountSasResourceTypesFromString(accountSasSignatureValues.resourceTypes)\n  );\n\n  const stringToSign = [\n    credential.name,\n    parsedPermissions,\n    parsedServices,\n    parsedResourceTypes,\n    accountSasSignatureValues.startsOn\n      ? truncatedISO8061Date(accountSasSignatureValues.startsOn, false)\n      : \"\",\n    truncatedISO8061Date(accountSasSignatureValues.expiresOn, false),\n    accountSasSignatureValues.ipRange ? ipRangeToString(accountSasSignatureValues.ipRange) : \"\",\n    accountSasSignatureValues.protocol ? accountSasSignatureValues.protocol : \"\",\n    version,\n    \"\", // Account SAS requires an additional newline character\n  ].join(\"\\n\");\n\n  const signature: string = computeHMACSHA256(stringToSign, credential.key);\n\n  return new SasQueryParameters(version, signature, {\n    permissions: parsedPermissions.toString(),\n    services: parsedServices,\n    resourceTypes: parsedResourceTypes,\n    protocol: accountSasSignatureValues.protocol,\n    startsOn: accountSasSignatureValues.startsOn,\n    expiresOn: accountSasSignatureValues.expiresOn,\n    ipRange: accountSasSignatureValues.ipRange,\n  });\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccountSasPermissions, accountSasPermissionsFromString } from \"./accountSasPermissions\";\nimport {\n  AccountSasServices,\n  accountSasServicesFromString,\n  accountSasServicesToString,\n} from \"./accountSasServices\";\nimport { NamedKeyCredential, isNamedKeyCredential } from \"@azure/core-auth\";\nimport { SasIPRange } from \"./sasIPRange\";\nimport { SasProtocol } from \"./sasQueryParameters\";\nimport { generateAccountSasQueryParameters } from \"./accountSasSignatureValues\";\n\n/**\n * Generates a Table Account Shared Access Signature (SAS) URI based on the client properties\n * and parameters passed in. The SAS is signed by the shared key credential of the client.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-account-sas\n *\n * @param options - Optional parameters.\n * @returns An account SAS token\n */\nexport function generateAccountSas(\n  credential: NamedKeyCredential,\n  options: AccountSasOptions = {}\n): string {\n  const {\n    expiresOn,\n    permissions = accountSasPermissionsFromString(\"rl\"),\n    resourceTypes = \"sco\",\n    services = accountSasServicesFromString(\"t\"),\n    ...rest\n  } = options;\n  if (!isNamedKeyCredential(credential)) {\n    throw RangeError(\n      \"Can only generate the account SAS when the client is initialized with a shared key credential\"\n    );\n  }\n\n  let expiry = expiresOn;\n\n  if (expiry === undefined) {\n    const now = new Date();\n    expiry = new Date(now.getTime() + 3600 * 1000);\n  }\n\n  const sas = generateAccountSasQueryParameters(\n    {\n      permissions,\n      expiresOn: expiry,\n      resourceTypes,\n      services: accountSasServicesToString(services),\n      ...rest,\n    },\n    credential\n  ).toString();\n\n  return sas;\n}\n\n/**\n * Options to configure {@link generateAccountSas} operation.\n */\nexport interface AccountSasOptions {\n  /**\n   * The time at which the shared access signature becomes invalid. Default to an hour later if not provided.\n   */\n  expiresOn?: Date;\n  /**\n   * Specifies the list of permissions to be associated with the SAS.\n   */\n  permissions?: AccountSasPermissions;\n  /**\n   * Specifies the resource types associated with the shared access signature.\n   */\n  resourceTypes?: string;\n  /**\n   * The version of the service this SAS will target. If not specified, it will default to the version targeted by the\n   * library.\n   */\n  version?: string;\n\n  /**\n   * SAS protocols allowed.\n   */\n  protocol?: SasProtocol;\n\n  /**\n   * When the SAS will take effect.\n   */\n  startsOn?: Date;\n  /**\n   * IP range allowed.\n   */\n  ipRange?: SasIPRange;\n  /**\n   * Account services\n   */\n  services?: AccountSasServices;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Creates a {@link TableSasPermissions} from the specified permissions string. This method will throw an\n * Error if it encounters a character that does not correspond to a valid permission.\n *\n * @param permissions -\n */\nexport function tableSasPermissionsFromString(permissions: string): TableSasPermissions {\n  const tableSasPermissions: TableSasPermissions = {};\n  for (const char of permissions) {\n    switch (char) {\n      case \"r\":\n        tableSasPermissions.query = true;\n        break;\n      case \"a\":\n        tableSasPermissions.add = true;\n        break;\n      case \"u\":\n        tableSasPermissions.update = true;\n        break;\n      case \"d\":\n        tableSasPermissions.delete = true;\n        break;\n      default:\n        throw new RangeError(`Invalid permission: ${char}`);\n    }\n  }\n\n  return tableSasPermissions;\n}\n\n/**\n * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n * order accepted by the service.\n *\n * @returns A string which represents the TableSasPermissions\n */\nexport function tableSasPermissionsToString(permissions?: TableSasPermissions): string {\n  if (!permissions) {\n    return \"\";\n  }\n\n  const permissionsString: string[] = [];\n  if (permissions.query) {\n    permissionsString.push(\"r\");\n  }\n  if (permissions.add) {\n    permissionsString.push(\"a\");\n  }\n  if (permissions.update) {\n    permissionsString.push(\"u\");\n  }\n\n  if (permissions.delete) {\n    permissionsString.push(\"d\");\n  }\n  return permissionsString.join(\"\");\n}\n\n/**\n * A type that looks like a Table SAS permission.\n * Used in {@link TableSasPermissions} to parse SAS permissions from raw objects.\n */\nexport interface TableSasPermissions {\n  /**\n   * Specifies Query access granted.\n   */\n  query?: boolean;\n\n  /**\n   * Specifies Add access granted.\n   */\n  add?: boolean;\n\n  /**\n   * Specifies Update access granted.\n   */\n  update?: boolean;\n\n  /**\n   * Specifies Delete access granted.\n   */\n  delete?: boolean;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * TableSASSignatureValues is used to help generating SAS tokens for tables.\n */\n\nimport { SasIPRange, ipRangeToString } from \"./sasIPRange\";\nimport { SasProtocol, SasQueryParameters } from \"./sasQueryParameters\";\nimport { TableSasPermissions, tableSasPermissionsToString } from \"./tableSasPermisions\";\nimport { NamedKeyCredential } from \"@azure/core-auth\";\nimport { SERVICE_VERSION } from \"../utils/constants\";\nimport { computeHMACSHA256 } from \"../utils/computeHMACSHA256\";\nimport { truncatedISO8061Date } from \"../utils/truncateISO8061Date\";\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * TableSASSignatureValues is used to help generating Table service SAS tokens for tables\n */\nexport interface TableSasSignatureValues {\n  /**\n   * The version of the service this SAS will target. If not specified, it will default to the version targeted by the\n   * library.\n   */\n  version?: string;\n\n  /**\n   * Optional. SAS protocols, HTTPS only or HTTPSandHTTP\n   */\n  protocol?: SasProtocol;\n\n  /**\n   * Optional. When the SAS will take effect.\n   */\n  startsOn?: Date;\n\n  /**\n   * Optional. If identifier is not provided has a default value of one hour from the time the token is generated.\n   * The time after which the SAS will no longer work.\n   */\n  expiresOn?: Date;\n\n  /**\n   * Optional. If identifier is not provided has a default value of \"read\"\n   * Please refer to {@link TableSasPermissions} depending on the resource\n   * being accessed for help constructing the permissions string.\n   */\n  permissions?: TableSasPermissions;\n  /**\n   * Optional. IP ranges allowed in this SAS.\n   */\n  ipRange?: SasIPRange;\n\n  /**\n   * Optional. The name of the access policy on the container this SAS references if any.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/establishing-a-stored-access-policy\n   */\n  identifier?: string;\n\n  /**\n   * Define the start of a Partition Key range\n   * Table queries will only return results that are within the range, and attempts to use the shared access signature to add, update, or delete entities outside this range will fail.\n   * If startPartitionKey equals endPartitionKey the shared access signature only authorizes access to entities in one partition in the table.\n   * If startPartitionKey equals endPartitionKey and startRowKey equals endRowKey, the shared access signature can only access one entity in one partition\n   */\n  startPartitionKey?: string;\n  /**\n   * Define the end of a Partition Key range\n   * Table queries will only return results that are within the range, and attempts to use the shared access signature to add, update, or delete entities outside this range will fail.\n   * If startPartitionKey equals endPartitionKey the shared access signature only authorizes access to entities in one partition in the table.\n   * If startPartitionKey equals endPartitionKey and startRowKey equals endRowKey, the shared access signature can only access one entity in one partition\n   */\n  endPartitionKey?: string;\n  /**\n   * Define the start of a Row Key range\n   * Table queries will only return results that are within the range, and attempts to use the shared access signature to add, update, or delete entities outside this range will fail.\n   * If startPartitionKey equals endPartitionKey the shared access signature only authorizes access to entities in one partition in the table.\n   * If startPartitionKey equals endPartitionKey and startRowKey equals endRowKey, the shared access signature can only access one entity in one partition\n   */\n  startRowKey?: string;\n  /**\n   * Define the end of a Row Key range\n   * Table queries will only return results that are within the range, and attempts to use the shared access signature to add, update, or delete entities outside this range will fail.\n   * If startPartitionKey equals endPartitionKey the shared access signature only authorizes access to entities in one partition in the table.\n   * If startPartitionKey equals endPartitionKey and startRowKey equals endRowKey, the shared access signature can only access one entity in one partition\n   */\n  endRowKey?: string;\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Creates an instance of SASQueryParameters.\n *\n * **Note**: When identifier is not provided, permissions has a default value of \"read\" and expiresOn of one hour from the time the token is generated.\n */\nexport function generateTableSasQueryParameters(\n  tableName: string,\n  credential: NamedKeyCredential,\n  tableSasSignatureValues: TableSasSignatureValues\n): SasQueryParameters {\n  const version = tableSasSignatureValues.version ?? SERVICE_VERSION;\n\n  if (credential === undefined) {\n    throw TypeError(\"Invalid NamedKeyCredential\");\n  }\n\n  if (!tableName) {\n    throw new Error(\"Must provide a 'tableName'\");\n  }\n\n  const signedPermissions = tableSasPermissionsToString(tableSasSignatureValues.permissions);\n  const signedStart = tableSasSignatureValues.startsOn\n    ? truncatedISO8061Date(tableSasSignatureValues.startsOn, false /** withMilliseconds */)\n    : \"\";\n  const signedExpiry = tableSasSignatureValues.expiresOn\n    ? truncatedISO8061Date(tableSasSignatureValues.expiresOn, false /** withMilliseconds */)\n    : \"\";\n  const canonicalizedResource = getCanonicalName(credential.name, tableName);\n  const signedIdentifier = tableSasSignatureValues.identifier ?? \"\";\n  const signedIP = ipRangeToString(tableSasSignatureValues.ipRange);\n  const signedProtocol = tableSasSignatureValues.protocol || \"\";\n  const startingPartitionKey = tableSasSignatureValues.startPartitionKey ?? \"\";\n  const startingRowKey = tableSasSignatureValues.startRowKey ?? \"\";\n  const endingPartitionKey = tableSasSignatureValues.endPartitionKey ?? \"\";\n  const endingRowKey = tableSasSignatureValues.endRowKey ?? \"\";\n\n  const stringToSign = [\n    signedPermissions,\n    signedStart,\n    signedExpiry,\n    canonicalizedResource,\n    signedIdentifier,\n    signedIP,\n    signedProtocol,\n    version,\n    startingPartitionKey,\n    startingRowKey,\n    endingPartitionKey,\n    endingRowKey,\n  ].join(\"\\n\");\n\n  const signature = computeHMACSHA256(stringToSign, credential.key);\n\n  return new SasQueryParameters(version, signature, {\n    permissions: signedPermissions,\n    protocol: tableSasSignatureValues.protocol,\n    startsOn: tableSasSignatureValues.startsOn,\n    expiresOn: tableSasSignatureValues.expiresOn,\n    ipRange: tableSasSignatureValues.ipRange,\n    identifier: tableSasSignatureValues.identifier,\n    tableName,\n  });\n}\n\nfunction getCanonicalName(accountName: string, tableName: string): string {\n  // Sample CanonicalName for URL = https://myaccount.table.core.windows.net/Employees(PartitionKey='Jeff',RowKey='Price'):\n  //   canonicalizedResource = \"/table/myaccount/employees\"\n  return `/table/${accountName}/${tableName.toLowerCase()}`;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { NamedKeyCredential, isNamedKeyCredential } from \"@azure/core-auth\";\nimport {\n  TableSasSignatureValues,\n  generateTableSasQueryParameters,\n} from \"./tableSasSignatureValues\";\nimport { tableSasPermissionsFromString } from \"./tableSasPermisions\";\n\n/**\n * Generates a Table Service Shared Access Signature (SAS) URI based on the client properties\n * and parameters passed in. The SAS is signed by the shared key credential of the client.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n *\n * @param options - Optional parameters.\n * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n */\nexport function generateTableSas(\n  tableName: string,\n  credential: NamedKeyCredential,\n  options: TableSasSignatureValues = {}\n): string {\n  let { expiresOn, permissions } = options;\n\n  if (!isNamedKeyCredential(credential)) {\n    throw RangeError(\n      \"Can only generate the account SAS when the client is initialized with a shared key credential\"\n    );\n  }\n\n  // expiresOn and permissions are optional if an identifier is provided\n  // set defaults when no identifier and no values were provided\n  if (!options.identifier) {\n    if (!permissions) {\n      permissions = tableSasPermissionsFromString(\"r\");\n    }\n\n    if (expiresOn === undefined) {\n      const now = new Date();\n      expiresOn = new Date(now.getTime() + 3600 * 1000);\n    }\n  }\n\n  const sas = generateTableSasQueryParameters(tableName, credential, {\n    ...options,\n    expiresOn,\n    permissions,\n  }).toString();\n\n  return sas;\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\n\nexport const TableQueryResponse: coreClient.CompositeMapper = {\n  serializedName: \"TableQueryResponse\",\n  type: {\n    name: \"Composite\",\n    className: \"TableQueryResponse\",\n    modelProperties: {\n      odataMetadata: {\n        serializedName: \"odata\\\\.metadata\",\n        xmlName: \"odata\\\\.metadata\",\n        type: {\n          name: \"String\"\n        }\n      },\n      value: {\n        serializedName: \"value\",\n        xmlName: \"value\",\n        xmlElementName: \"TableResponseProperties\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TableResponseProperties\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const TableResponseProperties: coreClient.CompositeMapper = {\n  serializedName: \"TableResponseProperties\",\n  type: {\n    name: \"Composite\",\n    className: \"TableResponseProperties\",\n    modelProperties: {\n      name: {\n        serializedName: \"TableName\",\n        xmlName: \"TableName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      odataType: {\n        serializedName: \"odata\\\\.type\",\n        xmlName: \"odata\\\\.type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      odataId: {\n        serializedName: \"odata\\\\.id\",\n        xmlName: \"odata\\\\.id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      odataEditLink: {\n        serializedName: \"odata\\\\.editLink\",\n        xmlName: \"odata\\\\.editLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableServiceError: coreClient.CompositeMapper = {\n  serializedName: \"TableServiceError\",\n  type: {\n    name: \"Composite\",\n    className: \"TableServiceError\",\n    modelProperties: {\n      odataError: {\n        serializedName: \"odata\\\\.error\",\n        xmlName: \"odata\\\\.error\",\n        type: {\n          name: \"Composite\",\n          className: \"TableServiceErrorOdataError\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableServiceErrorOdataError: coreClient.CompositeMapper = {\n  serializedName: \"TableServiceErrorOdataError\",\n  type: {\n    name: \"Composite\",\n    className: \"TableServiceErrorOdataError\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        xmlName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        xmlName: \"message\",\n        type: {\n          name: \"Composite\",\n          className: \"TableServiceErrorOdataErrorMessage\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableServiceErrorOdataErrorMessage: coreClient.CompositeMapper = {\n  serializedName: \"TableServiceErrorOdataErrorMessage\",\n  type: {\n    name: \"Composite\",\n    className: \"TableServiceErrorOdataErrorMessage\",\n    modelProperties: {\n      lang: {\n        serializedName: \"lang\",\n        xmlName: \"lang\",\n        type: {\n          name: \"String\"\n        }\n      },\n      value: {\n        serializedName: \"value\",\n        xmlName: \"value\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableProperties: coreClient.CompositeMapper = {\n  serializedName: \"TableProperties\",\n  type: {\n    name: \"Composite\",\n    className: \"TableProperties\",\n    modelProperties: {\n      name: {\n        serializedName: \"TableName\",\n        xmlName: \"TableName\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableEntityQueryResponse: coreClient.CompositeMapper = {\n  serializedName: \"TableEntityQueryResponse\",\n  type: {\n    name: \"Composite\",\n    className: \"TableEntityQueryResponse\",\n    modelProperties: {\n      odataMetadata: {\n        serializedName: \"odata\\\\.metadata\",\n        xmlName: \"odata\\\\.metadata\",\n        type: {\n          name: \"String\"\n        }\n      },\n      value: {\n        serializedName: \"value\",\n        xmlName: \"value\",\n        xmlElementName: \"TableEntityProperties\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Dictionary\",\n              value: { type: { name: \"any\" } }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SignedIdentifier: coreClient.CompositeMapper = {\n  serializedName: \"SignedIdentifier\",\n  xmlName: \"SignedIdentifier\",\n  type: {\n    name: \"Composite\",\n    className: \"SignedIdentifier\",\n    modelProperties: {\n      id: {\n        serializedName: \"Id\",\n        required: true,\n        xmlName: \"Id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accessPolicy: {\n        serializedName: \"AccessPolicy\",\n        xmlName: \"AccessPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"AccessPolicy\"\n        }\n      }\n    }\n  }\n};\n\nexport const AccessPolicy: coreClient.CompositeMapper = {\n  serializedName: \"AccessPolicy\",\n  xmlName: \"AccessPolicy\",\n  type: {\n    name: \"Composite\",\n    className: \"AccessPolicy\",\n    modelProperties: {\n      start: {\n        serializedName: \"Start\",\n        xmlName: \"Start\",\n        type: {\n          name: \"String\"\n        }\n      },\n      expiry: {\n        serializedName: \"Expiry\",\n        xmlName: \"Expiry\",\n        type: {\n          name: \"String\"\n        }\n      },\n      permission: {\n        serializedName: \"Permission\",\n        xmlName: \"Permission\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableServiceProperties: coreClient.CompositeMapper = {\n  serializedName: \"TableServiceProperties\",\n  xmlName: \"StorageServiceProperties\",\n  type: {\n    name: \"Composite\",\n    className: \"TableServiceProperties\",\n    modelProperties: {\n      logging: {\n        serializedName: \"Logging\",\n        xmlName: \"Logging\",\n        type: {\n          name: \"Composite\",\n          className: \"Logging\"\n        }\n      },\n      hourMetrics: {\n        serializedName: \"HourMetrics\",\n        xmlName: \"HourMetrics\",\n        type: {\n          name: \"Composite\",\n          className: \"Metrics\"\n        }\n      },\n      minuteMetrics: {\n        serializedName: \"MinuteMetrics\",\n        xmlName: \"MinuteMetrics\",\n        type: {\n          name: \"Composite\",\n          className: \"Metrics\"\n        }\n      },\n      cors: {\n        serializedName: \"Cors\",\n        xmlName: \"Cors\",\n        xmlIsWrapped: true,\n        xmlElementName: \"CorsRule\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CorsRule\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Logging: coreClient.CompositeMapper = {\n  serializedName: \"Logging\",\n  xmlName: \"Logging\",\n  type: {\n    name: \"Composite\",\n    className: \"Logging\",\n    modelProperties: {\n      version: {\n        serializedName: \"Version\",\n        required: true,\n        xmlName: \"Version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      delete: {\n        serializedName: \"Delete\",\n        required: true,\n        xmlName: \"Delete\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      read: {\n        serializedName: \"Read\",\n        required: true,\n        xmlName: \"Read\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      write: {\n        serializedName: \"Write\",\n        required: true,\n        xmlName: \"Write\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      retentionPolicy: {\n        serializedName: \"RetentionPolicy\",\n        xmlName: \"RetentionPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"RetentionPolicy\"\n        }\n      }\n    }\n  }\n};\n\nexport const RetentionPolicy: coreClient.CompositeMapper = {\n  serializedName: \"RetentionPolicy\",\n  xmlName: \"RetentionPolicy\",\n  type: {\n    name: \"Composite\",\n    className: \"RetentionPolicy\",\n    modelProperties: {\n      enabled: {\n        serializedName: \"Enabled\",\n        required: true,\n        xmlName: \"Enabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      days: {\n        constraints: {\n          InclusiveMinimum: 1\n        },\n        serializedName: \"Days\",\n        xmlName: \"Days\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Metrics: coreClient.CompositeMapper = {\n  serializedName: \"Metrics\",\n  type: {\n    name: \"Composite\",\n    className: \"Metrics\",\n    modelProperties: {\n      version: {\n        serializedName: \"Version\",\n        xmlName: \"Version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      enabled: {\n        serializedName: \"Enabled\",\n        required: true,\n        xmlName: \"Enabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      includeAPIs: {\n        serializedName: \"IncludeAPIs\",\n        xmlName: \"IncludeAPIs\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      retentionPolicy: {\n        serializedName: \"RetentionPolicy\",\n        xmlName: \"RetentionPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"RetentionPolicy\"\n        }\n      }\n    }\n  }\n};\n\nexport const CorsRule: coreClient.CompositeMapper = {\n  serializedName: \"CorsRule\",\n  xmlName: \"CorsRule\",\n  type: {\n    name: \"Composite\",\n    className: \"CorsRule\",\n    modelProperties: {\n      allowedOrigins: {\n        serializedName: \"AllowedOrigins\",\n        required: true,\n        xmlName: \"AllowedOrigins\",\n        type: {\n          name: \"String\"\n        }\n      },\n      allowedMethods: {\n        serializedName: \"AllowedMethods\",\n        required: true,\n        xmlName: \"AllowedMethods\",\n        type: {\n          name: \"String\"\n        }\n      },\n      allowedHeaders: {\n        serializedName: \"AllowedHeaders\",\n        required: true,\n        xmlName: \"AllowedHeaders\",\n        type: {\n          name: \"String\"\n        }\n      },\n      exposedHeaders: {\n        serializedName: \"ExposedHeaders\",\n        required: true,\n        xmlName: \"ExposedHeaders\",\n        type: {\n          name: \"String\"\n        }\n      },\n      maxAgeInSeconds: {\n        constraints: {\n          InclusiveMinimum: 0\n        },\n        serializedName: \"MaxAgeInSeconds\",\n        required: true,\n        xmlName: \"MaxAgeInSeconds\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableServiceStats: coreClient.CompositeMapper = {\n  serializedName: \"TableServiceStats\",\n  xmlName: \"StorageServiceStats\",\n  type: {\n    name: \"Composite\",\n    className: \"TableServiceStats\",\n    modelProperties: {\n      geoReplication: {\n        serializedName: \"GeoReplication\",\n        xmlName: \"GeoReplication\",\n        type: {\n          name: \"Composite\",\n          className: \"GeoReplication\"\n        }\n      }\n    }\n  }\n};\n\nexport const GeoReplication: coreClient.CompositeMapper = {\n  serializedName: \"GeoReplication\",\n  xmlName: \"GeoReplication\",\n  type: {\n    name: \"Composite\",\n    className: \"GeoReplication\",\n    modelProperties: {\n      status: {\n        serializedName: \"Status\",\n        required: true,\n        xmlName: \"Status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastSyncTime: {\n        serializedName: \"LastSyncTime\",\n        required: true,\n        xmlName: \"LastSyncTime\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableResponse: coreClient.CompositeMapper = {\n  serializedName: \"TableResponse\",\n  type: {\n    name: \"Composite\",\n    className: \"TableResponse\",\n    modelProperties: {\n      ...TableResponseProperties.type.modelProperties,\n      odataMetadata: {\n        serializedName: \"odata\\\\.metadata\",\n        xmlName: \"odata\\\\.metadata\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableQueryHeaders: coreClient.CompositeMapper = {\n  serializedName: \"Table_queryHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"TableQueryHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      xMsContinuationNextTableName: {\n        serializedName: \"x-ms-continuation-nexttablename\",\n        xmlName: \"x-ms-continuation-nexttablename\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableQueryExceptionHeaders: coreClient.CompositeMapper = {\n  serializedName: \"Table_queryExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"TableQueryExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableCreateHeaders: coreClient.CompositeMapper = {\n  serializedName: \"Table_createHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"TableCreateHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      preferenceApplied: {\n        serializedName: \"preference-applied\",\n        xmlName: \"preference-applied\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableCreateExceptionHeaders: coreClient.CompositeMapper = {\n  serializedName: \"Table_createExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"TableCreateExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableDeleteHeaders: coreClient.CompositeMapper = {\n  serializedName: \"Table_deleteHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"TableDeleteHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableDeleteExceptionHeaders: coreClient.CompositeMapper = {\n  serializedName: \"Table_deleteExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"TableDeleteExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableQueryEntitiesHeaders: coreClient.CompositeMapper = {\n  serializedName: \"Table_queryEntitiesHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"TableQueryEntitiesHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      xMsContinuationNextPartitionKey: {\n        serializedName: \"x-ms-continuation-nextpartitionkey\",\n        xmlName: \"x-ms-continuation-nextpartitionkey\",\n        type: {\n          name: \"String\"\n        }\n      },\n      xMsContinuationNextRowKey: {\n        serializedName: \"x-ms-continuation-nextrowkey\",\n        xmlName: \"x-ms-continuation-nextrowkey\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableQueryEntitiesExceptionHeaders: coreClient.CompositeMapper = {\n  serializedName: \"Table_queryEntitiesExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"TableQueryEntitiesExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableQueryEntitiesWithPartitionAndRowKeyHeaders: coreClient.CompositeMapper = {\n  serializedName: \"Table_queryEntitiesWithPartitionAndRowKeyHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"TableQueryEntitiesWithPartitionAndRowKeyHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      xMsContinuationNextPartitionKey: {\n        serializedName: \"x-ms-continuation-nextpartitionkey\",\n        xmlName: \"x-ms-continuation-nextpartitionkey\",\n        type: {\n          name: \"String\"\n        }\n      },\n      xMsContinuationNextRowKey: {\n        serializedName: \"x-ms-continuation-nextrowkey\",\n        xmlName: \"x-ms-continuation-nextrowkey\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableQueryEntitiesWithPartitionAndRowKeyExceptionHeaders: coreClient.CompositeMapper = {\n  serializedName: \"Table_queryEntitiesWithPartitionAndRowKeyExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"TableQueryEntitiesWithPartitionAndRowKeyExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableUpdateEntityHeaders: coreClient.CompositeMapper = {\n  serializedName: \"Table_updateEntityHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"TableUpdateEntityHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableUpdateEntityExceptionHeaders: coreClient.CompositeMapper = {\n  serializedName: \"Table_updateEntityExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"TableUpdateEntityExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableMergeEntityHeaders: coreClient.CompositeMapper = {\n  serializedName: \"Table_mergeEntityHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"TableMergeEntityHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableMergeEntityExceptionHeaders: coreClient.CompositeMapper = {\n  serializedName: \"Table_mergeEntityExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"TableMergeEntityExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableDeleteEntityHeaders: coreClient.CompositeMapper = {\n  serializedName: \"Table_deleteEntityHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"TableDeleteEntityHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableDeleteEntityExceptionHeaders: coreClient.CompositeMapper = {\n  serializedName: \"Table_deleteEntityExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"TableDeleteEntityExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableInsertEntityHeaders: coreClient.CompositeMapper = {\n  serializedName: \"Table_insertEntityHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"TableInsertEntityHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      preferenceApplied: {\n        serializedName: \"preference-applied\",\n        xmlName: \"preference-applied\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentType: {\n        serializedName: \"content-type\",\n        xmlName: \"content-type\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableInsertEntityExceptionHeaders: coreClient.CompositeMapper = {\n  serializedName: \"Table_insertEntityExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"TableInsertEntityExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableGetAccessPolicyHeaders: coreClient.CompositeMapper = {\n  serializedName: \"Table_getAccessPolicyHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"TableGetAccessPolicyHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableGetAccessPolicyExceptionHeaders: coreClient.CompositeMapper = {\n  serializedName: \"Table_getAccessPolicyExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"TableGetAccessPolicyExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableSetAccessPolicyHeaders: coreClient.CompositeMapper = {\n  serializedName: \"Table_setAccessPolicyHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"TableSetAccessPolicyHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      }\n    }\n  }\n};\n\nexport const TableSetAccessPolicyExceptionHeaders: coreClient.CompositeMapper = {\n  serializedName: \"Table_setAccessPolicyExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"TableSetAccessPolicyExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceSetPropertiesHeaders: coreClient.CompositeMapper = {\n  serializedName: \"Service_setPropertiesHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceSetPropertiesHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceSetPropertiesExceptionHeaders: coreClient.CompositeMapper = {\n  serializedName: \"Service_setPropertiesExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceSetPropertiesExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceGetPropertiesHeaders: coreClient.CompositeMapper = {\n  serializedName: \"Service_getPropertiesHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceGetPropertiesHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceGetPropertiesExceptionHeaders: coreClient.CompositeMapper = {\n  serializedName: \"Service_getPropertiesExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceGetPropertiesExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceGetStatisticsHeaders: coreClient.CompositeMapper = {\n  serializedName: \"Service_getStatisticsHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceGetStatisticsHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceGetStatisticsExceptionHeaders: coreClient.CompositeMapper = {\n  serializedName: \"Service_getStatisticsExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceGetStatisticsExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter\n} from \"@azure/core-client\";\nimport {\n  TableProperties as TablePropertiesMapper,\n  TableServiceProperties as TableServicePropertiesMapper\n} from \"../models/mappers\";\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json;odata=minimalmetadata\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const url: OperationURLParameter = {\n  parameterPath: \"url\",\n  mapper: {\n    serializedName: \"url\",\n    required: true,\n    xmlName: \"url\",\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const version: OperationParameter = {\n  parameterPath: \"version\",\n  mapper: {\n    defaultValue: \"2019-02-02\",\n    isConstant: true,\n    serializedName: \"x-ms-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const requestId: OperationParameter = {\n  parameterPath: [\"options\", \"requestId\"],\n  mapper: {\n    serializedName: \"x-ms-client-request-id\",\n    xmlName: \"x-ms-client-request-id\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const dataServiceVersion: OperationParameter = {\n  parameterPath: \"dataServiceVersion\",\n  mapper: {\n    defaultValue: \"3.0\",\n    isConstant: true,\n    serializedName: \"DataServiceVersion\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const format: OperationQueryParameter = {\n  parameterPath: [\"options\", \"queryOptions\", \"format\"],\n  mapper: {\n    serializedName: \"$format\",\n    xmlName: \"$format\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const top: OperationQueryParameter = {\n  parameterPath: [\"options\", \"queryOptions\", \"top\"],\n  mapper: {\n    constraints: {\n      InclusiveMinimum: 0\n    },\n    serializedName: \"$top\",\n    xmlName: \"$top\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const select: OperationQueryParameter = {\n  parameterPath: [\"options\", \"queryOptions\", \"select\"],\n  mapper: {\n    serializedName: \"$select\",\n    xmlName: \"$select\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const filter: OperationQueryParameter = {\n  parameterPath: [\"options\", \"queryOptions\", \"filter\"],\n  mapper: {\n    serializedName: \"$filter\",\n    xmlName: \"$filter\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const nextTableName: OperationQueryParameter = {\n  parameterPath: [\"options\", \"nextTableName\"],\n  mapper: {\n    serializedName: \"NextTableName\",\n    xmlName: \"NextTableName\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json;odata=nometadata\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const tableProperties: OperationParameter = {\n  parameterPath: \"tableProperties\",\n  mapper: TablePropertiesMapper\n};\n\nexport const responsePreference: OperationParameter = {\n  parameterPath: [\"options\", \"responsePreference\"],\n  mapper: {\n    serializedName: \"Prefer\",\n    xmlName: \"Prefer\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const accept1: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const table: OperationURLParameter = {\n  parameterPath: \"table\",\n  mapper: {\n    serializedName: \"table\",\n    required: true,\n    xmlName: \"table\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const timeout: OperationQueryParameter = {\n  parameterPath: [\"options\", \"timeout\"],\n  mapper: {\n    constraints: {\n      InclusiveMinimum: 0\n    },\n    serializedName: \"timeout\",\n    xmlName: \"timeout\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const nextPartitionKey: OperationQueryParameter = {\n  parameterPath: [\"options\", \"nextPartitionKey\"],\n  mapper: {\n    serializedName: \"NextPartitionKey\",\n    xmlName: \"NextPartitionKey\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const nextRowKey: OperationQueryParameter = {\n  parameterPath: [\"options\", \"nextRowKey\"],\n  mapper: {\n    serializedName: \"NextRowKey\",\n    xmlName: \"NextRowKey\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const partitionKey: OperationURLParameter = {\n  parameterPath: \"partitionKey\",\n  mapper: {\n    serializedName: \"partitionKey\",\n    required: true,\n    xmlName: \"partitionKey\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const rowKey: OperationURLParameter = {\n  parameterPath: \"rowKey\",\n  mapper: {\n    serializedName: \"rowKey\",\n    required: true,\n    xmlName: \"rowKey\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const contentType1: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const tableEntityProperties: OperationParameter = {\n  parameterPath: [\"options\", \"tableEntityProperties\"],\n  mapper: {\n    serializedName: \"tableEntityProperties\",\n    xmlName: \"tableEntityProperties\",\n    type: {\n      name: \"Dictionary\",\n      value: { type: { name: \"any\" } }\n    }\n  }\n};\n\nexport const ifMatch: OperationParameter = {\n  parameterPath: [\"options\", \"ifMatch\"],\n  mapper: {\n    serializedName: \"If-Match\",\n    xmlName: \"If-Match\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const ifMatch1: OperationParameter = {\n  parameterPath: \"ifMatch\",\n  mapper: {\n    serializedName: \"If-Match\",\n    required: true,\n    xmlName: \"If-Match\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const accept2: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/xml\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const comp: OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    defaultValue: \"acl\",\n    isConstant: true,\n    serializedName: \"comp\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const contentType2: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/xml\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const tableAcl: OperationParameter = {\n  parameterPath: [\"options\", \"tableAcl\"],\n  mapper: {\n    serializedName: \"tableAcl\",\n    xmlName: \"SignedIdentifiers\",\n    xmlIsWrapped: true,\n    xmlElementName: \"SignedIdentifier\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"Composite\",\n          className: \"SignedIdentifier\"\n        }\n      }\n    }\n  }\n};\n\nexport const accept3: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/xml\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const tableServiceProperties: OperationParameter = {\n  parameterPath: \"tableServiceProperties\",\n  mapper: TableServicePropertiesMapper\n};\n\nexport const restype: OperationQueryParameter = {\n  parameterPath: \"restype\",\n  mapper: {\n    defaultValue: \"service\",\n    isConstant: true,\n    serializedName: \"restype\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const comp1: OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    defaultValue: \"properties\",\n    isConstant: true,\n    serializedName: \"comp\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const comp2: OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    defaultValue: \"stats\",\n    isConstant: true,\n    serializedName: \"comp\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { Table } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { GeneratedClientContext } from \"../generatedClientContext\";\nimport {\n  TableQueryOptionalParams,\n  TableQueryOperationResponse,\n  TableProperties,\n  TableCreateOptionalParams,\n  TableCreateResponse,\n  TableDeleteOptionalParams,\n  TableDeleteResponse,\n  TableQueryEntitiesOptionalParams,\n  TableQueryEntitiesResponse,\n  TableQueryEntitiesWithPartitionAndRowKeyOptionalParams,\n  TableQueryEntitiesWithPartitionAndRowKeyResponse,\n  TableUpdateEntityOptionalParams,\n  TableUpdateEntityResponse,\n  TableMergeEntityOptionalParams,\n  TableMergeEntityResponse,\n  TableDeleteEntityOptionalParams,\n  TableDeleteEntityResponse,\n  TableInsertEntityOptionalParams,\n  TableInsertEntityResponse,\n  TableGetAccessPolicyOptionalParams,\n  TableGetAccessPolicyResponse,\n  TableSetAccessPolicyOptionalParams,\n  TableSetAccessPolicyResponse\n} from \"../models\";\n\n/** Class representing a Table. */\nexport class TableImpl implements Table {\n  private readonly client: GeneratedClientContext;\n\n  /**\n   * Initialize a new instance of the class Table class.\n   * @param client Reference to the service client\n   */\n  constructor(client: GeneratedClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Queries tables under the given account.\n   * @param options The options parameters.\n   */\n  query(\n    options?: TableQueryOptionalParams\n  ): Promise<TableQueryOperationResponse> {\n    return this.client.sendOperationRequest({ options }, queryOperationSpec);\n  }\n\n  /**\n   * Creates a new table under the given account.\n   * @param tableProperties The Table properties.\n   * @param options The options parameters.\n   */\n  create(\n    tableProperties: TableProperties,\n    options?: TableCreateOptionalParams\n  ): Promise<TableCreateResponse> {\n    return this.client.sendOperationRequest(\n      { tableProperties, options },\n      createOperationSpec\n    );\n  }\n\n  /**\n   * Operation permanently deletes the specified table.\n   * @param table The name of the table.\n   * @param options The options parameters.\n   */\n  delete(\n    table: string,\n    options?: TableDeleteOptionalParams\n  ): Promise<TableDeleteResponse> {\n    return this.client.sendOperationRequest(\n      { table, options },\n      deleteOperationSpec\n    );\n  }\n\n  /**\n   * Queries entities in a table.\n   * @param table The name of the table.\n   * @param options The options parameters.\n   */\n  queryEntities(\n    table: string,\n    options?: TableQueryEntitiesOptionalParams\n  ): Promise<TableQueryEntitiesResponse> {\n    return this.client.sendOperationRequest(\n      { table, options },\n      queryEntitiesOperationSpec\n    );\n  }\n\n  /**\n   * Queries entities in a table.\n   * @param table The name of the table.\n   * @param partitionKey The partition key of the entity.\n   * @param rowKey The row key of the entity.\n   * @param options The options parameters.\n   */\n  queryEntitiesWithPartitionAndRowKey(\n    table: string,\n    partitionKey: string,\n    rowKey: string,\n    options?: TableQueryEntitiesWithPartitionAndRowKeyOptionalParams\n  ): Promise<TableQueryEntitiesWithPartitionAndRowKeyResponse> {\n    return this.client.sendOperationRequest(\n      { table, partitionKey, rowKey, options },\n      queryEntitiesWithPartitionAndRowKeyOperationSpec\n    );\n  }\n\n  /**\n   * Update entity in a table.\n   * @param table The name of the table.\n   * @param partitionKey The partition key of the entity.\n   * @param rowKey The row key of the entity.\n   * @param options The options parameters.\n   */\n  updateEntity(\n    table: string,\n    partitionKey: string,\n    rowKey: string,\n    options?: TableUpdateEntityOptionalParams\n  ): Promise<TableUpdateEntityResponse> {\n    return this.client.sendOperationRequest(\n      { table, partitionKey, rowKey, options },\n      updateEntityOperationSpec\n    );\n  }\n\n  /**\n   * Merge entity in a table.\n   * @param table The name of the table.\n   * @param partitionKey The partition key of the entity.\n   * @param rowKey The row key of the entity.\n   * @param options The options parameters.\n   */\n  mergeEntity(\n    table: string,\n    partitionKey: string,\n    rowKey: string,\n    options?: TableMergeEntityOptionalParams\n  ): Promise<TableMergeEntityResponse> {\n    return this.client.sendOperationRequest(\n      { table, partitionKey, rowKey, options },\n      mergeEntityOperationSpec\n    );\n  }\n\n  /**\n   * Deletes the specified entity in a table.\n   * @param table The name of the table.\n   * @param partitionKey The partition key of the entity.\n   * @param rowKey The row key of the entity.\n   * @param ifMatch Match condition for an entity to be deleted. If specified and a matching entity is\n   *                not found, an error will be raised. To force an unconditional delete, set to the wildcard character\n   *                (*).\n   * @param options The options parameters.\n   */\n  deleteEntity(\n    table: string,\n    partitionKey: string,\n    rowKey: string,\n    ifMatch: string,\n    options?: TableDeleteEntityOptionalParams\n  ): Promise<TableDeleteEntityResponse> {\n    return this.client.sendOperationRequest(\n      { table, partitionKey, rowKey, ifMatch, options },\n      deleteEntityOperationSpec\n    );\n  }\n\n  /**\n   * Insert entity in a table.\n   * @param table The name of the table.\n   * @param options The options parameters.\n   */\n  insertEntity(\n    table: string,\n    options?: TableInsertEntityOptionalParams\n  ): Promise<TableInsertEntityResponse> {\n    return this.client.sendOperationRequest(\n      { table, options },\n      insertEntityOperationSpec\n    );\n  }\n\n  /**\n   * Retrieves details about any stored access policies specified on the table that may be used with\n   * Shared Access Signatures.\n   * @param table The name of the table.\n   * @param options The options parameters.\n   */\n  getAccessPolicy(\n    table: string,\n    options?: TableGetAccessPolicyOptionalParams\n  ): Promise<TableGetAccessPolicyResponse> {\n    return this.client.sendOperationRequest(\n      { table, options },\n      getAccessPolicyOperationSpec\n    );\n  }\n\n  /**\n   * Sets stored access policies for the table that may be used with Shared Access Signatures.\n   * @param table The name of the table.\n   * @param options The options parameters.\n   */\n  setAccessPolicy(\n    table: string,\n    options?: TableSetAccessPolicyOptionalParams\n  ): Promise<TableSetAccessPolicyResponse> {\n    return this.client.sendOperationRequest(\n      { table, options },\n      setAccessPolicyOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst xmlSerializer = coreClient.createSerializer(Mappers, /* isXml */ true);\n\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst queryOperationSpec: coreClient.OperationSpec = {\n  path: \"/Tables\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TableQueryResponse,\n      headersMapper: Mappers.TableQueryHeaders\n    },\n    default: {\n      bodyMapper: Mappers.TableServiceError,\n      headersMapper: Mappers.TableQueryExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.format,\n    Parameters.top,\n    Parameters.select,\n    Parameters.filter,\n    Parameters.nextTableName\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.dataServiceVersion\n  ],\n  serializer\n};\nconst createOperationSpec: coreClient.OperationSpec = {\n  path: \"/Tables\",\n  httpMethod: \"POST\",\n  responses: {\n    201: {\n      bodyMapper: Mappers.TableResponse,\n      headersMapper: Mappers.TableCreateHeaders\n    },\n    204: {\n      headersMapper: Mappers.TableCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.TableServiceError,\n      headersMapper: Mappers.TableCreateExceptionHeaders\n    }\n  },\n  requestBody: Parameters.tableProperties,\n  queryParameters: [Parameters.format],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.dataServiceVersion,\n    Parameters.contentType,\n    Parameters.responsePreference\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path: \"/Tables('{table}')\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {\n      headersMapper: Mappers.TableDeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.TableServiceError,\n      headersMapper: Mappers.TableDeleteExceptionHeaders\n    }\n  },\n  urlParameters: [Parameters.url, Parameters.table],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept1\n  ],\n  serializer\n};\nconst queryEntitiesOperationSpec: coreClient.OperationSpec = {\n  path: \"/{table}()\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TableEntityQueryResponse,\n      headersMapper: Mappers.TableQueryEntitiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.TableServiceError,\n      headersMapper: Mappers.TableQueryEntitiesExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.format,\n    Parameters.top,\n    Parameters.select,\n    Parameters.filter,\n    Parameters.timeout,\n    Parameters.nextPartitionKey,\n    Parameters.nextRowKey\n  ],\n  urlParameters: [Parameters.url, Parameters.table],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.dataServiceVersion\n  ],\n  serializer\n};\nconst queryEntitiesWithPartitionAndRowKeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/{table}(PartitionKey='{partitionKey}',RowKey='{rowKey}')\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Dictionary\", value: { type: { name: \"any\" } } }\n      },\n      headersMapper: Mappers.TableQueryEntitiesWithPartitionAndRowKeyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.TableServiceError,\n      headersMapper:\n        Mappers.TableQueryEntitiesWithPartitionAndRowKeyExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.format,\n    Parameters.select,\n    Parameters.filter,\n    Parameters.timeout\n  ],\n  urlParameters: [\n    Parameters.url,\n    Parameters.table,\n    Parameters.partitionKey,\n    Parameters.rowKey\n  ],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.dataServiceVersion\n  ],\n  serializer\n};\nconst updateEntityOperationSpec: coreClient.OperationSpec = {\n  path: \"/{table}(PartitionKey='{partitionKey}',RowKey='{rowKey}')\",\n  httpMethod: \"PUT\",\n  responses: {\n    204: {\n      headersMapper: Mappers.TableUpdateEntityHeaders\n    },\n    default: {\n      bodyMapper: Mappers.TableServiceError,\n      headersMapper: Mappers.TableUpdateEntityExceptionHeaders\n    }\n  },\n  requestBody: Parameters.tableEntityProperties,\n  queryParameters: [Parameters.format, Parameters.timeout],\n  urlParameters: [\n    Parameters.url,\n    Parameters.table,\n    Parameters.partitionKey,\n    Parameters.rowKey\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.dataServiceVersion,\n    Parameters.accept1,\n    Parameters.contentType1,\n    Parameters.ifMatch\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst mergeEntityOperationSpec: coreClient.OperationSpec = {\n  path: \"/{table}(PartitionKey='{partitionKey}',RowKey='{rowKey}')\",\n  httpMethod: \"PATCH\",\n  responses: {\n    204: {\n      headersMapper: Mappers.TableMergeEntityHeaders\n    },\n    default: {\n      bodyMapper: Mappers.TableServiceError,\n      headersMapper: Mappers.TableMergeEntityExceptionHeaders\n    }\n  },\n  requestBody: Parameters.tableEntityProperties,\n  queryParameters: [Parameters.format, Parameters.timeout],\n  urlParameters: [\n    Parameters.url,\n    Parameters.table,\n    Parameters.partitionKey,\n    Parameters.rowKey\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.dataServiceVersion,\n    Parameters.accept1,\n    Parameters.contentType1,\n    Parameters.ifMatch\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteEntityOperationSpec: coreClient.OperationSpec = {\n  path: \"/{table}(PartitionKey='{partitionKey}',RowKey='{rowKey}')\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {\n      headersMapper: Mappers.TableDeleteEntityHeaders\n    },\n    default: {\n      bodyMapper: Mappers.TableServiceError,\n      headersMapper: Mappers.TableDeleteEntityExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.format, Parameters.timeout],\n  urlParameters: [\n    Parameters.url,\n    Parameters.table,\n    Parameters.partitionKey,\n    Parameters.rowKey\n  ],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.dataServiceVersion,\n    Parameters.ifMatch1\n  ],\n  serializer\n};\nconst insertEntityOperationSpec: coreClient.OperationSpec = {\n  path: \"/{table}\",\n  httpMethod: \"POST\",\n  responses: {\n    201: {\n      bodyMapper: {\n        type: { name: \"Dictionary\", value: { type: { name: \"any\" } } }\n      },\n      headersMapper: Mappers.TableInsertEntityHeaders\n    },\n    204: {\n      headersMapper: Mappers.TableInsertEntityHeaders\n    },\n    default: {\n      bodyMapper: Mappers.TableServiceError,\n      headersMapper: Mappers.TableInsertEntityExceptionHeaders\n    }\n  },\n  requestBody: Parameters.tableEntityProperties,\n  queryParameters: [Parameters.format, Parameters.timeout],\n  urlParameters: [Parameters.url, Parameters.table],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.dataServiceVersion,\n    Parameters.contentType,\n    Parameters.responsePreference\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst getAccessPolicyOperationSpec: coreClient.OperationSpec = {\n  path: \"/{table}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: { name: \"Composite\", className: \"SignedIdentifier\" }\n          }\n        },\n        serializedName: \"SignedIdentifiers\",\n        xmlName: \"SignedIdentifiers\",\n        xmlIsWrapped: true,\n        xmlElementName: \"SignedIdentifier\"\n      },\n      headersMapper: Mappers.TableGetAccessPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.TableServiceError,\n      headersMapper: Mappers.TableGetAccessPolicyExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeout, Parameters.comp],\n  urlParameters: [Parameters.url, Parameters.table],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept2\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setAccessPolicyOperationSpec: coreClient.OperationSpec = {\n  path: \"/{table}\",\n  httpMethod: \"PUT\",\n  responses: {\n    204: {\n      headersMapper: Mappers.TableSetAccessPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.TableServiceError,\n      headersMapper: Mappers.TableSetAccessPolicyExceptionHeaders\n    }\n  },\n  requestBody: Parameters.tableAcl,\n  queryParameters: [Parameters.timeout, Parameters.comp],\n  urlParameters: [Parameters.url, Parameters.table],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.contentType2,\n    Parameters.accept3\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { Service } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { GeneratedClientContext } from \"../generatedClientContext\";\nimport {\n  TableServiceProperties,\n  ServiceSetPropertiesOptionalParams,\n  ServiceSetPropertiesResponse,\n  ServiceGetPropertiesOptionalParams,\n  ServiceGetPropertiesResponse,\n  ServiceGetStatisticsOptionalParams,\n  ServiceGetStatisticsResponse\n} from \"../models\";\n\n/** Class representing a Service. */\nexport class ServiceImpl implements Service {\n  private readonly client: GeneratedClientContext;\n\n  /**\n   * Initialize a new instance of the class Service class.\n   * @param client Reference to the service client\n   */\n  constructor(client: GeneratedClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Sets properties for an account's Table service endpoint, including properties for Analytics and CORS\n   * (Cross-Origin Resource Sharing) rules.\n   * @param tableServiceProperties The Table Service properties.\n   * @param options The options parameters.\n   */\n  setProperties(\n    tableServiceProperties: TableServiceProperties,\n    options?: ServiceSetPropertiesOptionalParams\n  ): Promise<ServiceSetPropertiesResponse> {\n    return this.client.sendOperationRequest(\n      { tableServiceProperties, options },\n      setPropertiesOperationSpec\n    );\n  }\n\n  /**\n   * Gets the properties of an account's Table service, including properties for Analytics and CORS\n   * (Cross-Origin Resource Sharing) rules.\n   * @param options The options parameters.\n   */\n  getProperties(\n    options?: ServiceGetPropertiesOptionalParams\n  ): Promise<ServiceGetPropertiesResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      getPropertiesOperationSpec\n    );\n  }\n\n  /**\n   * Retrieves statistics related to replication for the Table service. It is only available on the\n   * secondary location endpoint when read-access geo-redundant replication is enabled for the account.\n   * @param options The options parameters.\n   */\n  getStatistics(\n    options?: ServiceGetStatisticsOptionalParams\n  ): Promise<ServiceGetStatisticsResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      getStatisticsOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst xmlSerializer = coreClient.createSerializer(Mappers, /* isXml */ true);\n\nconst setPropertiesOperationSpec: coreClient.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.ServiceSetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.TableServiceError,\n      headersMapper: Mappers.ServiceSetPropertiesExceptionHeaders\n    }\n  },\n  requestBody: Parameters.tableServiceProperties,\n  queryParameters: [Parameters.timeout, Parameters.restype, Parameters.comp1],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.contentType2,\n    Parameters.accept3\n  ],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst getPropertiesOperationSpec: coreClient.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TableServiceProperties,\n      headersMapper: Mappers.ServiceGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.TableServiceError,\n      headersMapper: Mappers.ServiceGetPropertiesExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeout, Parameters.restype, Parameters.comp1],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept2\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getStatisticsOperationSpec: coreClient.OperationSpec = {\n  path: \"/\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TableServiceStats,\n      headersMapper: Mappers.ServiceGetStatisticsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.TableServiceError,\n      headersMapper: Mappers.ServiceGetStatisticsExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeout, Parameters.restype, Parameters.comp2],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.accept2\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\nimport { GeneratedClientOptionalParams } from \"./models\";\n\n/** @internal */\nexport class GeneratedClientContext extends coreClient.ServiceClient {\n  url: string;\n  version: string;\n\n  /**\n   * Initializes a new instance of the GeneratedClientContext class.\n   * @param url The URL of the service account or table that is the target of the desired operation.\n   * @param options The parameter options\n   */\n  constructor(url: string, options?: GeneratedClientOptionalParams) {\n    if (url === undefined) {\n      throw new Error(\"'url' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: GeneratedClientOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\"\n    };\n\n    const packageDetails = `azsdk-js-data-tables/13.0.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix\n      },\n      baseUri: options.endpoint || \"{url}\"\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.url = url;\n\n    // Assigning values to Constant parameters\n    this.version = options.version || \"2019-02-02\";\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { TableImpl, ServiceImpl } from \"./operations\";\nimport { Table, Service } from \"./operationsInterfaces\";\nimport { GeneratedClientContext } from \"./generatedClientContext\";\nimport { GeneratedClientOptionalParams } from \"./models\";\n\n/** @internal */\nexport class GeneratedClient extends GeneratedClientContext {\n  /**\n   * Initializes a new instance of the GeneratedClient class.\n   * @param url The URL of the service account or table that is the target of the desired operation.\n   * @param options The parameter options\n   */\n  constructor(url: string, options?: GeneratedClientOptionalParams) {\n    super(url, options);\n    this.table = new TableImpl(this);\n    this.service = new ServiceImpl(this);\n  }\n\n  table: Table;\n  service: Service;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createSpanFunction } from \"@azure/core-tracing\";\n\n/**\n * Creates a span using the global tracer.\n * @internal\n */\nexport const createSpan = createSpanFunction({\n  packagePrefix: \"Azure.Data.Tables\",\n  namespace: \"Microsoft.Data.Tables\",\n});\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { ClientParamsFromConnectionString, ConnectionString } from \"./internalModels\";\nimport { AzureNamedKeyCredential } from \"@azure/core-auth\";\nimport { TableServiceClientOptions } from \"..\";\n\n/**\n * Gets client parameters from an Account Connection String\n * Only supported in Node.js not supported for Browsers\n * @param extractedCreds - parsed connection string\n * @param options - TablesServiceClient options\n */\nexport function fromAccountConnectionString(\n  extractedCreds: ConnectionString,\n  options: TableServiceClientOptions = {}\n): ClientParamsFromConnectionString {\n  const sharedKeyCredential = new AzureNamedKeyCredential(\n    extractedCreds.accountName!,\n    extractedCreds.accountKey\n  );\n\n  return {\n    url: extractedCreds.url,\n    options,\n    credential: sharedKeyCredential,\n  };\n}\n\nexport function getAccountConnectionString(\n  accountName: string,\n  accountKey: string,\n  defaultEndpointsProtocol: string,\n  endpointSuffix?: string,\n  tableEndpoint?: string\n): ConnectionString {\n  if (!tableEndpoint) {\n    // TableEndpoint is not present in the Account connection string\n    // Can be obtained from `${defaultEndpointsProtocol}://${accountName}.table.${endpointSuffix}`\n    const protocol = defaultEndpointsProtocol.toLowerCase();\n    if (protocol !== \"https\" && protocol !== \"http\") {\n      throw new Error(\n        \"Invalid DefaultEndpointsProtocol in the provided Connection String. Expecting 'https' or 'http'\"\n      );\n    }\n    if (!endpointSuffix) {\n      throw new Error(\"Invalid EndpointSuffix in the provided Connection String\");\n    }\n    tableEndpoint = `${defaultEndpointsProtocol}://${accountName}.table.${endpointSuffix}`;\n  }\n\n  if (!accountName) {\n    throw new Error(\"Invalid AccountName in the provided Connection String\");\n  } else if (accountKey.length === 0) {\n    throw new Error(\"Invalid AccountKey in the provided Connection String\");\n  }\n\n  return {\n    kind: \"AccountConnString\",\n    url: tableEndpoint,\n    accountName,\n    accountKey,\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { ClientParamsFromConnectionString, ConnectionString } from \"./internalModels\";\nimport { fromAccountConnectionString, getAccountConnectionString } from \"./accountConnectionString\";\nimport { TableServiceClientOptions } from \"../models\";\nimport { URL } from \"./url\";\n\nconst DevelopmentConnectionString =\n  \"DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;TableEndpoint=http://127.0.0.1:10002/devstoreaccount1\";\n\n/**\n * This function parses a connection string into a set of\n * parameters to pass to be passed to TableClientService,\n * depending on the connection string type these parameter would\n * contain:\n * - Account Connection String:  A pipeline to sign the request with a SharedKey\n * - SAS Connection String: Attach a SAS token to the storage account url for authentication\n * @param connectionString - Connection string to parse\n * @param options - TableService client options\n */\nexport function getClientParamsFromConnectionString(\n  connectionString: string,\n  options: TableServiceClientOptions = {}\n): ClientParamsFromConnectionString {\n  if (connectionString.toLowerCase().indexOf(\"usedevelopmentstorage=true\") !== -1) {\n    connectionString = DevelopmentConnectionString;\n    options.allowInsecureConnection = true;\n  }\n  const extractedCreds = extractConnectionStringParts(connectionString);\n  if (extractedCreds.kind === \"AccountConnString\") {\n    return fromAccountConnectionString(extractedCreds, options);\n  } else if (extractedCreds.kind === \"SASConnString\") {\n    return {\n      url: `${extractedCreds.url}?${extractedCreds.accountSas}`,\n      options,\n    };\n  } else {\n    throw new Error(\n      \"Connection string must be either an Account connection string or a SAS connection string\"\n    );\n  }\n}\n\n/**\n * Extracts the parts of an Storage account connection string.\n *\n * @param connectionString - Connection string.\n * @returns String key value pairs of the storage account's url and credentials.\n */\nexport function extractConnectionStringParts(connectionString: string): ConnectionString {\n  // Matching TableEndpoint in the Account connection string\n  let tableEndpoint = getValueInConnString(connectionString, \"TableEndpoint\");\n  // Slicing off '/' at the end if exists\n  // (The methods that use `extractConnectionStringParts` expect the url to not have `/` at the end)\n  tableEndpoint = tableEndpoint.endsWith(\"/\") ? tableEndpoint.slice(0, -1) : tableEndpoint;\n\n  if (isAccountConnectionString(connectionString)) {\n    return getAccountConnectionString(\n      getValueInConnString(connectionString, \"AccountName\"),\n      getValueInConnString(connectionString, \"AccountKey\"),\n      getValueInConnString(connectionString, \"DefaultEndpointsProtocol\"),\n      getValueInConnString(connectionString, \"EndpointSuffix\"),\n      tableEndpoint\n    );\n  } else {\n    return getSASConnectionString(connectionString, tableEndpoint);\n  }\n}\n\n/**\n * Checks whether a connection string is an Account Connection string or not\n */\nfunction isAccountConnectionString(connectionString: string) {\n  const lowercaseConnectionString = connectionString.toLowerCase();\n  return (\n    lowercaseConnectionString.search(\"defaultendpointsprotocol=\") !== -1 &&\n    lowercaseConnectionString.search(\"accountkey=\") !== -1\n  );\n}\n\nfunction getSASConnectionString(connectionString: string, tableEndpoint: string): ConnectionString {\n  const accountName = getAccountNameFromUrl(tableEndpoint);\n  const accountSas = getValueInConnString(connectionString, \"SharedAccessSignature\");\n  if (!tableEndpoint) {\n    throw new Error(\"Invalid TableEndpoint in the provided SAS Connection String\");\n  } else if (!accountSas) {\n    throw new Error(\"Invalid SharedAccessSignature in the provided SAS Connection String\");\n  } else if (!accountName) {\n    throw new Error(\"Invalid AccountName in the provided SAS Connection String\");\n  }\n\n  return { kind: \"SASConnString\", url: tableEndpoint, accountName, accountSas };\n}\n\nfunction getValueInConnString(\n  connectionString: string,\n  argument:\n    | \"TableEndpoint\"\n    | \"AccountName\"\n    | \"AccountKey\"\n    | \"DefaultEndpointsProtocol\"\n    | \"EndpointSuffix\"\n    | \"SharedAccessSignature\"\n): string {\n  const searchKey = argument.toLowerCase();\n  const elements = connectionString.split(\";\").filter((e) => Boolean(e));\n  for (const element of elements) {\n    const trimmedElement = element.trim();\n    const [elementKey, value] = getValuePair(trimmedElement);\n    const key = elementKey.toLowerCase();\n    if (key === searchKey) {\n      return value;\n    }\n  }\n  return \"\";\n}\n\nfunction getValuePair(kvp: string): string[] {\n  // If the string is not in kvp format <key>=<valye> return an empty array\n  if (!kvp || kvp.indexOf(\"=\") === -1) {\n    return [];\n  }\n  // Get the substring before the first '='\n  const key = kvp.substr(0, kvp.indexOf(\"=\"));\n  // Get the substring after the first '='\n  const value = kvp.substr(kvp.indexOf(\"=\") + 1);\n\n  return [key, value];\n}\n\n/**\n * Extracts account name from the url\n * @param url - URL to extract the account name from\n * @returns The account name\n */\nfunction getAccountNameFromUrl(url: string): string {\n  if (!url) {\n    return url;\n  }\n\n  const parsedUrl = new URL(url);\n  let accountName;\n\n  const host = parsedUrl.host || \"\";\n  const path = parsedUrl.pathname || \"\";\n  const hostParts = host.split(\".\");\n  const pathParts = path.split(\"/\");\n\n  if (hostParts.length >= 1 && hostParts[1] === \"table\") {\n    // `${defaultEndpointsProtocol}://${accountName}.table.${endpointSuffix}`;\n    // Slicing off '/' at the end if exists\n    url = url.endsWith(\"/\") ? url.slice(0, -1) : url;\n    accountName = host.split(\".\")[0];\n  } else if (pathParts.length >= 1) {\n    // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/\n    // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/\n    // .getPath() -> /devstoreaccount1/\n    accountName = pathParts[1];\n  } else {\n    throw new Error(\"Unable to extract accountName with provided information.\");\n  }\n\n  return accountName;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { OperationOptions, OperationRequest } from \"@azure/core-client\";\nimport { PipelineResponse, RestError } from \"@azure/core-rest-pipeline\";\nimport { AzureLogger } from \"@azure/logger\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { TableServiceError } from \"../generated\";\n\nexport type TableServiceErrorResponse = PipelineResponse & {\n  /**\n   * The parsed HTTP response headers.\n   */\n  parsedHeaders?: Record<string, unknown>;\n  /**\n   * The response body as parsed JSON or XML.\n   */\n  parsedBody: TableServiceError;\n  /**\n   * The request that generated the response.\n   */\n  request: OperationRequest;\n};\n\nexport function handleTableAlreadyExists(\n  error: unknown,\n  options: OperationOptions & { tableName?: string; span?: any; logger?: AzureLogger } = {}\n): void {\n  const responseError = getErrorResponse(error);\n  if (\n    responseError &&\n    responseError.status === 409 &&\n    responseError.parsedBody.odataError?.code === \"TableAlreadyExists\"\n  ) {\n    options.logger?.info(`Table ${options.tableName} already Exists`);\n\n    if (options.onResponse) {\n      options.onResponse(responseError, {});\n    }\n  } else {\n    options?.span.setStatus({ code: SpanStatusCode.ERROR, message: (error as Error)?.message });\n    throw error;\n  }\n}\n\nfunction getErrorResponse(error: unknown): TableServiceErrorResponse | undefined {\n  if (!isRestError(error)) {\n    return undefined;\n  }\n\n  const errorResponse: TableServiceErrorResponse = error.response as TableServiceErrorResponse;\n\n  if (!errorResponse || !isTableServiceErrorResponse(errorResponse.parsedBody)) {\n    return undefined;\n  }\n\n  return errorResponse;\n}\n\nfunction isRestError(error: unknown): error is RestError {\n  return (error as RestError).name === \"RestError\";\n}\n\nfunction isTableServiceErrorResponse(\n  errorResponseBody: any\n): errorResponseBody is TableServiceError {\n  return Boolean(errorResponseBody?.odataError);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  NamedKeyCredential,\n  SASCredential,\n  TokenCredential,\n  isNamedKeyCredential,\n  isSASCredential,\n  isTokenCredential,\n} from \"@azure/core-auth\";\n\nexport function isCredential(\n  credential: unknown\n): credential is NamedKeyCredential | SASCredential | TokenCredential {\n  return (\n    isSASCredential(credential) || isNamedKeyCredential(credential) || isTokenCredential(credential)\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AzureLogger, createClientLogger } from \"@azure/logger\";\n\n/**\n * The \\@azure/logger configuration for this package.\n */\nexport const logger: AzureLogger = createClientLogger(\"data-tables\");\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  PipelinePolicy,\n  PipelineRequest,\n  PipelineResponse,\n  SendRequest,\n} from \"@azure/core-rest-pipeline\";\nimport { HeaderConstants } from \"./utils/constants\";\nimport { NamedKeyCredential } from \"@azure/core-auth\";\nimport { URL } from \"./utils/url\";\nimport { computeHMACSHA256 } from \"./utils/computeHMACSHA256\";\n\n/**\n * The programmatic identifier of the tablesNamedKeyCredentialPolicy.\n */\nexport const tablesNamedKeyCredentialPolicyName = \"tablesNamedKeyCredentialPolicy\";\n\n/**\n * tablesNamedKeyCredentialPolicy is a policy used to sign HTTP request with a shared key.\n */\nexport function tablesNamedKeyCredentialPolicy(credential: NamedKeyCredential): PipelinePolicy {\n  function signRequest(request: PipelineRequest): void {\n    const headerValue = getAuthorizationHeader(request, credential);\n    request.headers.set(HeaderConstants.AUTHORIZATION, headerValue);\n  }\n\n  return {\n    name: tablesNamedKeyCredentialPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      signRequest(request);\n      return next(request);\n    },\n  };\n}\n\nexport function getAuthorizationHeader(\n  request: PipelineRequest,\n  credential: NamedKeyCredential\n): string {\n  if (!request.headers.has(HeaderConstants.X_MS_DATE)) {\n    request.headers.set(HeaderConstants.X_MS_DATE, new Date().toUTCString());\n  }\n\n  if (request.body && typeof request.body === \"string\" && request.body.length > 0) {\n    request.headers.set(HeaderConstants.CONTENT_LENGTH, Buffer.byteLength(request.body));\n  }\n\n  // If x-ms-date is present, use it otherwise date\n  const dateHeader = getHeaderValueToSign(request, HeaderConstants.X_MS_DATE);\n\n  if (!dateHeader) {\n    throw new Error(\"Failed to sign request: x-ms-date or date header must be present\");\n  }\n\n  const stringToSign: string = [\n    dateHeader,\n    getCanonicalizedResourceString(request, credential),\n  ].join(\"\\n\");\n\n  const signature = computeHMACSHA256(stringToSign, credential.key);\n\n  return `SharedKeyLite ${credential.name}:${signature}`;\n}\n\nfunction getHeaderValueToSign(request: PipelineRequest, headerName: string): string {\n  const value = request.headers.get(headerName);\n\n  if (!value) {\n    return \"\";\n  }\n  return value;\n}\n\nfunction getCanonicalizedResourceString(\n  request: PipelineRequest,\n  credential: NamedKeyCredential\n): string {\n  // https://docs.microsoft.com/rest/api/storageservices/authorize-with-shared-key#shared-key-lite-and-table-service-format-for-2009-09-19-and-later\n  const url = new URL(request.url);\n  const path = url.pathname || \"/\";\n  let canonicalizedResourceString = \"/\" + credential.name + path;\n\n  // The query string should include the question mark and the comp parameter (for example, ?comp=metadata). No other parameters should be included on the query string.\n  const comp = url.searchParams.get(\"comp\");\n\n  if (comp) {\n    canonicalizedResourceString = `${canonicalizedResourceString}?comp=${comp}`;\n  }\n\n  return canonicalizedResourceString;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  PipelinePolicy,\n  PipelineRequest,\n  PipelineResponse,\n  SendRequest,\n} from \"@azure/core-rest-pipeline\";\nimport { URL, URLSearchParams } from \"./utils/url\";\nimport { SASCredential } from \"@azure/core-auth\";\n\n/**\n * The programmatic identifier of the tablesSASTokenPolicy.\n */\nexport const tablesSASTokenPolicyName = \"tablesSASTokenPolicy\";\n\n/**\n * tablesSASTokenPolicy is a policy used to sign HTTP request with a shared key.\n */\nexport function tablesSASTokenPolicy(credential: SASCredential): PipelinePolicy {\n  return {\n    name: tablesSASTokenPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      signURLWithSAS(request, credential);\n      return next(request);\n    },\n  };\n}\n\nexport function signURLWithSAS(request: PipelineRequest, credential: SASCredential): void {\n  const sasParams = new URLSearchParams(credential.signature);\n  const url = new URL(request.url);\n\n  for (const [name, value] of sasParams) {\n    url.searchParams.append(name, value);\n  }\n  request.url = url.toString();\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport \"@azure/core-paging\";\nimport {\n  GetPropertiesResponse,\n  GetStatisticsResponse,\n  ServiceProperties,\n  SetPropertiesOptions,\n  SetPropertiesResponse,\n} from \"./generatedModels\";\nimport { InternalClientPipelineOptions, OperationOptions } from \"@azure/core-client\";\nimport {\n  ListTableItemsOptions,\n  TableItem,\n  TableQueryOptions,\n  TableServiceClientOptions,\n} from \"./models\";\nimport {\n  NamedKeyCredential,\n  SASCredential,\n  TokenCredential,\n  isNamedKeyCredential,\n  isSASCredential,\n  isTokenCredential,\n} from \"@azure/core-auth\";\nimport { STORAGE_SCOPE, TablesLoggingAllowedHeaderNames } from \"./utils/constants\";\nimport { Service, Table } from \"./generated\";\nimport { parseXML, stringifyXML } from \"@azure/core-xml\";\nimport { GeneratedClient } from \"./generated/generatedClient\";\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { Pipeline } from \"@azure/core-rest-pipeline\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { TableItemResultPage } from \"./models\";\nimport { createSpan } from \"./utils/tracing\";\nimport { getClientParamsFromConnectionString } from \"./utils/connectionString\";\nimport { handleTableAlreadyExists } from \"./utils/errorHelpers\";\nimport { isCredential } from \"./utils/isCredential\";\nimport { logger } from \"./logger\";\nimport { tablesNamedKeyCredentialPolicy } from \"./tablesNamedCredentialPolicy\";\nimport { tablesSASTokenPolicy } from \"./tablesSASTokenPolicy\";\n\n/**\n * A TableServiceClient represents a Client to the Azure Tables service allowing you\n * to perform operations on the tables and the entities.\n */\nexport class TableServiceClient {\n  /**\n   * Table Account URL\n   */\n  public url: string;\n  /**\n   * Represents a pipeline for making a HTTP request to a URL.\n   * Pipelines can have multiple policies to manage manipulating each request before and after it is made to the server.\n   */\n  public pipeline: Pipeline;\n  private table: Table;\n  private service: Service;\n\n  /**\n   * Creates a new instance of the TableServiceClient class.\n   *\n   * @param url - The URL of the service account that is the target of the desired operation., such as \"https://myaccount.table.core.windows.net\".\n   * @param credential - NamedKeyCredential | SASCredential used to authenticate requests. Only Supported for Node\n   * @param options - Options to configure the HTTP pipeline.\n   *\n   * ### Example using an account name/key:\n   *\n   * ```js\n   * const { AzureNamedKeyCredential, TableServiceClient } = require(\"@azure/data-tables\")\n   * const account = \"<storage account name>\"\n   * const sharedKeyCredential = new AzureNamedKeyCredential(account, \"<account key>\");\n   *\n   * const tableServiceClient = new TableServiceClient(\n   *   `https://${account}.table.core.windows.net`,\n   *   sharedKeyCredential\n   * );\n   * ```\n   */\n  constructor(url: string, credential: NamedKeyCredential, options?: TableServiceClientOptions);\n  /**\n   * Creates a new instance of the TableServiceClient class.\n   *\n   * @param url - The URL of the service account that is the target of the desired operation., such as \"https://myaccount.table.core.windows.net\".\n   * @param credential - SASCredential used to authenticate requests\n   * @param options - Options to configure the HTTP pipeline.\n   *\n   * ### Example using a SAS Token.\n   *\n   * ```js\n   * const { AzureSASCredential, TableServiceClient } = require(\"@azure/data-tables\")\n   * const account = \"<storage account name>\"\n   * const sasCredential = new AzureSASCredential(account, \"<account key>\");\n   *\n   * const tableServiceClient = new TableServiceClient(\n   *   `https://${account}.table.core.windows.net`,\n   *   sasCredential\n   * );\n   * ```\n   */\n  constructor(url: string, credential: SASCredential, options?: TableServiceClientOptions);\n  /**\n   * Creates a new instance of the TableServiceClient class.\n   *\n   * @param url - The URL of the service account that is the target of the desired operation., such as \"https://myaccount.table.core.windows.net\".\n   * @param credential - Azure Active Directory credential used to authenticate requests\n   * @param options - Options to configure the HTTP pipeline.\n   *\n   * ### Example using an Azure Active Directory credential:\n   *\n   * ```js\n   * cons { DefaultAzureCredential } = require(\"@azure/identity\");\n   * const { TableServiceClient } = require(\"@azure/data-tables\")\n   * const account = \"<storage account name>\"\n   * const credential = new DefaultAzureCredential();\n   *\n   * const tableServiceClient = new TableServiceClient(\n   *   `https://${account}.table.core.windows.net`,\n   *   credential\n   * );\n   * ```\n   */\n  constructor(url: string, credential: TokenCredential, options?: TableServiceClientOptions);\n  /**\n   * Creates a new instance of the TableServiceClient class.\n   *\n   * @param url - The URL of the service account that is the target of the desired operation., such as\n   *              \"https://myaccount.table.core.windows.net\". You can append a SAS,\n   *              such as \"https://myaccount.table.core.windows.net?sasString\".\n   * @param options - Options to configure the HTTP pipeline.\n   * Example appending a SAS token:\n   *\n   * ```js\n   * const account = \"<storage account name>\";\n   * const sasToken = \"<SAS token>\";\n   *\n   * const tableServiceClient = new TableServiceClient(\n   *   `https://${account}.table.core.windows.net?${sasToken}`,\n   * );\n   * ```\n   */\n  constructor(url: string, options?: TableServiceClientOptions);\n  constructor(\n    url: string,\n    credentialOrOptions?:\n      | NamedKeyCredential\n      | SASCredential\n      | TokenCredential\n      | TableServiceClientOptions,\n    options?: TableServiceClientOptions\n  ) {\n    this.url = url;\n    const credential = isCredential(credentialOrOptions) ? credentialOrOptions : undefined;\n    const clientOptions =\n      (!isCredential(credentialOrOptions) ? credentialOrOptions : options) || {};\n\n    clientOptions.endpoint = clientOptions.endpoint || this.url;\n\n    const internalPipelineOptions: InternalClientPipelineOptions = {\n      ...clientOptions,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n          additionalAllowedHeaderNames: [...TablesLoggingAllowedHeaderNames],\n        },\n        deserializationOptions: {\n          parseXML,\n        },\n        serializationOptions: {\n          stringifyXML,\n        },\n      },\n      ...(isTokenCredential(credential) && { credential, credentialScopes: STORAGE_SCOPE }),\n    };\n    const client = new GeneratedClient(this.url, internalPipelineOptions);\n    if (isNamedKeyCredential(credential)) {\n      client.pipeline.addPolicy(tablesNamedKeyCredentialPolicy(credential));\n    } else if (isSASCredential(credential)) {\n      client.pipeline.addPolicy(tablesSASTokenPolicy(credential));\n    }\n\n    this.pipeline = client.pipeline;\n    this.table = client.table;\n    this.service = client.service;\n  }\n\n  /**\n   * Retrieves statistics related to replication for the Table service. It is only available on the\n   * secondary location endpoint when read-access geo-redundant replication is enabled for the account.\n   * @param options - The options parameters.\n   */\n  public async getStatistics(options: OperationOptions = {}): Promise<GetStatisticsResponse> {\n    const { span, updatedOptions } = createSpan(\"TableServiceClient-getStatistics\", options);\n    try {\n      return await this.service.getStatistics(updatedOptions);\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Gets the properties of an account's Table service, including properties for Analytics and CORS\n   * (Cross-Origin Resource Sharing) rules.\n   * @param options - The options parameters.\n   */\n  public async getProperties(options: OperationOptions = {}): Promise<GetPropertiesResponse> {\n    const { span, updatedOptions } = createSpan(\"TableServiceClient-getProperties\", options);\n    try {\n      return await this.service.getProperties(updatedOptions);\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets properties for an account's Table service endpoint, including properties for Analytics and CORS\n   * (Cross-Origin Resource Sharing) rules.\n   * @param properties - The Table Service properties.\n   * @param options - The options parameters.\n   */\n  public async setProperties(\n    properties: ServiceProperties,\n    options: SetPropertiesOptions = {}\n  ): Promise<SetPropertiesResponse> {\n    const { span, updatedOptions } = createSpan(\"TableServiceClient-setProperties\", options);\n    try {\n      return await this.service.setProperties(properties, updatedOptions);\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new table under the given account.\n   * @param name - The name of the table.\n   * @param options - The options parameters.\n   */\n  public async createTable(name: string, options: OperationOptions = {}): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"TableServiceClient-createTable\", options);\n    try {\n      await this.table.create({ name }, { ...updatedOptions });\n    } catch (e) {\n      handleTableAlreadyExists(e, { ...updatedOptions, span, logger, tableName: name });\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Operation permanently deletes the specified table.\n   * @param name - The name of the table.\n   * @param options - The options parameters.\n   */\n  public async deleteTable(name: string, options: OperationOptions = {}): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"TableServiceClient-deleteTable\", options);\n    try {\n      await this.table.delete(name, updatedOptions);\n    } catch (e) {\n      if (e.statusCode === 404) {\n        logger.info(\"TableServiceClient-deleteTable: Table doesn't exist\");\n      } else {\n        span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n        throw e;\n      }\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Queries tables under the given account.\n   * @param options - The options parameters.\n   */\n  public listTables(\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: ListTableItemsOptions\n  ): PagedAsyncIterableIterator<TableItem, TableItemResultPage> {\n    const iter = this.listTablesAll(options);\n\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings) => {\n        const pageOptions: InternalListTablesOptions = {\n          ...options,\n          queryOptions: { top: settings?.maxPageSize },\n        };\n\n        if (settings?.continuationToken) {\n          pageOptions.continuationToken = settings.continuationToken;\n        }\n\n        return this.listTablesPage(pageOptions);\n      },\n    };\n  }\n\n  private async *listTablesAll(\n    options?: InternalListTablesOptions\n  ): AsyncIterableIterator<TableItem> {\n    const firstPage = await this._listTables(options);\n    const { continuationToken } = firstPage;\n    yield* firstPage;\n    if (continuationToken) {\n      const optionsWithContinuation: InternalListTablesOptions = {\n        ...options,\n        continuationToken,\n      };\n      for await (const page of this.listTablesPage(optionsWithContinuation)) {\n        yield* page;\n      }\n    }\n  }\n\n  private async *listTablesPage(\n    options: InternalListTablesOptions = {}\n  ): AsyncIterableIterator<TableItemResultPage> {\n    const { span, updatedOptions } = createSpan(\"TableServiceClient-listTablesPage\", options);\n\n    try {\n      let result = await this._listTables(updatedOptions);\n\n      yield result;\n\n      while (result.continuationToken) {\n        const optionsWithContinuation: InternalListTablesOptions = {\n          ...updatedOptions,\n          continuationToken: result.continuationToken,\n        };\n        result = await this._listTables(optionsWithContinuation);\n        yield result;\n      }\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async _listTables(options: InternalListTablesOptions = {}): Promise<TableItemResultPage> {\n    const { continuationToken: nextTableName, ...listOptions } = options;\n    const { xMsContinuationNextTableName: continuationToken, value = [] } = await this.table.query({\n      ...listOptions,\n      nextTableName,\n    });\n    return Object.assign([...value], { continuationToken });\n  }\n\n  /**\n   *\n   * Creates an instance of TableServiceClient from connection string.\n   *\n   * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.\n   *                           [ Note - Account connection string can only be used in NODE.JS runtime. ]\n   *                           Account connection string example -\n   *                           `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`\n   *                           SAS connection string example -\n   *                           `BlobEndpoint=https://myaccount.table.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`\n   * @param options - Options to configure the HTTP pipeline.\n   * @returns A new TableServiceClient from the given connection string.\n   */\n  public static fromConnectionString(\n    connectionString: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: TableServiceClientOptions\n  ): TableServiceClient {\n    const {\n      url,\n      options: clientOptions,\n      credential,\n    } = getClientParamsFromConnectionString(connectionString, options);\n\n    if (credential) {\n      return new TableServiceClient(url, credential, clientOptions);\n    } else {\n      return new TableServiceClient(url, clientOptions);\n    }\n  }\n}\n\ntype InternalListTablesOptions = ListTableItemsOptions & {\n  queryOptions?: TableQueryOptions & { top?: number };\n  /**\n   * A table query continuation token from a previous call.\n   */\n  continuationToken?: string;\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HeaderConstants, TRANSACTION_HTTP_LINE_ENDING } from \"./constants\";\n\n/**\n * Builds a transaction change set boundary to be added to the transaction request body\n * @param changesetId - Id of the transaction changeset\n */\nexport function getChangeSetBoundary(changesetId: string): string {\n  return `changeset_${changesetId}`;\n}\n\n/**\n * Builds a transaction boundary to be added to the transaction request body\n * @param transactionId - Id of the transaction\n */\nexport function getTransactionBoundary(transactionId: string): string {\n  return `batch_${transactionId}`;\n}\n\n/**\n * Returns an initial representation of the Transaction body.\n * @param transactionId - Id of the transaction\n * @param changesetId - Id of the transaction changeset\n */\nexport function getInitialTransactionBody(transactionId: string, changesetId: string): string[] {\n  const transactionBoundary = `batch_${transactionId}`;\n  return [\n    `--${transactionBoundary}${TRANSACTION_HTTP_LINE_ENDING}${HeaderConstants.CONTENT_TYPE}: multipart/mixed; boundary=changeset_${changesetId}${TRANSACTION_HTTP_LINE_ENDING}${TRANSACTION_HTTP_LINE_ENDING}`,\n  ];\n}\n\n/**\n * Build the Transaction http request body to send to the service.\n * @param bodyParts - Parts of the transaction body, containing information about the actions to be included in the transaction request\n * @param transactionId - Id of the transaction\n * @param changesetId - Id of the transaction changeset\n */\nexport function getTransactionHttpRequestBody(\n  bodyParts: string[],\n  transactionId: string,\n  changesetId: string\n): string {\n  const transactionBoundary = getTransactionBoundary(transactionId);\n  const changesetBoundary = getChangeSetBoundary(changesetId);\n  const changesetEnding = `--${changesetBoundary}--`;\n  const transactionEnding = `--${transactionBoundary}--`;\n  const bodyContent = bodyParts.join(TRANSACTION_HTTP_LINE_ENDING);\n  return `${bodyContent}${TRANSACTION_HTTP_LINE_ENDING}${changesetEnding}${TRANSACTION_HTTP_LINE_ENDING}${transactionEnding}${TRANSACTION_HTTP_LINE_ENDING}`;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  HeaderConstants,\n  TRANSACTION_HTTP_LINE_ENDING,\n  TRANSACTION_HTTP_VERSION_1_1,\n} from \"./utils/constants\";\nimport {\n  PipelinePolicy,\n  PipelineRequest,\n  PipelineResponse,\n  SendRequest,\n  createHttpHeaders,\n  createPipelineRequest,\n} from \"@azure/core-rest-pipeline\";\nimport { URL } from \"./utils/url\";\nimport { getChangeSetBoundary } from \"./utils/transactionHelpers\";\n\nexport const transactionRequestAssemblePolicyName = \"transactionRequestAssemblePolicy\";\n\nconst dummyResponse: PipelineResponse = {\n  request: createPipelineRequest({ url: \"FAKE\" }),\n  status: 200,\n  headers: createHttpHeaders(),\n};\n\nexport function transactionRequestAssemblePolicy(\n  bodyParts: string[],\n  changesetId: string\n): PipelinePolicy {\n  return {\n    name: transactionRequestAssemblePolicyName,\n    async sendRequest(request: PipelineRequest): Promise<PipelineResponse> {\n      const subRequest = getNextSubrequestBodyPart(request, changesetId);\n      bodyParts.push(subRequest);\n      // Intercept request from going to wire\n      return dummyResponse;\n    },\n  };\n}\n\nexport const transactionHeaderFilterPolicyName = \"transactionHeaderFilterPolicy\";\n\nexport function transactionHeaderFilterPolicy(): PipelinePolicy {\n  return {\n    name: transactionHeaderFilterPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      // The subrequests should not have the x-ms-version header.\n      request.headers.delete(HeaderConstants.X_MS_VERSION);\n      return next(request);\n    },\n  };\n}\n\nfunction getSubRequestUrl(url: string): string {\n  const sasTokenParts = [\"sv\", \"ss\", \"srt\", \"sp\", \"se\", \"st\", \"spr\", \"sig\"];\n  const urlParsed = new URL(url);\n  sasTokenParts.forEach((part) => urlParsed.searchParams.delete(part));\n  return urlParsed.toString();\n}\n\nfunction getNextSubrequestBodyPart(request: PipelineRequest, changesetId: string) {\n  const changesetBoundary = getChangeSetBoundary(changesetId);\n  const subRequestPrefix = `--${changesetBoundary}${TRANSACTION_HTTP_LINE_ENDING}${HeaderConstants.CONTENT_TYPE}: application/http${TRANSACTION_HTTP_LINE_ENDING}${HeaderConstants.CONTENT_TRANSFER_ENCODING}: binary`;\n\n  const subRequestUrl = getSubRequestUrl(request.url);\n  // Start to assemble sub request\n  const subRequest = [\n    subRequestPrefix, // sub request constant prefix\n    \"\", // empty line after sub request's content ID\n    `${request.method.toString()} ${subRequestUrl} ${TRANSACTION_HTTP_VERSION_1_1}`, // sub request start line with method,\n  ];\n\n  // Add required headers\n  for (const [name, value] of request.headers) {\n    subRequest.push(`${name}: ${value}`);\n  }\n\n  // Append sub-request body\n  subRequest.push(`${TRANSACTION_HTTP_LINE_ENDING}`); // sub request's headers need end with an empty line\n  if (request.body) {\n    subRequest.push(String(request.body));\n  }\n\n  // Add subrequest to transaction body\n  return subRequest.join(TRANSACTION_HTTP_LINE_ENDING);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PipelinePolicy } from \"@azure/core-rest-pipeline\";\n\nconst cosmosPatchPolicyName = \"cosmosPatchPolicy\";\n\nexport function cosmosPatchPolicy(): PipelinePolicy {\n  return {\n    name: cosmosPatchPolicyName,\n    sendRequest: (request, next) => {\n      if (request.method === \"PATCH\") {\n        request.method = \"POST\";\n        request.headers.set(\"X-HTTP-Method\", \"MERGE\");\n      }\n\n      return next(request);\n    },\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { RawHttpHeaders } from \"@azure/core-rest-pipeline\";\n\n/**\n * @internal\n * Builds an object with the required headers for a Transaction request. For both Node and Browser\n */\nexport function getBaseTransactionHeaders(transactionGuid: string): RawHttpHeaders {\n  return {\n    accept: \"application/json\",\n    \"x-ms-version\": \"2019-02-02\",\n    DataServiceVersion: \"3.0;\",\n    MaxDataServiceVersion: \"3.0;NetFx\",\n    \"Content-Type\": `multipart/mixed; boundary=batch_${transactionGuid}`,\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { RawHttpHeaders } from \"@azure/core-rest-pipeline\";\nimport { getBaseTransactionHeaders } from \"./baseTransactionHeaders\";\n\n/**\n * @internal\n * Builds an object with the required headers for a Transaction request. For Node\n */\nexport function getTransactionHeaders(transactionGuid: string): RawHttpHeaders {\n  const baseHeaders = getBaseTransactionHeaders(transactionGuid);\n  return {\n    ...baseHeaders,\n    // The below headers are not supported in the browser as they are flagged as \"unsafe headers\"\n    \"Accept-Charset\": \"UTF-8\",\n    Connection: \"Keep-Alive\",\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { URL } from \"./url\";\n\nexport function isCosmosEndpoint(url: string): boolean {\n  const parsedURL = new URL(url);\n  if (parsedURL.hostname.indexOf(\".table.cosmosdb.\") !== -1) {\n    return true;\n  }\n\n  if (parsedURL.hostname.indexOf(\".table.cosmos.\") !== -1) {\n    return true;\n  }\n\n  if (parsedURL.hostname === \"localhost\" && parsedURL.port !== \"10002\") {\n    return true;\n  }\n\n  return false;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  DeleteTableEntityOptions,\n  TableEntity,\n  TableTransactionEntityResponse,\n  TableTransactionResponse,\n  TransactionAction,\n  UpdateMode,\n  UpdateTableEntityOptions,\n  TableServiceClientOptions,\n} from \"./models\";\nimport {\n  NamedKeyCredential,\n  SASCredential,\n  TokenCredential,\n  isNamedKeyCredential,\n  isSASCredential,\n  isTokenCredential,\n} from \"@azure/core-auth\";\nimport {\n  OperationOptions,\n  ServiceClient,\n  serializationPolicy,\n  serializationPolicyName,\n  ServiceClientOptions,\n} from \"@azure/core-client\";\nimport {\n  Pipeline,\n  PipelineRequest,\n  PipelineResponse,\n  RestError,\n  createHttpHeaders,\n  createPipelineRequest,\n} from \"@azure/core-rest-pipeline\";\nimport {\n  getInitialTransactionBody,\n  getTransactionHttpRequestBody,\n} from \"./utils/transactionHelpers\";\nimport {\n  transactionHeaderFilterPolicy,\n  transactionHeaderFilterPolicyName,\n  transactionRequestAssemblePolicy,\n  transactionRequestAssemblePolicyName,\n} from \"./TablePolicies\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { TableClientLike } from \"./utils/internalModels\";\nimport { TableServiceErrorOdataError } from \"./generated\";\nimport { cosmosPatchPolicy } from \"./cosmosPathPolicy\";\nimport { createSpan } from \"./utils/tracing\";\nimport { getAuthorizationHeader } from \"./tablesNamedCredentialPolicy\";\nimport { getTransactionHeaders } from \"./utils/transactionHeaders\";\nimport { isCosmosEndpoint } from \"./utils/isCosmosEndpoint\";\nimport { signURLWithSAS } from \"./tablesSASTokenPolicy\";\nimport { STORAGE_SCOPE } from \"./utils/constants\";\n\n/**\n * Helper to build a list of transaction actions\n */\nexport class TableTransaction {\n  /**\n   * List of actions to perform in a transaction\n   */\n  public actions: TransactionAction[];\n\n  constructor(actions?: TransactionAction[]) {\n    this.actions = actions ?? [];\n  }\n\n  /**\n   * Adds a create action to the transaction\n   * @param entity - entity to create\n   */\n  createEntity<T extends object = Record<string, unknown>>(entity: TableEntity<T>): void {\n    this.actions.push([\"create\", entity]);\n  }\n\n  /**\n   * Adds a delete action to the transaction\n   * @param partitionKey - partition key of the entity to delete\n   * @param rowKey - rowKey of the entity to delete\n   */\n  deleteEntity(partitionKey: string, rowKey: string): void {\n    this.actions.push([\"delete\", { partitionKey, rowKey }]);\n  }\n\n  /**\n   * Adds an update action to the transaction\n   * @param entity - entity to update\n   * @param updateMode - update mode\n   */\n  updateEntity<T extends object = Record<string, unknown>>(\n    entity: TableEntity<T>,\n    updateMode: UpdateMode = \"Merge\"\n  ): void {\n    this.actions.push([\"update\", entity, updateMode]);\n  }\n\n  /**\n   * Adds an upsert action to the transaction, which inserts if the entity doesn't exist or updates the existing one\n   * @param entity - entity to upsert\n   * @param updateMode - update mode\n   */\n  upsertEntity<T extends object = Record<string, unknown>>(\n    entity: TableEntity<T>,\n    updateMode: UpdateMode = \"Merge\"\n  ): void {\n    this.actions.push([\"upsert\", entity, updateMode]);\n  }\n}\n\n/**\n * TableTransaction collects sub-operations that can be submitted together via submitTransaction\n */\nexport class InternalTableTransaction {\n  /**\n   * Table Account URL\n   */\n  public url: string;\n  /**\n   * This part of the state can be reset by\n   * calling the reset function. Other parts of the state\n   * such as the credentials remain the same throughout the life\n   * of the instance.\n   */\n  private resetableState: {\n    transactionId: string;\n    changesetId: string;\n    pendingOperations: Promise<any>[];\n    bodyParts: string[];\n    partitionKey: string;\n  };\n  private clientOptions: TableServiceClientOptions;\n  private interceptClient: TableClientLike;\n  private credential?: NamedKeyCredential | SASCredential | TokenCredential;\n  private allowInsecureConnection: boolean;\n\n  /**\n   * @param url - Tables account url\n   * @param partitionKey - partition key\n   * @param credential - credential to authenticate the transaction request\n   */\n  constructor(\n    url: string,\n    partitionKey: string,\n    transactionId: string,\n    changesetId: string,\n    clientOptions: TableServiceClientOptions,\n    interceptClient: TableClientLike,\n    credential?: NamedKeyCredential | SASCredential | TokenCredential,\n    allowInsecureConnection: boolean = false\n  ) {\n    this.clientOptions = clientOptions;\n    this.credential = credential;\n    this.url = url;\n    this.interceptClient = interceptClient;\n    this.allowInsecureConnection = allowInsecureConnection;\n\n    // Initialize Reset-able properties\n    this.resetableState = this.initializeSharedState(transactionId, changesetId, partitionKey);\n\n    // Depending on the auth method used we need to build the url\n    if (!credential) {\n      // When the SAS token is provided as part of the URL we need to move it after $batch\n      const urlParts = url.split(\"?\");\n      this.url = urlParts[0];\n      const sas = urlParts.length > 1 ? `?${urlParts[1]}` : \"\";\n      this.url = `${this.getUrlWithSlash()}$batch${sas}`;\n    } else {\n      // When using a SharedKey credential no SAS token is needed\n      this.url = `${this.getUrlWithSlash()}$batch`;\n    }\n  }\n\n  /**\n   * Resets the state of the Transaction.\n   */\n  reset(transactionId: string, changesetId: string, partitionKey: string): void {\n    this.resetableState = this.initializeSharedState(transactionId, changesetId, partitionKey);\n  }\n\n  private initializeSharedState(transactionId: string, changesetId: string, partitionKey: string) {\n    const pendingOperations: Promise<any>[] = [];\n    const bodyParts = getInitialTransactionBody(transactionId, changesetId);\n    const isCosmos = isCosmosEndpoint(this.url);\n    prepateTransactionPipeline(this.interceptClient.pipeline, bodyParts, changesetId, isCosmos);\n\n    return {\n      transactionId,\n      changesetId,\n      partitionKey,\n      pendingOperations,\n      bodyParts,\n    };\n  }\n\n  /**\n   * Adds a createEntity operation to the transaction\n   * @param entity - Entity to create\n   */\n  public createEntity<T extends object>(entity: TableEntity<T>): void {\n    this.checkPartitionKey(entity.partitionKey);\n    this.resetableState.pendingOperations.push(this.interceptClient.createEntity(entity));\n  }\n\n  /**\n   * Adds a createEntity operation to the transaction per each entity in the entities array\n   * @param entities - Array of entities to create\n   */\n  public createEntities<T extends object>(entities: TableEntity<T>[]): void {\n    for (const entity of entities) {\n      this.checkPartitionKey(entity.partitionKey);\n      this.resetableState.pendingOperations.push(this.interceptClient.createEntity(entity));\n    }\n  }\n\n  /**\n   * Adds a deleteEntity operation to the transaction\n   * @param partitionKey - Partition key of the entity to delete\n   * @param rowKey - Row key of the entity to delete\n   * @param options - Options for the delete operation\n   */\n  public deleteEntity(\n    partitionKey: string,\n    rowKey: string,\n    options?: DeleteTableEntityOptions\n  ): void {\n    this.checkPartitionKey(partitionKey);\n    this.resetableState.pendingOperations.push(\n      this.interceptClient.deleteEntity(partitionKey, rowKey, options)\n    );\n  }\n\n  /**\n   * Adds an updateEntity operation to the transaction\n   * @param entity - Entity to update\n   * @param mode - Update mode (Merge or Replace)\n   * @param options - Options for the update operation\n   */\n  public updateEntity<T extends object>(\n    entity: TableEntity<T>,\n    mode: UpdateMode,\n    options?: UpdateTableEntityOptions\n  ): void {\n    this.checkPartitionKey(entity.partitionKey);\n    this.resetableState.pendingOperations.push(\n      this.interceptClient.updateEntity(entity, mode, options)\n    );\n  }\n\n  /**\n   * Adds an upsertEntity operation to the transaction\n   * @param entity - The properties for the table entity.\n   * @param mode   - The different modes for updating the entity:\n   *               - Merge: Updates an entity by updating the entity's properties without replacing the existing entity.\n   *               - Replace: Updates an existing entity by replacing the entire entity.\n   * @param options - The options parameters.\n   */\n  public upsertEntity<T extends object>(\n    entity: TableEntity<T>,\n    mode: UpdateMode,\n    options?: OperationOptions\n  ): void {\n    this.checkPartitionKey(entity.partitionKey);\n    this.resetableState.pendingOperations.push(\n      this.interceptClient.upsertEntity(entity, mode, options)\n    );\n  }\n\n  /**\n   * Submits the operations in the transaction\n   */\n  public async submitTransaction(): Promise<TableTransactionResponse> {\n    await Promise.all(this.resetableState.pendingOperations);\n    const body = getTransactionHttpRequestBody(\n      this.resetableState.bodyParts,\n      this.resetableState.transactionId,\n      this.resetableState.changesetId\n    );\n\n    const options: ServiceClientOptions = this.clientOptions;\n\n    if (isTokenCredential(this.credential)) {\n      options.credentialScopes = STORAGE_SCOPE;\n      options.credential = this.credential;\n    }\n\n    const client = new ServiceClient(options);\n\n    const headers = getTransactionHeaders(this.resetableState.transactionId);\n\n    const { span, updatedOptions } = createSpan(\n      \"TableTransaction-submitTransaction\",\n      {} as OperationOptions\n    );\n    const request = createPipelineRequest({\n      url: this.url,\n      method: \"POST\",\n      body,\n      headers: createHttpHeaders(headers),\n      tracingOptions: updatedOptions.tracingOptions,\n      allowInsecureConnection: this.allowInsecureConnection,\n    });\n\n    if (isNamedKeyCredential(this.credential)) {\n      const authHeader = getAuthorizationHeader(request, this.credential);\n      request.headers.set(\"Authorization\", authHeader);\n    } else if (isSASCredential(this.credential)) {\n      signURLWithSAS(request, this.credential);\n    }\n\n    try {\n      const rawTransactionResponse = await client.sendRequest(request);\n      return parseTransactionResponse(rawTransactionResponse);\n    } catch (error) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: error.message,\n      });\n      throw error;\n    } finally {\n      span.end();\n    }\n  }\n\n  private checkPartitionKey(partitionKey: string): void {\n    if (this.resetableState.partitionKey !== partitionKey) {\n      throw new Error(\"All operations in a transaction must target the same partitionKey\");\n    }\n  }\n\n  private getUrlWithSlash(): string {\n    return this.url.endsWith(\"/\") ? this.url : `${this.url}/`;\n  }\n}\n\nexport function parseTransactionResponse(\n  transactionResponse: PipelineResponse\n): TableTransactionResponse {\n  const subResponsePrefix = `--changesetresponse_`;\n  const status = transactionResponse.status;\n  const rawBody = transactionResponse.bodyAsText || \"\";\n  const splitBody = rawBody.split(subResponsePrefix);\n  const isSuccessByStatus = 200 <= status && status < 300;\n\n  if (!isSuccessByStatus) {\n    handleBodyError(rawBody, status, transactionResponse.request, transactionResponse);\n  }\n\n  // Dropping the first and last elements as they are the boundaries\n  // we just care about sub request content\n  const subResponses = splitBody.slice(1, splitBody.length - 1);\n\n  const responses: TableTransactionEntityResponse[] = subResponses.map((subResponse) => {\n    const statusMatch = subResponse.match(/HTTP\\/1.1 ([0-9]*)/);\n    if (statusMatch?.length !== 2) {\n      throw new Error(`Couldn't extract status from sub-response:\\n ${subResponse}`);\n    }\n    const subResponseStatus = Number.parseInt(statusMatch[1]);\n    if (!Number.isInteger(subResponseStatus)) {\n      throw new Error(`Expected sub-response status to be an integer ${subResponseStatus}`);\n    }\n\n    const bodyMatch = subResponse.match(/\\{(.*)\\}/);\n    if (bodyMatch?.length === 2) {\n      handleBodyError(\n        bodyMatch[0],\n        subResponseStatus,\n        transactionResponse.request,\n        transactionResponse\n      );\n    }\n\n    const etagMatch = subResponse.match(/ETag: (.*)/);\n    const rowKeyMatch = subResponse.match(/RowKey='(.*)'/);\n\n    return {\n      status: subResponseStatus,\n      ...(rowKeyMatch?.length === 2 && { rowKey: rowKeyMatch[1] }),\n      ...(etagMatch?.length === 2 && { etag: etagMatch[1] }),\n    };\n  });\n\n  return {\n    status,\n    subResponses: responses,\n    getResponseForEntity: (rowKey: string) => responses.find((r) => r.rowKey === rowKey),\n  };\n}\n\nfunction handleBodyError(\n  bodyAsText: string,\n  statusCode: number,\n  request: PipelineRequest,\n  response: PipelineResponse\n) {\n  let parsedError;\n\n  try {\n    parsedError = JSON.parse(bodyAsText);\n  } catch {\n    parsedError = {};\n  }\n\n  let message = \"Transaction Failed\";\n  let code: string | undefined;\n  // Only transaction sub-responses return body\n  if (parsedError && parsedError[\"odata.error\"]) {\n    const error: TableServiceErrorOdataError = parsedError[\"odata.error\"];\n    message = error.message?.value ?? message;\n    code = error.code;\n  }\n\n  throw new RestError(message, {\n    code,\n    statusCode,\n    request,\n    response,\n  });\n}\n\n/**\n * Prepares the transaction pipeline to intercept operations\n * @param pipeline - Client pipeline\n */\nexport function prepateTransactionPipeline(\n  pipeline: Pipeline,\n  bodyParts: string[],\n  changesetId: string,\n  isCosmos: boolean\n): void {\n  // Fist, we need to clear all the existing policies to make sure we start\n  // with a fresh state.\n  const policies = pipeline.getOrderedPolicies();\n  for (const policy of policies) {\n    pipeline.removePolicy({\n      name: policy.name,\n    });\n  }\n\n  // With the clear state we now initialize the pipelines required for intercepting the requests.\n  // Use transaction assemble policy to assemble request and intercept request from going to wire\n\n  pipeline.addPolicy(serializationPolicy(), { phase: \"Serialize\" });\n  pipeline.addPolicy(transactionHeaderFilterPolicy());\n  pipeline.addPolicy(transactionRequestAssemblePolicy(bodyParts, changesetId));\n  if (isCosmos) {\n    pipeline.addPolicy(cosmosPatchPolicy(), {\n      afterPolicies: [transactionHeaderFilterPolicyName],\n      beforePolicies: [serializationPolicyName, transactionRequestAssemblePolicyName],\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Encodes a byte array in base64 format.\n * @param value - The Uint8Aray or string to encode\n */\nexport function base64Encode(value: Uint8Array | string): string {\n  if (value instanceof Uint8Array) {\n    const bufferValue = value instanceof Buffer ? value : Buffer.from(value.buffer);\n    return bufferValue.toString(\"base64\");\n  } else {\n    return Buffer.from(value).toString(\"base64\");\n  }\n}\n\n/**\n * Decodes a base64 string into a byte array.\n * @param value - The base64 string to decode\n */\nexport function base64Decode(value: string): Uint8Array {\n  return Buffer.from(value, \"base64\");\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { base64Decode, base64Encode } from \"./bufferSerializer\";\n\nexport interface ContinuationToken {\n  nextPartitionKey: string;\n  nextRowKey: string;\n}\n\n/**\n * Encodes the nextPartitionKey and nextRowKey into a single continuation token\n */\nexport function encodeContinuationToken(\n  nextPartitionKey: string = \"\",\n  nextRowKey: string = \"\"\n): string | undefined {\n  if (!nextPartitionKey && !nextRowKey) {\n    return undefined;\n  }\n\n  const continuationToken = JSON.stringify({\n    nextPartitionKey,\n    nextRowKey,\n  });\n\n  return base64Encode(continuationToken);\n}\n\n/**\n * Decodes a continuationToken into an object containing a nextPartitionKey and nextRowKey\n */\nexport function decodeContinuationToken(encodedToken: string): ContinuationToken {\n  const decodedToken = base64Decode(encodedToken);\n  let tokenStr = \"\";\n\n  for (const byte of decodedToken) {\n    tokenStr += String.fromCharCode(byte);\n  }\n  const continuationToken: ContinuationToken = JSON.parse(tokenStr);\n\n  return continuationToken;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { EdmTypes, SignedIdentifier, TableEntityQueryOptions } from \"./models\";\nimport {\n  QueryOptions as GeneratedQueryOptions,\n  SignedIdentifier as GeneratedSignedIdentifier,\n} from \"./generated/models\";\nimport { base64Decode, base64Encode } from \"./utils/bufferSerializer\";\nimport { truncatedISO8061Date } from \"./utils/truncateISO8061Date\";\n\nconst propertyCaseMap: Map<string, string> = new Map<string, string>([\n  [\"PartitionKey\", \"partitionKey\"],\n  [\"RowKey\", \"rowKey\"],\n  [\"odata.etag\", \"etag\"],\n  [\"Timestamp\", \"timestamp\"],\n]);\n\nconst Edm = {\n  Binary: \"Edm.Binary\",\n  Boolean: \"Edm.Boolean\",\n  DateTime: \"Edm.DateTime\",\n  Double: \"Edm.Double\",\n  Guid: \"Edm.Guid\",\n  Int32: \"Edm.Int32\",\n  Int64: \"Edm.Int64\",\n  String: \"Edm.String\",\n} as const;\n\ntype supportedTypes = boolean | string | number | Date | Uint8Array | bigint;\n\ntype serializedType = {\n  value: supportedTypes;\n  type?: string;\n};\n\nfunction serializePrimitive(value: any): serializedType {\n  const serializedValue: serializedType = { value };\n  if (\n    value === undefined ||\n    value === null ||\n    typeof value === \"boolean\" ||\n    typeof value === \"string\" ||\n    typeof value === \"number\"\n  ) {\n    serializedValue.value = value;\n  } else if (typeof value === \"bigint\") {\n    serializedValue.value = value.toString();\n    serializedValue.type = Edm.Int64;\n  } else if (value instanceof Date) {\n    serializedValue.value = value;\n    serializedValue.type = Edm.DateTime;\n  } else if (value instanceof Uint8Array) {\n    serializedValue.value = base64Encode(value);\n    serializedValue.type = Edm.Binary;\n  } else {\n    throw new Error(`Unknown EDM type ${typeof value}`);\n  }\n\n  return serializedValue;\n}\n\nfunction serializeObject(obj: { value: any; type: EdmTypes }): serializedType {\n  const serializedValue: serializedType = { value: obj.value };\n  if (\n    obj.type === \"Boolean\" ||\n    obj.type === \"DateTime\" ||\n    obj.type === \"Double\" ||\n    obj.type === \"Guid\" ||\n    obj.type === \"Int32\" ||\n    obj.type === \"Int64\" ||\n    obj.type === \"String\" ||\n    obj.type === \"Binary\"\n  ) {\n    serializedValue.value = obj.value;\n    serializedValue.type = Edm[obj.type];\n  } else {\n    throw new Error(`Unknown EDM type ${typeof obj.value}`);\n  }\n\n  return serializedValue;\n}\n\nfunction getSerializedValue(value: any): serializedType {\n  if (typeof value === \"object\" && value?.value !== undefined && value?.type !== undefined) {\n    return serializeObject(value);\n  } else {\n    return serializePrimitive(value);\n  }\n}\n\nfunction translatePropertyNameForSerialization(propertyName: string): string {\n  for (const [original, internal] of propertyCaseMap) {\n    if (internal === propertyName) {\n      return original;\n    }\n  }\n\n  return propertyName;\n}\n\nexport function serialize(obj: object): Record<string, Record<string, unknown>> {\n  const serialized: any = {};\n  for (const [propertyName, propertyValue] of Object.entries(obj)) {\n    const transformedKey = translatePropertyNameForSerialization(propertyName);\n    const serializedVal = getSerializedValue(propertyValue);\n    serialized[transformedKey] = serializedVal.value;\n    if (serializedVal.type) {\n      serialized[`${transformedKey}@odata.type`] = serializedVal.type;\n    }\n  }\n  return serialized;\n}\n\nfunction getTypedObject(value: any, type: string, disableTypeConversion: boolean): any {\n  switch (type) {\n    case Edm.Boolean:\n      return disableTypeConversion ? { value, type: \"Boolean\" } : value;\n    case Edm.Double:\n      return disableTypeConversion ? { value, type: \"Double\" } : value;\n    case Edm.Int32:\n      return disableTypeConversion ? { value, type: \"Int32\" } : value;\n    case Edm.String:\n      return disableTypeConversion ? { value, type: \"String\" } : value;\n    case Edm.DateTime:\n      return disableTypeConversion ? { value, type: \"DateTime\" } : new Date(value);\n    case Edm.Int64:\n      return disableTypeConversion ? { value, type: \"Int64\" } : BigInt(value);\n    case Edm.Guid:\n      return { value, type: \"Guid\" };\n    case Edm.Binary:\n      return disableTypeConversion ? { value, type: \"Binary\" } : base64Decode(value);\n    default:\n      throw new Error(`Unknown EDM type ${type}`);\n  }\n}\n\nexport function deserialize<T extends object = Record<string, any>>(\n  obj: object,\n  disableTypeConversion: boolean = false\n): T {\n  const deserialized: any = {};\n  for (const [key, value] of Object.entries(obj)) {\n    if (key.indexOf(\"@odata.type\") === -1) {\n      const transformedKey = propertyCaseMap.get(key) ?? key;\n      let typedValue = value;\n      if (`${key}@odata.type` in obj) {\n        const type = (obj as any)[`${key}@odata.type`];\n        typedValue = getTypedObject(value, type, disableTypeConversion);\n      } else if (disableTypeConversion && [\"number\", \"string\", \"boolean\"].includes(typeof value)) {\n        // The service, doesn't return type metadata for number, strings or booleans\n        // if automatic type conversion is disabled we'll infer the EDM object\n        typedValue = inferTypedObject(key, value);\n      }\n\n      deserialized[transformedKey] = typedValue;\n    }\n  }\n  return deserialized;\n}\n\nfunction inferTypedObject(propertyName: string, value: number | string | boolean) {\n  // We need to skip service metadata fields such as partitionKey and rowKey and use the same value returned by the service\n  if (propertyCaseMap.has(propertyName)) {\n    return value;\n  }\n\n  switch (typeof value) {\n    case \"boolean\":\n      return { value: String(value), type: \"Boolean\" };\n    case \"number\":\n      return getTypedNumber(value);\n    case \"string\":\n      return { value, type: \"String\" };\n    default:\n      return value;\n  }\n}\n\n/**\n * Returns the number when typeConversion is enabled or the EDM object with the correct number format Double or Int32 if disabled\n */\nfunction getTypedNumber(value: number): { value: string; type: \"Int32\" | \"Double\" } {\n  const valueStr = String(value);\n  if (Number.isSafeInteger(value)) {\n    return { value: valueStr, type: \"Int32\" };\n  } else {\n    return { value: valueStr, type: \"Double\" };\n  }\n}\n\nexport function deserializeObjectsArray<T extends object>(\n  objArray: object[],\n  disableTypeConversion: boolean\n): T[] {\n  return objArray.map((obj) => deserialize<T>(obj, disableTypeConversion));\n}\n\n/**\n * For ACL endpoints the Tables Service takes an ISO Date without decimals however\n * serializing a JavaScript date gives us a date with decimals 2021-07-08T09:10:09.000Z\n * which makes the XML request body invalid, these 2 functions serialize and deserialize the\n * dates so that they are in the expected format\n */\nexport function serializeSignedIdentifiers(\n  signedIdentifiers: SignedIdentifier[]\n): GeneratedSignedIdentifier[] {\n  return signedIdentifiers.map((acl) => {\n    const { id, accessPolicy } = acl;\n    const { start, expiry, ...rest } = accessPolicy ?? {};\n    const serializedStart = start\n      ? truncatedISO8061Date(start, false /** withMilliseconds */)\n      : undefined;\n    const serializedExpiry = expiry\n      ? truncatedISO8061Date(expiry, false /** withMilliseconds */)\n      : undefined;\n\n    return {\n      id,\n      accessPolicy: {\n        ...(serializedExpiry && { expiry: serializedExpiry }),\n        ...(serializedStart && { start: serializedStart }),\n        ...rest,\n      },\n    };\n  });\n}\n\nexport function deserializeSignedIdentifier(\n  signedIdentifiers: GeneratedSignedIdentifier[]\n): SignedIdentifier[] {\n  return signedIdentifiers.map((si) => {\n    const { id, accessPolicy } = si;\n    const { start, expiry, ...restAcl } = accessPolicy ?? {};\n    const deserializedStart = start ? new Date(start) : undefined;\n    const deserializedExpiry = expiry ? new Date(expiry) : undefined;\n\n    return {\n      id,\n      accessPolicy: {\n        ...(deserializedExpiry && { expiry: deserializedExpiry }),\n        ...(deserializedStart && { start: deserializedStart }),\n        ...restAcl,\n      },\n    };\n  });\n}\n\nexport function serializeQueryOptions(query: TableEntityQueryOptions): GeneratedQueryOptions {\n  const { select, ...queryOptions } = query;\n  const mappedQuery: GeneratedQueryOptions = { ...queryOptions };\n  // Properties that are always returned by the service but are not allowed in select\n  const excludeFromSelect = [\"etag\", \"odata.etag\"];\n  if (select) {\n    mappedQuery.select = select\n      .filter((p) => !excludeFromSelect.includes(p))\n      .map(translatePropertyNameForSerialization)\n      .join(\",\");\n  }\n  return mappedQuery;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { v4 as uuidv4 } from \"uuid\";\n\n// This is used as a workaround to be able to stub generateUuid\n// during testing.\nexport class Uuid {\n  public static generateUuid(): string {\n    return uuidv4();\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nfunction escapeQuotesIfString(input: unknown, previous: string): string | unknown {\n  let result = input;\n\n  if (typeof input === \"string\") {\n    result = escapeQuotes(input);\n    // check if we need to escape this literal\n    if (!previous.trim().endsWith(\"'\")) {\n      result = `'${result}'`;\n    }\n  }\n  return result;\n}\n\nexport function escapeQuotes(input: string): string {\n  return input.replace(/'/g, \"''\");\n}\n\n/**\n * Escapes an odata filter expression to avoid errors with quoting string literals.\n */\nexport function odata(strings: TemplateStringsArray, ...values: unknown[]): string {\n  const results = [];\n  for (let i = 0; i < strings.length; i++) {\n    results.push(strings[i]);\n    if (i < values.length) {\n      results.push(escapeQuotesIfString(values[i], strings[i]));\n    }\n  }\n  return results.join(\"\");\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport \"@azure/core-paging\";\nimport {\n  CreateTableEntityResponse,\n  DeleteTableEntityOptions,\n  GetAccessPolicyResponse,\n  GetTableEntityOptions,\n  GetTableEntityResponse,\n  ListTableEntitiesOptions,\n  SignedIdentifier,\n  TableServiceClientOptions as TableClientOptions,\n  TableEntity,\n  TableEntityQueryOptions,\n  TableEntityResult,\n  TableEntityResultPage,\n  TableTransactionResponse,\n  TransactionAction,\n  UpdateMode,\n  UpdateTableEntityOptions,\n} from \"./models\";\nimport {\n  DeleteTableEntityResponse,\n  SetAccessPolicyResponse,\n  UpdateEntityResponse,\n  UpsertEntityResponse,\n} from \"./generatedModels\";\nimport {\n  FullOperationResponse,\n  InternalClientPipelineOptions,\n  OperationOptions,\n} from \"@azure/core-client\";\nimport { GeneratedClient, TableDeleteEntityOptionalParams } from \"./generated\";\nimport {\n  NamedKeyCredential,\n  SASCredential,\n  TokenCredential,\n  isNamedKeyCredential,\n  isSASCredential,\n  isTokenCredential,\n} from \"@azure/core-auth\";\nimport { STORAGE_SCOPE, TablesLoggingAllowedHeaderNames } from \"./utils/constants\";\nimport { decodeContinuationToken, encodeContinuationToken } from \"./utils/continuationToken\";\nimport {\n  deserialize,\n  deserializeObjectsArray,\n  deserializeSignedIdentifier,\n  serialize,\n  serializeQueryOptions,\n  serializeSignedIdentifiers,\n} from \"./serialization\";\nimport { parseXML, stringifyXML } from \"@azure/core-xml\";\nimport { InternalTableTransaction } from \"./TableTransaction\";\nimport { ListEntitiesResponse } from \"./utils/internalModels\";\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { Pipeline } from \"@azure/core-rest-pipeline\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { Table } from \"./generated/operationsInterfaces\";\nimport { TableQueryEntitiesOptionalParams } from \"./generated/models\";\nimport { Uuid } from \"./utils/uuid\";\nimport { cosmosPatchPolicy } from \"./cosmosPathPolicy\";\nimport { createSpan } from \"./utils/tracing\";\nimport { escapeQuotes } from \"./odata\";\nimport { getClientParamsFromConnectionString } from \"./utils/connectionString\";\nimport { handleTableAlreadyExists } from \"./utils/errorHelpers\";\nimport { isCosmosEndpoint } from \"./utils/isCosmosEndpoint\";\nimport { isCredential } from \"./utils/isCredential\";\nimport { logger } from \"./logger\";\nimport { tablesNamedKeyCredentialPolicy } from \"./tablesNamedCredentialPolicy\";\nimport { tablesSASTokenPolicy } from \"./tablesSASTokenPolicy\";\n\n/**\n * A TableClient represents a Client to the Azure Tables service allowing you\n * to perform operations on a single table.\n */\nexport class TableClient {\n  /**\n   * Table Account URL\n   */\n  public url: string;\n  /**\n   * Represents a pipeline for making a HTTP request to a URL.\n   * Pipelines can have multiple policies to manage manipulating each request before and after it is made to the server.\n   */\n  public pipeline: Pipeline;\n  private table: Table;\n  private credential?: NamedKeyCredential | SASCredential | TokenCredential;\n  private transactionClient?: InternalTableTransaction;\n  private clientOptions: TableClientOptions;\n  private readonly allowInsecureConnection: boolean;\n\n  /**\n   * Name of the table to perform operations on.\n   */\n  public readonly tableName: string;\n\n  /**\n   * Creates a new instance of the TableClient class.\n   *\n   * @param url - The URL of the service account that is the target of the desired operation, such as \"https://myaccount.table.core.windows.net\".\n   * @param tableName - the name of the table\n   * @param credential - NamedKeyCredential used to authenticate requests. Only Supported for Node\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   *\n   *\n   * ### Example using an account name/key:\n   *\n   * ```js\n   * const { AzureNamedKeyCredential, TableClient } = require(\"@azure/data-tables\");\n   * const account = \"<storage account name>\";\n   * const accountKey = \"<account key>\"\n   * const tableName = \"<table name>\";\n   * const sharedKeyCredential = new AzureNamedKeyCredential(account, accountKey);\n   *\n   * const client = new TableClient(\n   *   `https://${account}.table.core.windows.net`,\n   *   tableName,\n   *   sharedKeyCredential\n   * );\n   * ```\n   */\n  constructor(\n    url: string,\n    tableName: string,\n    credential: NamedKeyCredential,\n    options?: TableClientOptions\n  );\n  /**\n   * Creates a new instance of the TableClient class.\n   *\n   * @param url - The URL of the service account that is the target of the desired operation, such as \"https://myaccount.table.core.windows.net\".\n   * @param tableName - the name of the table\n   * @param credential - SASCredential used to authenticate requests\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   *\n   *\n   * ### Example using a SAS Token:\n   *\n   * ```js\n   * const { AzureSASCredential, TableClient } = require(\"@azure/data-tables\");\n   * const account = \"<storage account name>\";\n   * const sasToken = \"<sas-token>\";\n   * const tableName = \"<table name>\";\n   * const sasCredential = new AzureSASCredential(sasToken);\n   *\n   * const client = new TableClient(\n   *   `https://${account}.table.core.windows.net`,\n   *   tableName,\n   *   sasCredential\n   * );\n   * ```\n   */\n  constructor(\n    url: string,\n    tableName: string,\n    credential: SASCredential,\n    options?: TableClientOptions\n  );\n  /**\n   * Creates a new instance of the TableClient class.\n   *\n   * @param url - The URL of the service account that is the target of the desired operation, such as \"https://myaccount.table.core.windows.net\".\n   * @param tableName - the name of the table\n   * @param credential - Azure Active Directory credential used to authenticate requests\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   *\n   *\n   * ### Example using an Azure Active Directory credential:\n   *\n   * ```js\n   * cons { DefaultAzureCredential } = require(\"@azure/identity\");\n   * const { AzureSASCredential, TableClient } = require(\"@azure/data-tables\");\n   * const account = \"<storage account name>\";\n   * const sasToken = \"<sas-token>\";\n   * const tableName = \"<table name>\";\n   * const credential = new DefaultAzureCredential();\n   *\n   * const client = new TableClient(\n   *   `https://${account}.table.core.windows.net`,\n   *   tableName,\n   *   credential\n   * );\n   * ```\n   */\n  constructor(\n    url: string,\n    tableName: string,\n    credential: TokenCredential,\n    options?: TableClientOptions\n  );\n  /**\n   * Creates an instance of TableClient.\n   *\n   * @param url - A Client string pointing to Azure Storage table service, such as\n   *              \"https://myaccount.table.core.windows.net\". You can append a SAS,\n   *              such as \"https://myaccount.table.core.windows.net?sasString\".\n   * @param tableName - the name of the table\n   * @param options - Options to configure the HTTP pipeline.\n   *\n   * ### Example appending a SAS token:\n   *\n   * ```js\n   * const { TableClient } = require(\"@azure/data-tables\");\n   * const account = \"<storage account name>\";\n   * const sasToken = \"<SAS token>\";\n   * const tableName = \"<table name>\";\n   *\n   * const client = new TableClient(\n   *   `https://${account}.table.core.windows.net?${sasToken}`,\n   *   `${tableName}`\n   * );\n   * ```\n   */\n  constructor(url: string, tableName: string, options?: TableClientOptions);\n  constructor(\n    url: string,\n    tableName: string,\n    credentialOrOptions?: NamedKeyCredential | SASCredential | TableClientOptions | TokenCredential,\n    options: TableClientOptions = {}\n  ) {\n    this.url = url;\n    this.tableName = tableName;\n\n    const credential = isCredential(credentialOrOptions) ? credentialOrOptions : undefined;\n    this.credential = credential;\n\n    this.clientOptions = (!isCredential(credentialOrOptions) ? credentialOrOptions : options) || {};\n\n    this.allowInsecureConnection = this.clientOptions.allowInsecureConnection ?? false;\n    this.clientOptions.endpoint = this.clientOptions.endpoint || this.url;\n\n    const internalPipelineOptions: InternalClientPipelineOptions = {\n      ...this.clientOptions,\n      loggingOptions: {\n        logger: logger.info,\n        additionalAllowedHeaderNames: [...TablesLoggingAllowedHeaderNames],\n      },\n      deserializationOptions: {\n        parseXML,\n      },\n      serializationOptions: {\n        stringifyXML,\n      },\n      ...(isTokenCredential(this.credential) && {\n        credential: this.credential,\n        credentialScopes: STORAGE_SCOPE,\n      }),\n    };\n\n    const generatedClient = new GeneratedClient(this.url, internalPipelineOptions);\n    if (isNamedKeyCredential(credential)) {\n      generatedClient.pipeline.addPolicy(tablesNamedKeyCredentialPolicy(credential));\n    } else if (isSASCredential(credential)) {\n      generatedClient.pipeline.addPolicy(tablesSASTokenPolicy(credential));\n    }\n\n    if (isCosmosEndpoint(this.url)) {\n      generatedClient.pipeline.addPolicy(cosmosPatchPolicy());\n    }\n\n    this.table = generatedClient.table;\n    this.pipeline = generatedClient.pipeline;\n  }\n\n  /**\n   * Permanently deletes the current table with all of its entities.\n   * @param options - The options parameters.\n   *\n   * ### Example deleting a table\n   * ```js\n   * const { AzureNamedKeyCredential, TableClient } = require(\"@azure/data-tables\")\n   * const account = \"<storage account name>\";\n   * const accountKey = \"<account key>\"\n   * const tableName = \"<table name>\";\n   * const sharedKeyCredential = new AzureNamedKeyCredential(account, accountKey);\n   *\n   * const client = new TableClient(\n   *   `https://${account}.table.core.windows.net`,\n   *   `${tableName}`,\n   *   sharedKeyCredential\n   * );\n   *\n   * // calling deleteTable will delete the table used\n   * // to instantiate the TableClient.\n   * // Note: If the table doesn't exist this function doesn't fail.\n   * await client.deleteTable();\n   * ```\n   */\n  // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n  public async deleteTable(options: OperationOptions = {}): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"TableClient-deleteTable\", options);\n    try {\n      await this.table.delete(this.tableName, updatedOptions);\n    } catch (e) {\n      if (e.statusCode === 404) {\n        logger.info(\"TableClient-deleteTable: Table doesn't exist\");\n      } else {\n        span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n        throw e;\n      }\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   *  Creates a table with the tableName passed to the client constructor\n   * @param options - The options parameters.\n   *\n   * ### Example creating a table\n   * ```js\n   * const { AzureNamedKeyCredential, TableClient } = require(\"@azure/data-tables\")\n   * const account = \"<storage account name>\";\n   * const accountKey = \"<account key>\"\n   * const tableName = \"<table name>\";\n   * const sharedKeyCredential = new AzureNamedKeyCredential(account, accountKey);\n   *\n   * const client = new TableClient(\n   *   `https://${account}.table.core.windows.net`,\n   *   `${tableName}`,\n   *   sharedKeyCredential\n   * );\n   *\n   * // calling create table will create the table used\n   * // to instantiate the TableClient.\n   * // Note: If the table already\n   * // exists this function doesn't throw.\n   * await client.createTable();\n   * ```\n   */\n  // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n  public async createTable(options: OperationOptions = {}): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"TableClient-createTable\", options);\n    try {\n      await this.table.create({ name: this.tableName }, updatedOptions);\n    } catch (e) {\n      handleTableAlreadyExists(e, { ...updatedOptions, span, logger, tableName: this.tableName });\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns a single entity in the table.\n   * @param partitionKey - The partition key of the entity.\n   * @param rowKey - The row key of the entity.\n   * @param options - The options parameters.\n   *\n   * ### Example getting an entity\n   * ```js\n   * const { AzureNamedKeyCredential, TableClient } = require(\"@azure/data-tables\")\n   * const account = \"<storage account name>\";\n   * const accountKey = \"<account key>\"\n   * const tableName = \"<table name>\";\n   * const sharedKeyCredential = new AzureNamedKeyCredential(account, accountKey);\n   *\n   * const client = new TableClient(\n   *   `https://${account}.table.core.windows.net`,\n   *   `${tableName}`,\n   *   sharedKeyCredential\n   * );\n   *\n   * // getEntity will get a single entity stored in the service that\n   * // matches exactly the partitionKey and rowKey used as parameters\n   * // to the method.\n   * const entity = await client.getEntity(\"<partitionKey>\", \"<rowKey>\");\n   * console.log(entity);\n   * ```\n   */\n  public async getEntity<T extends object = Record<string, unknown>>(\n    partitionKey: string,\n    rowKey: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options: GetTableEntityOptions = {}\n  ): Promise<GetTableEntityResponse<TableEntityResult<T>>> {\n    const { span, updatedOptions } = createSpan(\"TableClient-getEntity\", options);\n\n    let parsedBody: any;\n    function onResponse(rawResponse: FullOperationResponse, flatResponse: unknown): void {\n      parsedBody = rawResponse.parsedBody;\n      if (updatedOptions.onResponse) {\n        updatedOptions.onResponse(rawResponse, flatResponse);\n      }\n    }\n\n    try {\n      const { disableTypeConversion, queryOptions, ...getEntityOptions } = updatedOptions || {};\n      await this.table.queryEntitiesWithPartitionAndRowKey(\n        this.tableName,\n        escapeQuotes(partitionKey),\n        escapeQuotes(rowKey),\n        {\n          ...getEntityOptions,\n          queryOptions: serializeQueryOptions(queryOptions || {}),\n          onResponse,\n        }\n      );\n      const tableEntity = deserialize<TableEntityResult<T>>(\n        parsedBody,\n        disableTypeConversion ?? false\n      );\n\n      return tableEntity;\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Queries entities in a table.\n   * @param options - The options parameters.\n   *\n   * Example listing entities\n   * ```js\n   * const { AzureNamedKeyCredential, TableClient } = require(\"@azure/data-tables\")\n   * const account = \"<storage account name>\";\n   * const accountKey = \"<account key>\"\n   * const tableName = \"<table name>\";\n   * const sharedKeyCredential = new AzureNamedKeyCredential(account, accountKey);\n   *\n   * const client = new TableClient(\n   *   `https://${account}.table.core.windows.net`,\n   *   `${tableName}`,\n   *   sharedKeyCredential\n   * );\n   *\n   * // list entities returns a AsyncIterableIterator\n   * // this helps consuming paginated responses by\n   * // automatically handling getting the next pages\n   * const entities = client.listEntities();\n   *\n   * // this loop will get all the entities from all the pages\n   * // returned by the service\n   * for await (const entity of entities) {\n   *    console.log(entity);\n   * }\n   * ```\n   */\n  public listEntities<T extends object = Record<string, unknown>>(\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options: ListTableEntitiesOptions = {}\n  ): PagedAsyncIterableIterator<TableEntityResult<T>, TableEntityResultPage<T>> {\n    const tableName = this.tableName;\n    const iter = this.listEntitiesAll<T>(tableName, options);\n\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings) => {\n        const pageOptions: InternalListTableEntitiesOptions = {\n          ...options,\n          queryOptions: { ...options.queryOptions, top: settings?.maxPageSize },\n        };\n\n        if (settings?.continuationToken) {\n          pageOptions.continuationToken = settings.continuationToken;\n        }\n\n        return this.listEntitiesPage(tableName, pageOptions);\n      },\n    };\n  }\n\n  private async *listEntitiesAll<T extends object>(\n    tableName: string,\n    options?: InternalListTableEntitiesOptions\n  ): AsyncIterableIterator<TableEntityResult<T>> {\n    const firstPage = await this._listEntities<T>(tableName, options);\n    yield* firstPage;\n    if (firstPage.continuationToken) {\n      const optionsWithContinuation: InternalListTableEntitiesOptions = {\n        ...options,\n        continuationToken: firstPage.continuationToken,\n      };\n      for await (const page of this.listEntitiesPage<T>(tableName, optionsWithContinuation)) {\n        yield* page;\n      }\n    }\n  }\n\n  private async *listEntitiesPage<T extends object>(\n    tableName: string,\n    options: InternalListTableEntitiesOptions = {}\n  ): AsyncIterableIterator<ListEntitiesResponse<TableEntityResult<T>>> {\n    const { span, updatedOptions } = createSpan(\"TableClient-listEntitiesPage\", options);\n\n    try {\n      let result = await this._listEntities<T>(tableName, updatedOptions);\n\n      yield result;\n\n      while (result.continuationToken) {\n        const optionsWithContinuation: InternalListTableEntitiesOptions = {\n          ...updatedOptions,\n          continuationToken: result.continuationToken,\n        };\n\n        result = await this._listEntities(tableName, optionsWithContinuation);\n\n        yield result;\n      }\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async _listEntities<T extends object>(\n    tableName: string,\n    options: InternalListTableEntitiesOptions = {}\n  ): Promise<TableEntityResultPage<T>> {\n    const { disableTypeConversion = false } = options;\n    const queryOptions = serializeQueryOptions(options.queryOptions || {});\n    const listEntitiesOptions: TableQueryEntitiesOptionalParams = {\n      ...options,\n      queryOptions,\n    };\n\n    // If a continuation token is used, decode it and set the next row and partition key\n    if (options.continuationToken) {\n      const continuationToken = decodeContinuationToken(options.continuationToken);\n      listEntitiesOptions.nextRowKey = continuationToken.nextRowKey;\n      listEntitiesOptions.nextPartitionKey = continuationToken.nextPartitionKey;\n    }\n\n    const {\n      xMsContinuationNextPartitionKey: nextPartitionKey,\n      xMsContinuationNextRowKey: nextRowKey,\n      value,\n    } = await this.table.queryEntities(tableName, listEntitiesOptions);\n\n    const tableEntities = deserializeObjectsArray<TableEntityResult<T>>(\n      value ?? [],\n      disableTypeConversion\n    );\n\n    // Encode nextPartitionKey and nextRowKey as a single continuation token and add it as a\n    // property to the page.\n    const continuationToken = encodeContinuationToken(nextPartitionKey, nextRowKey);\n    const page: TableEntityResultPage<T> = Object.assign([...tableEntities], {\n      continuationToken,\n    });\n\n    return page;\n  }\n\n  /**\n   * Insert entity in the table.\n   * @param entity - The properties for the table entity.\n   * @param options - The options parameters.\n   *\n   * ### Example creating an entity\n   * ```js\n   * const { AzureNamedKeyCredential, TableClient } = require(\"@azure/data-tables\")\n   * const account = \"<storage account name>\";\n   * const accountKey = \"<account key>\"\n   * const tableName = \"<table name>\";\n   * const sharedKeyCredential = new AzureNamedKeyCredential(account, accountKey);\n   *\n   * const client = new TableClient(\n   *   `https://${account}.table.core.windows.net`,\n   *   `${tableName}`,\n   *   sharedKeyCredential\n   * );\n   *\n   * // partitionKey and rowKey are required properties of the entity to create\n   * // and accepts any other properties\n   * await client.createEntity({partitionKey: \"p1\", rowKey: \"r1\", foo: \"Hello!\"});\n   * ```\n   */\n  public async createEntity<T extends object>(\n    entity: TableEntity<T>,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options: OperationOptions = {}\n  ): Promise<CreateTableEntityResponse> {\n    const { span, updatedOptions } = createSpan(\"TableClient-createEntity\", options);\n\n    try {\n      const { ...createTableEntity } = updatedOptions || {};\n      return await this.table.insertEntity(this.tableName, {\n        ...createTableEntity,\n        tableEntityProperties: serialize(entity),\n        responsePreference: \"return-no-content\",\n      });\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes the specified entity in the table.\n   * @param partitionKey - The partition key of the entity.\n   * @param rowKey - The row key of the entity.\n   * @param options - The options parameters.\n   *\n   * ### Example deleting an entity\n   * ```js\n   * const { AzureNamedKeyCredential, TableClient } = require(\"@azure/data-tables\")\n   * const account = \"<storage account name>\";\n   * const accountKey = \"<account key>\"\n   * const tableName = \"<table name>\";\n   * const sharedKeyCredential = new AzureNamedKeyCredential(account, accountKey);\n   *\n   * const client = new TableClient(\n   *   `https://${account}.table.core.windows.net`,\n   *   `${tableName}`,\n   *   sharedKeyCredential\n   * );\n   *\n   * // deleteEntity deletes the entity that matches\n   * // exactly the partitionKey and rowKey passed as parameters\n   * await client.deleteEntity(\"<partitionKey>\", \"<rowKey>\")\n   * ```\n   */\n  public async deleteEntity(\n    partitionKey: string,\n    rowKey: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options: DeleteTableEntityOptions = {}\n  ): Promise<DeleteTableEntityResponse> {\n    const { span, updatedOptions } = createSpan(\"TableClient-deleteEntity\", options);\n\n    try {\n      const { etag = \"*\", ...rest } = updatedOptions || {};\n      const deleteOptions: TableDeleteEntityOptionalParams = {\n        ...rest,\n      };\n      return await this.table.deleteEntity(\n        this.tableName,\n        escapeQuotes(partitionKey),\n        escapeQuotes(rowKey),\n        etag,\n        deleteOptions\n      );\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Update an entity in the table.\n   * @param entity - The properties of the entity to be updated.\n   * @param mode - The different modes for updating the entity:\n   *               - Merge: Updates an entity by updating the entity's properties without replacing the existing entity.\n   *               - Replace: Updates an existing entity by replacing the entire entity.\n   * @param options - The options parameters.\n   *\n   * ### Example updating an entity\n   * ```js\n   * const { AzureNamedKeyCredential, TableClient } = require(\"@azure/data-tables\")\n   * const account = \"<storage account name>\";\n   * const accountKey = \"<account key>\"\n   * const tableName = \"<table name>\";\n   * const sharedKeyCredential = new AzureNamedKeyCredential(account, accountKey);\n   *\n   * const client = new TableClient(\n   *   `https://${account}.table.core.windows.net`,\n   *   `${tableName}`,\n   *   sharedKeyCredential\n   * );\n   *\n   * const entity = {partitionKey: \"p1\", rowKey: \"r1\", bar: \"updatedBar\"};\n   *\n   * // Update uses update mode \"Merge\" as default\n   * // merge means that update will match a stored entity\n   * // that has the same partitionKey and rowKey as the entity\n   * // passed to the method and then will only update the properties present in it.\n   * // Any other properties that are not defined in the entity passed to updateEntity\n   * // will remain as they are in the service\n   * await client.updateEntity(entity)\n   *\n   * // We can also set the update mode to Replace, which will match the entity passed\n   * // to updateEntity with one stored in the service and replace with the new one.\n   * // If there are any missing properties in the entity passed to updateEntity, they\n   * // will be removed from the entity stored in the service\n   * await client.updateEntity(entity, \"Replace\")\n   * ```\n   */\n  public async updateEntity<T extends object>(\n    entity: TableEntity<T>,\n    mode: UpdateMode = \"Merge\",\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options: UpdateTableEntityOptions = {}\n  ): Promise<UpdateEntityResponse> {\n    const { span, updatedOptions } = createSpan(`TableClient-updateEntity-${mode}`, options);\n\n    try {\n      const partitionKey = escapeQuotes(entity.partitionKey);\n      const rowKey = escapeQuotes(entity.rowKey);\n\n      const { etag = \"*\", ...updateEntityOptions } = updatedOptions || {};\n      if (mode === \"Merge\") {\n        return await this.table.mergeEntity(this.tableName, partitionKey, rowKey, {\n          tableEntityProperties: serialize(entity),\n          ifMatch: etag,\n          ...updateEntityOptions,\n        });\n      }\n      if (mode === \"Replace\") {\n        return await this.table.updateEntity(this.tableName, partitionKey, rowKey, {\n          tableEntityProperties: serialize(entity),\n          ifMatch: etag,\n          ...updateEntityOptions,\n        });\n      }\n\n      throw new Error(`Unexpected value for update mode: ${mode}`);\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Upsert an entity in the table.\n   * @param entity - The properties for the table entity.\n   * @param mode - The different modes for updating the entity:\n   *               - Merge: Updates an entity by updating the entity's properties without replacing the existing entity.\n   *               - Replace: Updates an existing entity by replacing the entire entity.\n   * @param options - The options parameters.\n   *\n   * ### Example upserting an entity\n   * ```js\n   * const { AzureNamedKeyCredential, TableClient } = require(\"@azure/data-tables\")\n   * const account = \"<storage account name>\";\n   * const accountKey = \"<account key>\"\n   * const tableName = \"<table name>\";\n   * const sharedKeyCredential = new AzureNamedKeyCredential(account, accountKey);\n   *\n   * const client = new TableClient(\n   *   `https://${account}.table.core.windows.net`,\n   *   `${tableName}`,\n   *   sharedKeyCredential\n   * );\n   *\n   * const entity = {partitionKey: \"p1\", rowKey: \"r1\", bar: \"updatedBar\"};\n   *\n   * // Upsert uses update mode \"Merge\" as default.\n   * // This behaves similarly to update but creates the entity\n   * // if it doesn't exist in the service\n   * await client.upsertEntity(entity)\n   *\n   * // We can also set the update mode to Replace.\n   * // This behaves similarly to update but creates the entity\n   * // if it doesn't exist in the service\n   * await client.upsertEntity(entity, \"Replace\")\n   * ```\n   */\n  public async upsertEntity<T extends object>(\n    entity: TableEntity<T>,\n    mode: UpdateMode = \"Merge\",\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options: OperationOptions = {}\n  ): Promise<UpsertEntityResponse> {\n    const { span, updatedOptions } = createSpan(`TableClient-upsertEntity-${mode}`, options);\n\n    try {\n      const partitionKey = escapeQuotes(entity.partitionKey);\n      const rowKey = escapeQuotes(entity.rowKey);\n\n      if (mode === \"Merge\") {\n        return await this.table.mergeEntity(this.tableName, partitionKey, rowKey, {\n          tableEntityProperties: serialize(entity),\n          ...updatedOptions,\n        });\n      }\n\n      if (mode === \"Replace\") {\n        return await this.table.updateEntity(this.tableName, partitionKey, rowKey, {\n          tableEntityProperties: serialize(entity),\n          ...updatedOptions,\n        });\n      }\n      throw new Error(`Unexpected value for update mode: ${mode}`);\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves details about any stored access policies specified on the table that may be used with\n   * Shared Access Signatures.\n   * @param options - The options parameters.\n   */\n  public async getAccessPolicy(options: OperationOptions = {}): Promise<GetAccessPolicyResponse> {\n    const { span, updatedOptions } = createSpan(\"TableClient-getAccessPolicy\", options);\n    try {\n      const signedIdentifiers = await this.table.getAccessPolicy(this.tableName, updatedOptions);\n      return deserializeSignedIdentifier(signedIdentifiers);\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets stored access policies for the table that may be used with Shared Access Signatures.\n   * @param tableAcl - The Access Control List for the table.\n   * @param options - The options parameters.\n   */\n  public async setAccessPolicy(\n    tableAcl: SignedIdentifier[],\n    options: OperationOptions = {}\n  ): Promise<SetAccessPolicyResponse> {\n    const { span, updatedOptions } = createSpan(\"TableClient-setAccessPolicy\", options);\n    try {\n      const serlializedAcl = serializeSignedIdentifiers(tableAcl);\n      return await this.table.setAccessPolicy(this.tableName, {\n        ...updatedOptions,\n        tableAcl: serlializedAcl,\n      });\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Submits a Transaction which is composed of a set of actions. You can provide the actions as a list\n   * or you can use {@link TableTransaction} to help building the transaction.\n   *\n   * Example usage:\n   * ```typescript\n   * const { TableClient } = require(\"@azure/data-tables\");\n   * const connectionString = \"<connection-string>\"\n   * const tableName = \"<tableName>\"\n   * const client = TableClient.fromConnectionString(connectionString, tableName);\n   * const actions = [\n   *    [\"create\", {partitionKey: \"p1\", rowKey: \"1\", data: \"test1\"}],\n   *    [\"delete\", {partitionKey: \"p1\", rowKey: \"2\"}],\n   *    [\"update\", {partitionKey: \"p1\", rowKey: \"3\", data: \"newTest\"}, \"Merge\"]\n   * ]\n   * const result = await client.submitTransaction(actions);\n   * ```\n   *\n   * Example usage with TableTransaction:\n   * ```js\n   * const { TableClient } = require(\"@azure/data-tables\");\n   * const connectionString = \"<connection-string>\"\n   * const tableName = \"<tableName>\"\n   * const client = TableClient.fromConnectionString(connectionString, tableName);\n   * const transaction = new TableTransaction();\n   * // Call the available action in the TableTransaction object\n   * transaction.create({partitionKey: \"p1\", rowKey: \"1\", data: \"test1\"});\n   * transaction.delete(\"p1\", \"2\");\n   * transaction.update({partitionKey: \"p1\", rowKey: \"3\", data: \"newTest\"}, \"Merge\")\n   * // submitTransaction with the actions list on the transaction.\n   * const result = await client.submitTransaction(transaction.actions);\n   * ```\n   *\n   * @param actions - tuple that contains the action to perform, and the entity to perform the action with\n   */\n  public async submitTransaction(actions: TransactionAction[]): Promise<TableTransactionResponse> {\n    const partitionKey = actions[0][1].partitionKey;\n    const transactionId = Uuid.generateUuid();\n    const changesetId = Uuid.generateUuid();\n\n    if (!this.transactionClient) {\n      // Add pipeline\n      this.transactionClient = new InternalTableTransaction(\n        this.url,\n        partitionKey,\n        transactionId,\n        changesetId,\n        this.clientOptions,\n        new TableClient(this.url, this.tableName),\n        this.credential,\n        this.allowInsecureConnection\n      );\n    } else {\n      this.transactionClient.reset(transactionId, changesetId, partitionKey);\n    }\n\n    for (const item of actions) {\n      const [action, entity, updateMode = \"Merge\"] = item;\n      switch (action) {\n        case \"create\":\n          this.transactionClient.createEntity(entity);\n          break;\n        case \"delete\":\n          this.transactionClient.deleteEntity(entity.partitionKey, entity.rowKey);\n          break;\n        case \"update\":\n          this.transactionClient.updateEntity(entity, updateMode);\n          break;\n        case \"upsert\":\n          this.transactionClient.upsertEntity(entity, updateMode);\n      }\n    }\n\n    return this.transactionClient.submitTransaction();\n  }\n\n  /**\n   *\n   * Creates an instance of TableClient from connection string.\n   *\n   * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.\n   *                           [ Note - Account connection string can only be used in NODE.JS runtime. ]\n   *                           Account connection string example -\n   *                           `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`\n   *                           SAS connection string example -\n   *                           `BlobEndpoint=https://myaccount.table.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`\n   * @param options - Options to configure the HTTP pipeline.\n   * @returns A new TableClient from the given connection string.\n   */\n  public static fromConnectionString(\n    connectionString: string,\n    tableName: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: TableClientOptions\n  ): TableClient {\n    const {\n      url,\n      options: clientOptions,\n      credential,\n    } = getClientParamsFromConnectionString(connectionString, options);\n    if (credential) {\n      return new TableClient(url, tableName, credential, clientOptions);\n    } else {\n      return new TableClient(url, tableName, clientOptions);\n    }\n  }\n}\n\ntype InternalQueryOptions = TableEntityQueryOptions & { top?: number };\ninterface InternalListTableEntitiesOptions extends ListTableEntitiesOptions {\n  queryOptions?: InternalQueryOptions;\n  /**\n   * An entity query continuation token from a previous call.\n   */\n  continuationToken?: string;\n  /**\n   * If true, automatic type conversion will be disabled and entity properties will\n   * be represented by full metadata types. For example, an Int32 value will be \\{value: \"123\", type: \"Int32\"\\} instead of 123.\n   * This option applies for all the properties\n   */\n  disableTypeConversion?: boolean;\n}\n"],"names":["KnownGeoReplicationStatusType","createHmac","isNamedKeyCredential","TablePropertiesMapper","TableServicePropertiesMapper","coreClient.createSerializer","Mappers.TableQueryResponse","Mappers.TableQueryHeaders","Mappers.TableServiceError","Mappers.TableQueryExceptionHeaders","Parameters.format","Parameters.top","Parameters.select","Parameters.filter","Parameters.nextTableName","Parameters.url","Parameters.accept","Parameters.version","Parameters.requestId","Parameters.dataServiceVersion","Mappers.TableResponse","Mappers.TableCreateHeaders","Mappers.TableCreateExceptionHeaders","Parameters.tableProperties","Parameters.contentType","Parameters.responsePreference","Mappers.TableDeleteHeaders","Mappers.TableDeleteExceptionHeaders","Parameters.table","Parameters.accept1","Mappers.TableEntityQueryResponse","Mappers.TableQueryEntitiesHeaders","Mappers.TableQueryEntitiesExceptionHeaders","Parameters.timeout","Parameters.nextPartitionKey","Parameters.nextRowKey","Mappers.TableQueryEntitiesWithPartitionAndRowKeyHeaders","Mappers.TableQueryEntitiesWithPartitionAndRowKeyExceptionHeaders","Parameters.partitionKey","Parameters.rowKey","Mappers.TableUpdateEntityHeaders","Mappers.TableUpdateEntityExceptionHeaders","Parameters.tableEntityProperties","Parameters.contentType1","Parameters.ifMatch","Mappers.TableMergeEntityHeaders","Mappers.TableMergeEntityExceptionHeaders","Mappers.TableDeleteEntityHeaders","Mappers.TableDeleteEntityExceptionHeaders","Parameters.ifMatch1","Mappers.TableInsertEntityHeaders","Mappers.TableInsertEntityExceptionHeaders","Mappers.TableGetAccessPolicyHeaders","Mappers.TableGetAccessPolicyExceptionHeaders","Parameters.comp","Parameters.accept2","Mappers.TableSetAccessPolicyHeaders","Mappers.TableSetAccessPolicyExceptionHeaders","Parameters.tableAcl","Parameters.contentType2","Parameters.accept3","xmlSerializer","Mappers.ServiceSetPropertiesHeaders","Mappers.ServiceSetPropertiesExceptionHeaders","Parameters.tableServiceProperties","Parameters.restype","Parameters.comp1","Mappers.TableServiceProperties","Mappers.ServiceGetPropertiesHeaders","Mappers.ServiceGetPropertiesExceptionHeaders","Mappers.TableServiceStats","Mappers.ServiceGetStatisticsHeaders","Mappers.ServiceGetStatisticsExceptionHeaders","Parameters.comp2","coreClient.ServiceClient","createSpanFunction","AzureNamedKeyCredential","URL","SpanStatusCode","isSASCredential","isTokenCredential","createClientLogger","URLSearchParams","parseXML","stringifyXML","__asyncDelegator","__asyncValues","createPipelineRequest","createHttpHeaders","ServiceClient","RestError","serializationPolicy","serializationPolicyName","uuidv4"],"mappings":"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"}