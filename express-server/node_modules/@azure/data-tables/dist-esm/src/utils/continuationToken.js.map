{"version":3,"file":"continuationToken.js","sourceRoot":"","sources":["../../../src/utils/continuationToken.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,YAAY,EAAE,YAAY,EAAE,MAAM,oBAAoB,CAAC;AAOhE;;GAEG;AACH,MAAM,UAAU,uBAAuB,CACrC,mBAA2B,EAAE,EAC7B,aAAqB,EAAE;IAEvB,IAAI,CAAC,gBAAgB,IAAI,CAAC,UAAU,EAAE;QACpC,OAAO,SAAS,CAAC;KAClB;IAED,MAAM,iBAAiB,GAAG,IAAI,CAAC,SAAS,CAAC;QACvC,gBAAgB;QAChB,UAAU;KACX,CAAC,CAAC;IAEH,OAAO,YAAY,CAAC,iBAAiB,CAAC,CAAC;AACzC,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,uBAAuB,CAAC,YAAoB;IAC1D,MAAM,YAAY,GAAG,YAAY,CAAC,YAAY,CAAC,CAAC;IAChD,IAAI,QAAQ,GAAG,EAAE,CAAC;IAElB,KAAK,MAAM,IAAI,IAAI,YAAY,EAAE;QAC/B,QAAQ,IAAI,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;KACvC;IACD,MAAM,iBAAiB,GAAsB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IAElE,OAAO,iBAAiB,CAAC;AAC3B,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { base64Decode, base64Encode } from \"./bufferSerializer\";\n\nexport interface ContinuationToken {\n  nextPartitionKey: string;\n  nextRowKey: string;\n}\n\n/**\n * Encodes the nextPartitionKey and nextRowKey into a single continuation token\n */\nexport function encodeContinuationToken(\n  nextPartitionKey: string = \"\",\n  nextRowKey: string = \"\"\n): string | undefined {\n  if (!nextPartitionKey && !nextRowKey) {\n    return undefined;\n  }\n\n  const continuationToken = JSON.stringify({\n    nextPartitionKey,\n    nextRowKey,\n  });\n\n  return base64Encode(continuationToken);\n}\n\n/**\n * Decodes a continuationToken into an object containing a nextPartitionKey and nextRowKey\n */\nexport function decodeContinuationToken(encodedToken: string): ContinuationToken {\n  const decodedToken = base64Decode(encodedToken);\n  let tokenStr = \"\";\n\n  for (const byte of decodedToken) {\n    tokenStr += String.fromCharCode(byte);\n  }\n  const continuationToken: ContinuationToken = JSON.parse(tokenStr);\n\n  return continuationToken;\n}\n"]}